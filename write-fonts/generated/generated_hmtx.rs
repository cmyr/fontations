// THIS FILE IS AUTOGENERATED.
// Any changes to this file will be overwritten.
// For more information about how codegen works, see font-codegen/README.md

#[allow(unused_imports)]
use crate::codegen_prelude::*;

/// The [hmtx (Horizontal Metrics)](https://docs.microsoft.com/en-us/typography/opentype/spec/hmtx) table
#[derive(Clone, Debug)]
pub struct Hmtx {
    /// Paired advance width and left side bearing values for each
    /// glyph. Records are indexed by glyph ID.
    pub h_metrics: Vec<LongHorMetric>,
    /// Left side bearings for glyph IDs greater than or equal to
    /// numberOfHMetrics.
    pub left_side_bearings: Vec<i16>,
}

impl FontWrite for Hmtx {
    fn write_into(&self, writer: &mut TableWriter) {
        self.h_metrics.write_into(writer);
        self.left_side_bearings.write_into(writer);
    }
}

impl Validate for Hmtx {
    fn validate_impl(&self, ctx: &mut ValidationCtx) {
        ctx.in_table("Hmtx", |ctx| {
            ctx.in_field("h_metrics", |ctx| {
                if self.h_metrics.len() > (u16::MAX as usize) {
                    ctx.report("array excedes max length");
                }
                self.h_metrics.validate_impl(ctx);
            });
        })
    }
}

#[cfg(feature = "parsing")]
impl<'a> FromObjRef<read_fonts::tables::hmtx::Hmtx<'a>> for Hmtx {
    fn from_obj_ref(obj: &read_fonts::tables::hmtx::Hmtx<'a>, _: FontData) -> Self {
        let offset_data = obj.offset_data();
        Hmtx {
            h_metrics: obj
                .h_metrics()
                .iter()
                .map(|x| FromObjRef::from_obj_ref(x, offset_data))
                .collect(),
            left_side_bearings: obj.left_side_bearings().iter().map(|x| x.get()).collect(),
        }
    }
}

#[cfg(feature = "parsing")]
impl<'a> FromTableRef<read_fonts::tables::hmtx::Hmtx<'a>> for Hmtx {}

#[derive(Clone, Debug)]
pub struct LongHorMetric {
    /// Advance width, in font design units.
    pub advance_width: u16,
    /// Glyph left side bearing, in font design units.
    pub lsb: i16,
}

impl FontWrite for LongHorMetric {
    fn write_into(&self, writer: &mut TableWriter) {
        self.advance_width.write_into(writer);
        self.lsb.write_into(writer);
    }
}

impl Validate for LongHorMetric {
    fn validate_impl(&self, _ctx: &mut ValidationCtx) {}
}

#[cfg(feature = "parsing")]
impl FromObjRef<read_fonts::tables::hmtx::LongHorMetric> for LongHorMetric {
    fn from_obj_ref(obj: &read_fonts::tables::hmtx::LongHorMetric, _: FontData) -> Self {
        LongHorMetric {
            advance_width: obj.advance_width(),
            lsb: obj.lsb(),
        }
    }
}
