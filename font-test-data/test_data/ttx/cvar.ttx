<?xml version="1.0" encoding="UTF-8"?>
<ttFont sfntVersion="\x00\x01\x00\x00" ttLibVersion="4.41">

  <GlyphOrder>
    <!-- The 'id' attribute is only for humans; it is ignored when parsed. -->
    <GlyphID id="0" name=".notdef"/>
    <GlyphID id="1" name="uni0020"/>
    <GlyphID id="2" name="uni0068"/>
    <GlyphID id="3" name="uni006E"/>
    <GlyphID id="4" name="uni006F"/>
  </GlyphOrder>

  <head>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="1.0"/>
    <fontRevision value="91.903"/>
    <checkSumAdjustment value="0xeb7f3add"/>
    <magicNumber value="0x5f0f3cf5"/>
    <flags value="00000000 00001011"/>
    <unitsPerEm value="1000"/>
    <created value="Fri Nov 25 12:44:33 2016"/>
    <modified value="Tue Nov 28 09:45:25 2017"/>
    <xMin value="18"/>
    <yMin value="-240"/>
    <xMax value="617"/>
    <yMax value="760"/>
    <macStyle value="00000000 00000000"/>
    <lowestRecPPEM value="6"/>
    <fontDirectionHint value="2"/>
    <indexToLocFormat value="0"/>
    <glyphDataFormat value="0"/>
  </head>

  <hhea>
    <tableVersion value="0x00010000"/>
    <ascent value="1068"/>
    <descent value="-292"/>
    <lineGap value="0"/>
    <advanceWidthMax value="645"/>
    <minLeftSideBearing value="18"/>
    <minRightSideBearing value="28"/>
    <xMaxExtent value="617"/>
    <caretSlopeRise value="1"/>
    <caretSlopeRun value="0"/>
    <caretOffset value="0"/>
    <reserved0 value="0"/>
    <reserved1 value="0"/>
    <reserved2 value="0"/>
    <reserved3 value="0"/>
    <metricDataFormat value="0"/>
    <numberOfHMetrics value="5"/>
  </hhea>

  <maxp>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="0x10000"/>
    <numGlyphs value="5"/>
    <maxPoints value="51"/>
    <maxContours value="2"/>
    <maxCompositePoints value="0"/>
    <maxCompositeContours value="0"/>
    <maxZones value="2"/>
    <maxTwilightPoints value="16"/>
    <maxStorage value="47"/>
    <maxFunctionDefs value="154"/>
    <maxInstructionDefs value="0"/>
    <maxStackElements value="398"/>
    <maxSizeOfInstructions value="3957"/>
    <maxComponentElements value="0"/>
    <maxComponentDepth value="0"/>
  </maxp>

  <OS_2>
    <!-- The fields 'usFirstCharIndex' and 'usLastCharIndex'
         will be recalculated by the compiler -->
    <version value="4"/>
    <xAvgCharWidth value="523"/>
    <usWeightClass value="400"/>
    <usWidthClass value="5"/>
    <fsType value="00000000 00000000"/>
    <ySubscriptXSize value="650"/>
    <ySubscriptYSize value="600"/>
    <ySubscriptXOffset value="0"/>
    <ySubscriptYOffset value="75"/>
    <ySuperscriptXSize value="650"/>
    <ySuperscriptYSize value="600"/>
    <ySuperscriptXOffset value="0"/>
    <ySuperscriptYOffset value="350"/>
    <yStrikeoutSize value="50"/>
    <yStrikeoutPosition value="322"/>
    <sFamilyClass value="0"/>
    <panose>
      <bFamilyType value="2"/>
      <bSerifStyle value="2"/>
      <bWeight value="5"/>
      <bProportion value="2"/>
      <bContrast value="6"/>
      <bStrokeVariation value="5"/>
      <bArmStyle value="5"/>
      <bLetterForm value="2"/>
      <bMidline value="2"/>
      <bXHeight value="4"/>
    </panose>
    <ulUnicodeRange1 value="11100000 00000000 00000010 11111111"/>
    <ulUnicodeRange2 value="01000000 00000000 00000000 00011111"/>
    <ulUnicodeRange3 value="00001000 00000000 00000000 00101001"/>
    <ulUnicodeRange4 value="00000000 00010000 00000000 00000000"/>
    <achVendID value="GOOG"/>
    <fsSelection value="00000001 01000000"/>
    <usFirstCharIndex value="32"/>
    <usLastCharIndex value="111"/>
    <sTypoAscender value="1068"/>
    <sTypoDescender value="-292"/>
    <sTypoLineGap value="0"/>
    <usWinAscent value="1068"/>
    <usWinDescent value="292"/>
    <ulCodePageRange1 value="00000000 00000000 00000000 00000000"/>
    <ulCodePageRange2 value="00000000 00000000 00000000 00000000"/>
    <sxHeight value="536"/>
    <sCapHeight value="714"/>
    <usDefaultChar value="0"/>
    <usBreakChar value="32"/>
    <usMaxContext value="0"/>
  </OS_2>

  <hmtx>
    <mtx name=".notdef" width="500" lsb="50"/>
    <mtx name="uni0020" width="260" lsb="0"/>
    <mtx name="uni0068" width="635" lsb="18"/>
    <mtx name="uni006E" width="645" lsb="28"/>
    <mtx name="uni006F" width="577" lsb="55"/>
  </hmtx>

  <cmap>
    <tableVersion version="0"/>
    <cmap_format_4 platformID="0" platEncID="3" language="0">
      <map code="0x20" name="uni0020"/><!-- SPACE -->
      <map code="0x68" name="uni0068"/><!-- LATIN SMALL LETTER H -->
      <map code="0x6e" name="uni006E"/><!-- LATIN SMALL LETTER N -->
      <map code="0x6f" name="uni006F"/><!-- LATIN SMALL LETTER O -->
    </cmap_format_4>
    <cmap_format_4 platformID="3" platEncID="1" language="0">
      <map code="0x20" name="uni0020"/><!-- SPACE -->
      <map code="0x68" name="uni0068"/><!-- LATIN SMALL LETTER H -->
      <map code="0x6e" name="uni006E"/><!-- LATIN SMALL LETTER N -->
      <map code="0x6f" name="uni006F"/><!-- LATIN SMALL LETTER O -->
    </cmap_format_4>
  </cmap>

  <fpgm>
    <assembly>
      NPUSHB[ ]	/* 74 values pushed */
      153 152 151 150 135 134 133 132 131 130 129 128 127 126 125 124 123 122 121 120 119 118 117 116 115
      114 113 112 111 110 109 108 107 106 105 104 103 102 101 100 99 98 97 96 95 94 93 92 91 90
      89 88 87 86 85 84 83 81 80 79 78 77 76 75 74 73 72 71 70 40 31 16 10 9
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 2 values pushed */
        11 10
        RS[ ]	/* ReadStore */
        SWAP[ ]	/* SwapTopStack */
        RS[ ]	/* ReadStore */
        NEG[ ]	/* Negate */
        SPVFS[ ]	/* SetPVectorFromStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 2 values pushed */
        10 11
        RS[ ]	/* ReadStore */
        SWAP[ ]	/* SwapTopStack */
        RS[ ]	/* ReadStore */
        SFVFS[ ]	/* SetFVectorFromStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        6
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        7
        RS[ ]	/* ReadStore */
        NEG[ ]	/* Negate */
        SPVFS[ ]	/* SetPVectorFromStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        79
        CALL[ ]	/* CallFunction */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        64
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            RCVT[ ]	/* ReadCVT */
            WCVTP[ ]	/* WriteCVTInPixels */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          SUB[ ]	/* Subtract */
          ABS[ ]	/* Absolute */
          ROLL[ ]	/* RollTopThreeStack */
          MUL[ ]	/* Multiply */
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            RCVT[ ]	/* ReadCVT */
            WCVTP[ ]	/* WriteCVTInPixels */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        7
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        6
        RS[ ]	/* ReadStore */
        SFVFS[ ]	/* SetFVectorFromStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        SWAP[ ]	/* SwapTopStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          ROLL[ ]	/* RollTopThreeStack */
          ADD[ ]	/* Add */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          ROLL[ ]	/* RollTopThreeStack */
          ADD[ ]	/* Add */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        SWAP[ ]	/* SwapTopStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          70
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          71
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          72
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          73
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 2 values pushed */
        0 3
        CINDEX[ ]	/* CopyXToTopStack */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 2 values pushed */
          1 3
          CINDEX[ ]	/* CopyXToTopStack */
          EQ[ ]	/* Equal */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            5
            RS[ ]	/* ReadStore */
            MAX[ ]	/* Maximum */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          79
          CALL[ ]	/* CallFunction */
        EIF[ ]	/* EndIf */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        98
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        POP[ ]	/* PopTopStack */
        SWAP[ ]	/* SwapTopStack */
        IF[ ]	/* If */
          NEG[ ]	/* Negate */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        8 0
        GPV[ ]	/* GetPVector */
        POP[ ]	/* PopTopStack */
        EQ[ ]	/* Equal */
        ADD[ ]	/* Add */
        RS[ ]	/* ReadStore */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        12 0
        GPV[ ]	/* GetPVector */
        POP[ ]	/* PopTopStack */
        EQ[ ]	/* Equal */
        ADD[ ]	/* Add */
        RS[ ]	/* ReadStore */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        DUP[ ]	/* DuplicateTopStack */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        DUP[ ]	/* DuplicateTopStack */
        PUSHW[ ]	/* 1 value pushed */
        4096
        DIV[ ]	/* Divide */
        PUSHW[ ]	/* 1 value pushed */
        4096
        MUL[ ]	/* Multiply */
        EVEN[ ]	/* Even */
        SWAP[ ]	/* SwapTopStack */
        PUSHW[ ]	/* 1 value pushed */
        256
        DIV[ ]	/* Divide */
        PUSHW[ ]	/* 1 value pushed */
        4096
        MUL[ ]	/* Multiply */
        EVEN[ ]	/* Even */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          32
          ADD[ ]	/* Add */
          FLOOR[ ]	/* Floor */
        EIF[ ]	/* EndIf */
        SCFS[ ]	/* SetCoordFromStackFP */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GTEQ[ ]	/* GreaterThanOrEqual */
        PUSHW[ ]	/* 1 value pushed */
        53
        SWAP[ ]	/* SwapTopStack */
        JROT[ ]	/* JumpRelativeOnTrue */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        32
        MUL[ ]	/* Multiply */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        DIV[ ]	/* Divide */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          ROLL[ ]	/* RollTopThreeStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          ADD[ ]	/* Add */
          SWAP[ ]	/* SwapTopStack */
        ELSE[ ]	/* Else */
          DUP[ ]	/* DuplicateTopStack */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          6
          CINDEX[ ]	/* CopyXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          DIV[ ]	/* Divide */
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            SWAP[ ]	/* SwapTopStack */
            POP[ ]	/* PopTopStack */
            PUSHB[ ]	/* 1 value pushed */
            1
            SUB[ ]	/* Subtract */
          ELSE[ ]	/* Else */
            ROLL[ ]	/* RollTopThreeStack */
            POP[ ]	/* PopTopStack */
            SWAP[ ]	/* SwapTopStack */
            POP[ ]	/* PopTopStack */
            DUP[ ]	/* DuplicateTopStack */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        PUSHW[ ]	/* 1 value pushed */
        -63
        JMPR[ ]	/* Jump */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        32
        MUL[ ]	/* Multiply */
        SWAP[ ]	/* SwapTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        2 0
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        35 1
        GETINFO[ ]	/* GetInfo */
        LTEQ[ ]	/* LessThenOrEqual */
        PUSHB[ ]	/* 2 values pushed */
        64 1
        GETINFO[ ]	/* GetInfo */
        GTEQ[ ]	/* GreaterThanOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          PUSHW[ ]	/* 2 values pushed */
          4096 32
          GETINFO[ ]	/* GetInfo */
          EQ[ ]	/* Equal */
          IF[ ]	/* If */
            PUSHB[ ]	/* 3 values pushed */
            2 1 2
            RS[ ]	/* ReadStore */
            ADD[ ]	/* Add */
            WS[ ]	/* WriteStore */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 2 values pushed */
          36 1
          GETINFO[ ]	/* GetInfo */
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            PUSHW[ ]	/* 2 values pushed */
            8192 64
            GETINFO[ ]	/* GetInfo */
            EQ[ ]	/* Equal */
            IF[ ]	/* If */
              PUSHB[ ]	/* 3 values pushed */
              2 2 2
              RS[ ]	/* ReadStore */
              ADD[ ]	/* Add */
              WS[ ]	/* WriteStore */
              PUSHB[ ]	/* 2 values pushed */
              36 1
              GETINFO[ ]	/* GetInfo */
              EQ[ ]	/* Equal */
              IF[ ]	/* If */
                PUSHB[ ]	/* 3 values pushed */
                2 32 2
                RS[ ]	/* ReadStore */
                ADD[ ]	/* Add */
                WS[ ]	/* WriteStore */
                SVTCA[0]	/* SetFPVectorToAxis */
                MPPEM[ ]	/* MeasurePixelPerEm */
                SVTCA[1]	/* SetFPVectorToAxis */
                MPPEM[ ]	/* MeasurePixelPerEm */
                GT[ ]	/* GreaterThan */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 8 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
              ELSE[ ]	/* Else */
                PUSHW[ ]	/* 2 values pushed */
                16384 128
                GETINFO[ ]	/* GetInfo */
                EQ[ ]	/* Equal */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 4 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
                PUSHW[ ]	/* 2 values pushed */
                16384 128
                MUL[ ]	/* Multiply */
                PUSHW[ ]	/* 1 value pushed */
                256
                GETINFO[ ]	/* GetInfo */
                EQ[ ]	/* Equal */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 8 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
                PUSHW[ ]	/* 2 values pushed */
                16384 256
                MUL[ ]	/* Multiply */
                PUSHW[ ]	/* 1 value pushed */
                512
                GETINFO[ ]	/* GetInfo */
                EQ[ ]	/* Equal */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 16 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
                PUSHB[ ]	/* 2 values pushed */
                38 1
                GETINFO[ ]	/* GetInfo */
                LTEQ[ ]	/* LessThenOrEqual */
                IF[ ]	/* If */
                  PUSHW[ ]	/* 2 values pushed */
                  16384 512
                  MUL[ ]	/* Multiply */
                  PUSHW[ ]	/* 1 value pushed */
                  1024
                  GETINFO[ ]	/* GetInfo */
                  EQ[ ]	/* Equal */
                  IF[ ]	/* If */
                    PUSHB[ ]	/* 3 values pushed */
                    2 64 2
                    RS[ ]	/* ReadStore */
                    ADD[ ]	/* Add */
                    WS[ ]	/* WriteStore */
                  EIF[ ]	/* EndIf */
                  PUSHW[ ]	/* 2 values pushed */
                  16384 1024
                  MUL[ ]	/* Multiply */
                  PUSHW[ ]	/* 1 value pushed */
                  2048
                  GETINFO[ ]	/* GetInfo */
                  EQ[ ]	/* Equal */
                  IF[ ]	/* If */
                    PUSHB[ ]	/* 3 values pushed */
                    2 128 2
                    RS[ ]	/* ReadStore */
                    ADD[ ]	/* Add */
                    WS[ ]	/* WriteStore */
                  EIF[ ]	/* EndIf */
                  PUSHB[ ]	/* 2 values pushed */
                  40 1
                  GETINFO[ ]	/* GetInfo */
                  LTEQ[ ]	/* LessThenOrEqual */
                  IF[ ]	/* If */
                    PUSHW[ ]	/* 2 values pushed */
                    16384 2048
                    MUL[ ]	/* Multiply */
                    PUSHW[ ]	/* 1 value pushed */
                    4096
                    GETINFO[ ]	/* GetInfo */
                    EQ[ ]	/* Equal */
                    IF[ ]	/* If */
                      PUSHW[ ]	/* 3 values pushed */
                      2 256 2
                      RS[ ]	/* ReadStore */
                      ADD[ ]	/* Add */
                      WS[ ]	/* WriteStore */
                    EIF[ ]	/* EndIf */
                  EIF[ ]	/* EndIf */
                EIF[ ]	/* EndIf */
              EIF[ ]	/* EndIf */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          NPUSHB[ ]	/* 10 values pushed */
          5 64 8 64 9 64 12 2 13 2
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 2 values pushed */
          1 2
          RS[ ]	/* ReadStore */
          EQ[ ]	/* Equal */
          IF[ ]	/* If */
            PUSHB[ ]	/* 3 values pushed */
            5 64 8
            PUSHW[ ]	/* 3 values pushed */
            256 9 256
            PUSHB[ ]	/* 4 values pushed */
            12 1 13 1
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 2 values pushed */
            128 2
            RS[ ]	/* ReadStore */
            GT[ ]	/* GreaterThan */
            IF[ ]	/* If */
              PUSHB[ ]	/* 3 values pushed */
              5 64 8
              PUSHW[ ]	/* 1 value pushed */
              384
              PUSHB[ ]	/* 2 values pushed */
              9 64
            ELSE[ ]	/* Else */
              PUSHW[ ]	/* 2 values pushed */
              256 2
              RS[ ]	/* ReadStore */
              GT[ ]	/* GreaterThan */
              IF[ ]	/* If */
                PUSHB[ ]	/* 3 values pushed */
                5 64 8
                PUSHW[ ]	/* 3 values pushed */
                384 9 320
              ELSE[ ]	/* Else */
                PUSHW[ ]	/* 2 values pushed */
                384 2
                RS[ ]	/* ReadStore */
                GT[ ]	/* GreaterThan */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  5 64 8
                  PUSHW[ ]	/* 1 value pushed */
                  512
                  PUSHB[ ]	/* 2 values pushed */
                  9 64
                ELSE[ ]	/* Else */
                  PUSHB[ ]	/* 3 values pushed */
                  5 64 8
                  PUSHW[ ]	/* 3 values pushed */
                  256 9 256
                EIF[ ]	/* EndIf */
              EIF[ ]	/* EndIf */
            EIF[ ]	/* EndIf */
            PUSHW[ ]	/* 2 values pushed */
            16384 128
            GETINFO[ ]	/* GetInfo */
            NEQ[ ]	/* NotEqual */
            PUSHW[ ]	/* 2 values pushed */
            16384 512
            MUL[ ]	/* Multiply */
            PUSHW[ ]	/* 1 value pushed */
            1024
            GETINFO[ ]	/* GetInfo */
            NEQ[ ]	/* NotEqual */
            AND[ ]	/* LogicalAnd */
            IF[ ]	/* If */
              PUSHB[ ]	/* 4 values pushed */
              12 0 13 1
            ELSE[ ]	/* Else */
              PUSHB[ ]	/* 4 values pushed */
              12 0 13 1
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 2 values pushed */
        2 78
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        79
        CALL[ ]	/* CallFunction */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        64
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            2
            CINDEX[ ]	/* CopyXToTopStack */
            RCVT[ ]	/* ReadCVT */
            PUSHB[ ]	/* 2 values pushed */
            1 78
            CALL[ ]	/* CallFunction */
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          SWAP[ ]	/* SwapTopStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            RCVT[ ]	/* ReadCVT */
            DUP[ ]	/* DuplicateTopStack */
            ABS[ ]	/* Absolute */
            ROLL[ ]	/* RollTopThreeStack */
            MUL[ ]	/* Multiply */
            PUSHB[ ]	/* 1 value pushed */
            64
            GTEQ[ ]	/* GreaterThanOrEqual */
            IF[ ]	/* If */
              PUSHB[ ]	/* 2 values pushed */
              2 78
              CALL[ ]	/* CallFunction */
              ADD[ ]	/* Add */
            ELSE[ ]	/* Else */
              POP[ ]	/* PopTopStack */
            EIF[ ]	/* EndIf */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        DUP[ ]	/* DuplicateTopStack */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          NEG[ ]	/* Negate */
        ELSE[ ]	/* Else */
          SWAP[ ]	/* SwapTopStack */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 2 values pushed */
        20 20
        ROLL[ ]	/* RollTopThreeStack */
        WCVTF[ ]	/* WriteCVTInFUnits */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        79
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 2 values pushed */
        97 6
        MINDEX[ ]	/* MoveXToTopStack */
        ADD[ ]	/* Add */
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          5
          RS[ ]	/* ReadStore */
          MAX[ ]	/* Maximum */
        EIF[ ]	/* EndIf */
        SWAP[ ]	/* SwapTopStack */
        IF[ ]	/* If */
          NEG[ ]	/* Negate */
        EIF[ ]	/* EndIf */
        SWAP[ ]	/* SwapTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MD[0]	/* MeasureDistance */
        MUL[ ]	/* Multiply */
        SWAP[ ]	/* SwapTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        79
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        MD[0]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MUL[ ]	/* Multiply */
        ODD[ ]	/* Odd */
        DUP[ ]	/* DuplicateTopStack */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        98
        ADD[ ]	/* Add */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        GC[0]	/* GetCoordOnPVector */
        ROLL[ ]	/* RollTopThreeStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        32
        MUL[ ]	/* Multiply */
        SUB[ ]	/* Subtract */
        MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 2 values pushed */
        2 3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 2 values pushed */
        1 4
        CINDEX[ ]	/* CopyXToTopStack */
        SVTCA[1]	/* SetFPVectorToAxis */
        MIAP[0]	/* MoveIndirectAbsPt */
        SVTCA[0]	/* SetFPVectorToAxis */
        MIAP[0]	/* MoveIndirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        1 2
        SPVTL[0]	/* SetPVectorToLine */
        GPV[ ]	/* GetPVector */
        PUSHB[ ]	/* 1 value pushed */
        10
        SWAP[ ]	/* SwapTopStack */
        NEG[ ]	/* Negate */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        11
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        2 3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 2 values pushed */
        1 4
        CINDEX[ ]	/* CopyXToTopStack */
        SVTCA[1]	/* SetFPVectorToAxis */
        MIAP[1]	/* MoveIndirectAbsPt */
        SVTCA[0]	/* SetFPVectorToAxis */
        MIAP[1]	/* MoveIndirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        1 2
        SPVTL[0]	/* SetPVectorToLine */
        GPV[ ]	/* GetPVector */
        PUSHB[ ]	/* 1 value pushed */
        6
        SWAP[ ]	/* SwapTopStack */
        NEG[ ]	/* Negate */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        7
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          SWAP[ ]	/* SwapTopStack */
          RCVT[ ]	/* ReadCVT */
          DUP[ ]	/* DuplicateTopStack */
          RTG[ ]	/* RoundToGrid */
          ROUND[01]	/* Round */
          ROLL[ ]	/* RollTopThreeStack */
          MUL[ ]	/* Multiply */
          SWAP[ ]	/* SwapTopStack */
          DIV[ ]	/* Divide */
          DUP[ ]	/* DuplicateTopStack */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            CEILING[ ]	/* Ceiling */
          ELSE[ ]	/* Else */
            FLOOR[ ]	/* Floor */
          EIF[ ]	/* EndIf */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          32
          MUL[ ]	/* Multiply */
          PUSHB[ ]	/* 1 value pushed */
          64
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          4
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 2 values pushed */
          4 0
          WS[ ]	/* WriteStore */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        RTG[ ]	/* RoundToGrid */
        SVTCA[1]	/* SetFPVectorToAxis */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 2 values pushed */
        0 78
        CALL[ ]	/* CallFunction */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        PUSHB[ ]	/* 2 values pushed */
        64 79
        CALL[ ]	/* CallFunction */
        LT[ ]	/* LessThan */
        OR[ ]	/* LogicalOr */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 2 values pushed */
          1 78
          CALL[ ]	/* CallFunction */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 2 values pushed */
          64 4
          MINDEX[ ]	/* MoveXToTopStack */
          SUB[ ]	/* Subtract */
          MUL[ ]	/* Multiply */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 2 values pushed */
          1 78
          CALL[ ]	/* CallFunction */
          WCVTP[ ]	/* WriteCVTInPixels */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 2 values pushed */
          1 78
          CALL[ ]	/* CallFunction */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          WCVTP[ ]	/* WriteCVTInPixels */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        PUSHB[ ]	/* 2 values pushed */
        64 79
        CALL[ ]	/* CallFunction */
        LT[ ]	/* LessThan */
        OR[ ]	/* LogicalOr */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          PUSHB[ ]	/* 1 value pushed */
          64
          SUB[ ]	/* Subtract */
          MUL[ ]	/* Multiply */
          ADD[ ]	/* Add */
        ELSE[ ]	/* Else */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          RCVT[ ]	/* ReadCVT */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 2 values pushed */
        1 78
        CALL[ ]	/* CallFunction */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        RCVT[ ]	/* ReadCVT */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        RCVT[ ]	/* ReadCVT */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        64
        LTEQ[ ]	/* LessThenOrEqual */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        GTEQ[ ]	/* GreaterThanOrEqual */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        64
        LTEQ[ ]	/* LessThenOrEqual */
        AND[ ]	/* LogicalAnd */
        AND[ ]	/* LogicalAnd */
        PUSHB[ ]	/* 2 values pushed */
        64 79
        CALL[ ]	/* CallFunction */
        EQ[ ]	/* Equal */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          ROLL[ ]	/* RollTopThreeStack */
          GPV[ ]	/* GetPVector */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          GTEQ[ ]	/* GreaterThanOrEqual */
          IF[ ]	/* If */
            PUSHB[ ]	/* 2 values pushed */
            64 64
            ROLL[ ]	/* RollTopThreeStack */
            SUB[ ]	/* Subtract */
            DUP[ ]	/* DuplicateTopStack */
            MUL[ ]	/* Multiply */
            SUB[ ]	/* Subtract */
          ELSE[ ]	/* Else */
            DUP[ ]	/* DuplicateTopStack */
            MUL[ ]	/* Multiply */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          ROLL[ ]	/* RollTopThreeStack */
        EIF[ ]	/* EndIf */
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 2 values pushed */
        2 78
        CALL[ ]	/* CallFunction */
        ADD[ ]	/* Add */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SFVTCA[1]	/* SetFVectorToAxis */
        PUSHB[ ]	/* 2 values pushed */
        11 10
        RS[ ]	/* ReadStore */
        SWAP[ ]	/* SwapTopStack */
        RS[ ]	/* ReadStore */
        NEG[ ]	/* Negate */
        SPVFS[ ]	/* SetPVectorFromStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        10 11
        RS[ ]	/* ReadStore */
        SWAP[ ]	/* SwapTopStack */
        RS[ ]	/* ReadStore */
        SFVFS[ ]	/* SetFVectorFromStack */
        SPVTCA[0]	/* SetPVectorToAxis */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        MUL[ ]	/* Multiply */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHW[ ]	/* 1 value pushed */
        8192
        DIV[ ]	/* Divide */
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        DIV[ ]	/* Divide */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 1 value pushed */
        32
        ADD[ ]	/* Add */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHW[ ]	/* 1 value pushed */
        8192
        DIV[ ]	/* Divide */
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        DIV[ ]	/* Divide */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        MUL[ ]	/* Multiply */
        CEILING[ ]	/* Ceiling */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHW[ ]	/* 1 value pushed */
        8192
        DIV[ ]	/* Divide */
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        DIV[ ]	/* Divide */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        MUL[ ]	/* Multiply */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        32
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHW[ ]	/* 1 value pushed */
        8192
        DIV[ ]	/* Divide */
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        DIV[ ]	/* Divide */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 2 values pushed */
        2 78
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 2 values pushed */
        1 78
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        MD[1]	/* MeasureDistance */
        SWAP[ ]	/* SwapTopStack */
        RCVT[ ]	/* ReadCVT */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        3
        RS[ ]	/* ReadStore */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          DUP[ ]	/* DuplicateTopStack */
          ABS[ ]	/* Absolute */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 2 values pushed */
        2 78
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          NEG[ ]	/* Negate */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        MD[1]	/* MeasureDistance */
        SWAP[ ]	/* SwapTopStack */
        RCVT[ ]	/* ReadCVT */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        3
        RS[ ]	/* ReadStore */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          DUP[ ]	/* DuplicateTopStack */
          ABS[ ]	/* Absolute */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 2 values pushed */
        1 78
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          NEG[ ]	/* Negate */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 2 values pushed */
        2 78
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        SRP0[ ]	/* SetRefPoint0 */
        MSIRP[1]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 2 values pushed */
        1 78
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        SRP0[ ]	/* SetRefPoint0 */
        MSIRP[1]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        103
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        SRP0[ ]	/* SetRefPoint0 */
        MSIRP[1]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        104
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        SRP0[ ]	/* SetRefPoint0 */
        MSIRP[1]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          106
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          108
        EIF[ ]	/* EndIf */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        128
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SWAP[ ]	/* SwapTopStack */
        MSIRP[0]	/* MoveStackIndirRelPt */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SWAP[ ]	/* SwapTopStack */
        MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[1]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        128
        MUL[ ]	/* Multiply */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        MD[0]	/* MeasureDistance */
        MUL[ ]	/* Multiply */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        128
        MUL[ ]	/* Multiply */
        DUP[ ]	/* DuplicateTopStack */
        IF[ ]	/* If */
          DIV[ ]	/* Divide */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        ROLL[ ]	/* RollTopThreeStack */
        GC[0]	/* GetCoordOnPVector */
        ROLL[ ]	/* RollTopThreeStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        32
        MUL[ ]	/* Multiply */
        SUB[ ]	/* Subtract */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        110
        CALL[ ]	/* CallFunction */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SWAP[ ]	/* SwapTopStack */
        MSIRP[0]	/* MoveStackIndirRelPt */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SWAP[ ]	/* SwapTopStack */
        MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 2 values pushed */
          2 78
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          128
          LT[ ]	/* LessThan */
          DUP[ ]	/* DuplicateTopStack */
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        ADD[ ]	/* Add */
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          5
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            DUP[ ]	/* DuplicateTopStack */
            FLOOR[ ]	/* Floor */
            SUB[ ]	/* Subtract */
            PUSHB[ ]	/* 1 value pushed */
            64
            SWAP[ ]	/* SwapTopStack */
            SUB[ ]	/* Subtract */
            PUSHB[ ]	/* 2 values pushed */
            0 3
            CINDEX[ ]	/* CopyXToTopStack */
            LT[ ]	/* LessThan */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            LT[ ]	/* LessThan */
            AND[ ]	/* LogicalAnd */
            IF[ ]	/* If */
              DUP[ ]	/* DuplicateTopStack */
              PUSHB[ ]	/* 1 value pushed */
              3
              CINDEX[ ]	/* CopyXToTopStack */
              SUB[ ]	/* Subtract */
              ROLL[ ]	/* RollTopThreeStack */
              GTEQ[ ]	/* GreaterThanOrEqual */
              IF[ ]	/* If */
                POP[ ]	/* PopTopStack */
                PUSHB[ ]	/* 1 value pushed */
                0
              EIF[ ]	/* EndIf */
            ELSE[ ]	/* Else */
              POP[ ]	/* PopTopStack */
            EIF[ ]	/* EndIf */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            7
            EQ[ ]	/* Equal */
            IF[ ]	/* If */
              DUP[ ]	/* DuplicateTopStack */
              FLOOR[ ]	/* Floor */
              SUB[ ]	/* Subtract */
              NEG[ ]	/* Negate */
              SWAP[ ]	/* SwapTopStack */
              POP[ ]	/* PopTopStack */
            ELSE[ ]	/* Else */
              POP[ ]	/* PopTopStack */
              POP[ ]	/* PopTopStack */
              PUSHB[ ]	/* 1 value pushed */
              0
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 2 values pushed */
        2 78
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        0
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          0
        ELSE[ ]	/* Else */
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          PUSHB[ ]	/* 1 value pushed */
          1
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        FLOOR[ ]	/* Floor */
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        MD[0]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        112
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        NEG[ ]	/* Negate */
        PUSHB[ ]	/* 1 value pushed */
        32
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        FLOOR[ ]	/* Floor */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        32
        SUB[ ]	/* Subtract */
        NEG[ ]	/* Negate */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 2 values pushed */
          2 78
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          RCVT[ ]	/* ReadCVT */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        SUB[ ]	/* Subtract */
        NEG[ ]	/* Negate */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        MSIRP[1]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHW[ ]	/* 1 value pushed */
        512
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHW[ ]	/* 1 value pushed */
        512
        MUL[ ]	/* Multiply */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        93
        ADD[ ]	/* Add */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        SRP1[ ]	/* SetRefPoint1 */
        ROLL[ ]	/* RollTopThreeStack */
        SRP2[ ]	/* SetRefPoint2 */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        IP[ ]	/* InterpolatePts */
        ROLL[ ]	/* RollTopThreeStack */
        IF[ ]	/* If */
          PUSHW[ ]	/* 3 values pushed */
          93 4096 4
          MINDEX[ ]	/* MoveXToTopStack */
          MUL[ ]	/* Multiply */
          ODD[ ]	/* Odd */
          ADD[ ]	/* Add */
          CALL[ ]	/* CallFunction */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          DUP[ ]	/* DuplicateTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          DUP[ ]	/* DuplicateTopStack */
          GC[0]	/* GetCoordOnPVector */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 2 values pushed */
          2 78
          CALL[ ]	/* CallFunction */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
        ELSE[ ]	/* Else */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          DUP[ ]	/* DuplicateTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          MD[0]	/* MeasureDistance */
          PUSHB[ ]	/* 2 values pushed */
          2 78
          CALL[ ]	/* CallFunction */
        EIF[ ]	/* EndIf */
        MSIRP[1]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHW[ ]	/* 3 values pushed */
        93 4096 9
        CINDEX[ ]	/* CopyXToTopStack */
        MUL[ ]	/* Multiply */
        ODD[ ]	/* Odd */
        ADD[ ]	/* Add */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        109
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 2 values pushed */
        93 7
        CINDEX[ ]	/* CopyXToTopStack */
        ADD[ ]	/* Add */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        111
        CALL[ ]	/* CallFunction */
        PUSHW[ ]	/* 3 values pushed */
        93 4096 8
        MINDEX[ ]	/* MoveXToTopStack */
        MUL[ ]	/* Multiply */
        ODD[ ]	/* Odd */
        ADD[ ]	/* Add */
        CALL[ ]	/* CallFunction */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          80
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          7
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          7
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          113
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          2
          SLOOP[ ]	/* SetLoopVariable */
          SHPIX[ ]	/* ShiftZoneByPixel */
          PUSHB[ ]	/* 1 value pushed */
          0
          GT[ ]	/* GreaterThan */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          GT[ ]	/* GreaterThan */
          AND[ ]	/* LogicalAnd */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            4
            CINDEX[ ]	/* CopyXToTopStack */
            PUSHB[ ]	/* 1 value pushed */
            6
            CINDEX[ ]	/* CopyXToTopStack */
            MD[0]	/* MeasureDistance */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            PUSHB[ ]	/* 1 value pushed */
            5
            CINDEX[ ]	/* CopyXToTopStack */
            MD[0]	/* MeasureDistance */
            ADD[ ]	/* Add */
            DUP[ ]	/* DuplicateTopStack */
            PUSHB[ ]	/* 1 value pushed */
            64
            GT[ ]	/* GreaterThan */
            IF[ ]	/* If */
              POP[ ]	/* PopTopStack */
            ELSE[ ]	/* Else */
              PUSHB[ ]	/* 1 value pushed */
              0
              GT[ ]	/* GreaterThan */
              IF[ ]	/* If */
                DUP[ ]	/* DuplicateTopStack */
                PUSHB[ ]	/* 1 value pushed */
                2
                EQ[ ]	/* Equal */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 1 value pushed */
                  4
                  CINDEX[ ]	/* CopyXToTopStack */
                  PUSHB[ ]	/* 1 value pushed */
                  4
                  CINDEX[ ]	/* CopyXToTopStack */
                  PUSHB[ ]	/* 1 value pushed */
                  7
                  CINDEX[ ]	/* CopyXToTopStack */
                  PUSHB[ ]	/* 1 value pushed */
                  7
                  CINDEX[ ]	/* CopyXToTopStack */
                  MD[0]	/* MeasureDistance */
                  PUSHB[ ]	/* 1 value pushed */
                  2
                  SLOOP[ ]	/* SetLoopVariable */
                  SHPIX[ ]	/* ShiftZoneByPixel */
                ELSE[ ]	/* Else */
                  PUSHB[ ]	/* 1 value pushed */
                  4
                  CINDEX[ ]	/* CopyXToTopStack */
                  PUSHB[ ]	/* 1 value pushed */
                  4
                  CINDEX[ ]	/* CopyXToTopStack */
                  PUSHB[ ]	/* 1 value pushed */
                  4
                  CINDEX[ ]	/* CopyXToTopStack */
                  PUSHB[ ]	/* 1 value pushed */
                  6
                  CINDEX[ ]	/* CopyXToTopStack */
                  MD[0]	/* MeasureDistance */
                  PUSHB[ ]	/* 1 value pushed */
                  2
                  SLOOP[ ]	/* SetLoopVariable */
                  SHPIX[ ]	/* ShiftZoneByPixel */
                EIF[ ]	/* EndIf */
              EIF[ ]	/* EndIf */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHW[ ]	/* 3 values pushed */
        93 4096 11
        CINDEX[ ]	/* CopyXToTopStack */
        MUL[ ]	/* Multiply */
        ODD[ ]	/* Odd */
        ADD[ ]	/* Add */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        12
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        12
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        9
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        110
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        4
        SLOOP[ ]	/* SetLoopVariable */
        SHPIX[ ]	/* ShiftZoneByPixel */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        109
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        109
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        80
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        113
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        SLOOP[ ]	/* SetLoopVariable */
        SHPIX[ ]	/* ShiftZoneByPixel */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        113
        CALL[ ]	/* CallFunction */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        NEG[ ]	/* Negate */
        PUSHB[ ]	/* 1 value pushed */
        2
        SLOOP[ ]	/* SetLoopVariable */
        SHPIX[ ]	/* ShiftZoneByPixel */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        64
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
          SUB[ ]	/* Subtract */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
          SUB[ ]	/* Subtract */
          SWAP[ ]	/* SwapTopStack */
        ELSE[ ]	/* Else */
          PUSHW[ ]	/* 1 value pushed */
          -64
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
            SWAP[ ]	/* SwapTopStack */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
            SWAP[ ]	/* SwapTopStack */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        SLOOP[ ]	/* SetLoopVariable */
        SHPIX[ ]	/* ShiftZoneByPixel */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        SLOOP[ ]	/* SetLoopVariable */
        SHPIX[ ]	/* ShiftZoneByPixel */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          6
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          8
          CINDEX[ ]	/* CopyXToTopStack */
          MD[0]	/* MeasureDistance */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          MD[0]	/* MeasureDistance */
          ADD[ ]	/* Add */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            0
            GT[ ]	/* GreaterThan */
            IF[ ]	/* If */
              PUSHB[ ]	/* 1 value pushed */
              6
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              6
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              6
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              6
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              11
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              11
              CINDEX[ ]	/* CopyXToTopStack */
              MD[0]	/* MeasureDistance */
              PUSHB[ ]	/* 1 value pushed */
              4
              SLOOP[ ]	/* SetLoopVariable */
              SHPIX[ ]	/* ShiftZoneByPixel */
              PUSHB[ ]	/* 1 value pushed */
              6
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              6
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              6
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              6
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              10
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              10
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              7
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              113
              CALL[ ]	/* CallFunction */
              PUSHB[ ]	/* 1 value pushed */
              4
              SLOOP[ ]	/* SetLoopVariable */
              SHPIX[ ]	/* ShiftZoneByPixel */
              PUSHB[ ]	/* 1 value pushed */
              4
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              4
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              5
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              7
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              5
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              113
              CALL[ ]	/* CallFunction */
              PUSHB[ ]	/* 1 value pushed */
              2
              SLOOP[ ]	/* SetLoopVariable */
              SHPIX[ ]	/* ShiftZoneByPixel */
            ELSE[ ]	/* Else */
              PUSHB[ ]	/* 1 value pushed */
              4
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              4
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHW[ ]	/* 2 values pushed */
              -64 2
              SLOOP[ ]	/* SetLoopVariable */
              SHPIX[ ]	/* ShiftZoneByPixel */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        SDPVTL[1]	/* SetDualPVectorToLine */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          101
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          104
        EIF[ ]	/* EndIf */
        CALL[ ]	/* CallFunction */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        SPVTL[0]	/* SetPVectorToLine */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        MD[0]	/* MeasureDistance */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MUL[ ]	/* Multiply */
        LTEQ[ ]	/* LessThenOrEqual */
        PUSHB[ ]	/* 2 values pushed */
        0 3
        CINDEX[ ]	/* CopyXToTopStack */
        EQ[ ]	/* Equal */
        OR[ ]	/* LogicalOr */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          SPVTL[1]	/* SetPVectorToLine */
        ELSE[ ]	/* Else */
          DUP[ ]	/* DuplicateTopStack */
          MUL[ ]	/* Multiply */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          DUP[ ]	/* DuplicateTopStack */
          MUL[ ]	/* Multiply */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          83
          CALL[ ]	/* CallFunction */
          ROLL[ ]	/* RollTopThreeStack */
          MUL[ ]	/* Multiply */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          SDPVTL[1]	/* SetDualPVectorToLine */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          MINDEX[ ]	/* MoveXToTopStack */
          MD[1]	/* MeasureDistance */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            NEG[ ]	/* Negate */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          4
          MINDEX[ ]	/* MoveXToTopStack */
          DUP[ ]	/* DuplicateTopStack */
          SVTCA[1]	/* SetFPVectorToAxis */
          GC[0]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          SVTCA[0]	/* SetFPVectorToAxis */
          GC[0]	/* GetCoordOnPVector */
          PUSHB[ ]	/* 1 value pushed */
          5
          MINDEX[ ]	/* MoveXToTopStack */
          DUP[ ]	/* DuplicateTopStack */
          SVTCA[1]	/* SetFPVectorToAxis */
          GC[0]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          SVTCA[0]	/* SetFPVectorToAxis */
          GC[0]	/* GetCoordOnPVector */
          PUSHB[ ]	/* 1 value pushed */
          0
          SZPS[ ]	/* SetZonePointerS */
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHB[ ]	/* 1 value pushed */
          0
          SWAP[ ]	/* SwapTopStack */
          SCFS[ ]	/* SetCoordFromStackFP */
          SVTCA[1]	/* SetFPVectorToAxis */
          PUSHB[ ]	/* 1 value pushed */
          0
          SWAP[ ]	/* SwapTopStack */
          SCFS[ ]	/* SetCoordFromStackFP */
          SVTCA[0]	/* SetFPVectorToAxis */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          SWAP[ ]	/* SwapTopStack */
          SCFS[ ]	/* SetCoordFromStackFP */
          PUSHB[ ]	/* 1 value pushed */
          2
          SWAP[ ]	/* SwapTopStack */
          SCFS[ ]	/* SetCoordFromStackFP */
          SVTCA[1]	/* SetFPVectorToAxis */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          SWAP[ ]	/* SwapTopStack */
          SCFS[ ]	/* SetCoordFromStackFP */
          PUSHB[ ]	/* 1 value pushed */
          2
          SWAP[ ]	/* SwapTopStack */
          SCFS[ ]	/* SetCoordFromStackFP */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 3 values pushed */
          2 0 1
          SFVTL[0]	/* SetFVectorToLine */
          SWAP[ ]	/* SwapTopStack */
          SHPIX[ ]	/* ShiftZoneByPixel */
          PUSHB[ ]	/* 3 values pushed */
          2 0 1
          SFVTL[1]	/* SetFVectorToLine */
          SWAP[ ]	/* SwapTopStack */
          SHPIX[ ]	/* ShiftZoneByPixel */
          PUSHB[ ]	/* 2 values pushed */
          2 1
          SPVTL[1]	/* SetPVectorToLine */
          PUSHB[ ]	/* 1 value pushed */
          1
          SZPS[ ]	/* SetZonePointerS */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        GFV[ ]	/* GetFVector */
        GPV[ ]	/* GetPVector */
        ROLL[ ]	/* RollTopThreeStack */
        MUL[ ]	/* Multiply */
        SWAP[ ]	/* SwapTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        MUL[ ]	/* Multiply */
        ADD[ ]	/* Add */
        ABS[ ]	/* Absolute */
        PUSHW[ ]	/* 2 values pushed */
        16384 1024
        MUL[ ]	/* Multiply */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          0
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          ALIGNRP[ ]	/* AlignRelativePt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        9
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        9
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        118
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SFVTCA[1]	/* SetFVectorToAxis */
        ELSE[ ]	/* Else */
          SFVTCA[0]	/* SetFVectorToAxis */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        119
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        118
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        0
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SFVTCA[1]	/* SetFVectorToAxis */
        ELSE[ ]	/* Else */
          SFVTCA[0]	/* SetFVectorToAxis */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        119
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        8
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        118
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SFVTCA[1]	/* SetFVectorToAxis */
        ELSE[ ]	/* Else */
          SFVTCA[0]	/* SetFVectorToAxis */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        119
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        118
        CALL[ ]	/* CallFunction */
        SFVTL[0]	/* SetFVectorToLine */
        PUSHB[ ]	/* 1 value pushed */
        119
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        8
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        118
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        SFVTL[0]	/* SetFVectorToLine */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        119
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        118
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        0
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SFVTCA[1]	/* SetFVectorToAxis */
        ELSE[ ]	/* Else */
          SFVTCA[0]	/* SetFVectorToAxis */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        119
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        11
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        11
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        9
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        118
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        SFVTL[0]	/* SetFVectorToLine */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        119
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        118
        CALL[ ]	/* CallFunction */
        SFVTL[0]	/* SetFVectorToLine */
        PUSHB[ ]	/* 1 value pushed */
        119
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SPVTCA[1]	/* SetPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MD[1]	/* MeasureDistance */
        SPVTCA[0]	/* SetPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        MUL[ ]	/* Multiply */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        MUL[ ]	/* Multiply */
        SUB[ ]	/* Subtract */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        93 14
        CINDEX[ ]	/* CopyXToTopStack */
        ADD[ ]	/* Add */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        12
        MINDEX[ ]	/* MoveXToTopStack */
        SRP1[ ]	/* SetRefPoint1 */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        SRP2[ ]	/* SetRefPoint2 */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        IP[ ]	/* InterpolatePts */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        IP[ ]	/* InterpolatePts */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        9
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        124
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        PUSHB[ ]	/* 1 value pushed */
        11
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        124
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          7
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          11
          CINDEX[ ]	/* CopyXToTopStack */
          SDPVTL[1]	/* SetDualPVectorToLine */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SFVFS[ ]	/* SetFVectorFromStack */
          PUSHB[ ]	/* 1 value pushed */
          10
          CINDEX[ ]	/* CopyXToTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          9
          CINDEX[ ]	/* CopyXToTopStack */
          MDRP[00001]	/* MoveDirectRelPt */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          SFVFS[ ]	/* SetFVectorFromStack */
          PUSHB[ ]	/* 1 value pushed */
          7
          CINDEX[ ]	/* CopyXToTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          6
          CINDEX[ ]	/* CopyXToTopStack */
          MDRP[00001]	/* MoveDirectRelPt */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          7
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          11
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          11
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHW[ ]	/* 2 values pushed */
          -1 118
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SFVFS[ ]	/* SetFVectorFromStack */
          PUSHB[ ]	/* 1 value pushed */
          7
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          10
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          119
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          10
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          8
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          8
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHW[ ]	/* 2 values pushed */
          -1 118
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          SFVFS[ ]	/* SetFVectorFromStack */
          PUSHB[ ]	/* 1 value pushed */
          10
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          7
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          119
          CALL[ ]	/* CallFunction */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        SFVFS[ ]	/* SetFVectorFromStack */
        PUSHB[ ]	/* 1 value pushed */
        12
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        12
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        12
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          106
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          108
        EIF[ ]	/* EndIf */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        SFVFS[ ]	/* SetFVectorFromStack */
        PUSHB[ ]	/* 1 value pushed */
        9
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        9
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        9
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          106
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          108
        EIF[ ]	/* EndIf */
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        32
        MUL[ ]	/* Multiply */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        32
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 2 values pushed */
        1 12
        CINDEX[ ]	/* CopyXToTopStack */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SFVTCA[0]	/* SetFVectorToAxis */
        ELSE[ ]	/* Else */
          SFVTCA[1]	/* SetFVectorToAxis */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        10
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MSIRP[0]	/* MoveStackIndirRelPt */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        SFVFS[ ]	/* SetFVectorFromStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        ROLL[ ]	/* RollTopThreeStack */
        MSIRP[0]	/* MoveStackIndirRelPt */
        PUSHB[ ]	/* 2 values pushed */
        1 7
        MINDEX[ ]	/* MoveXToTopStack */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SFVTCA[0]	/* SetFVectorToAxis */
        ELSE[ ]	/* Else */
          SFVTCA[1]	/* SetFVectorToAxis */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        MSIRP[0]	/* MoveStackIndirRelPt */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        SFVFS[ ]	/* SetFVectorFromStack */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SWAP[ ]	/* SwapTopStack */
        MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHW[ ]	/* 2 values pushed */
          0 16384
        ELSE[ ]	/* Else */
          PUSHW[ ]	/* 2 values pushed */
          16384 0
        EIF[ ]	/* EndIf */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHW[ ]	/* 2 values pushed */
          0 16384
        ELSE[ ]	/* Else */
          PUSHW[ ]	/* 2 values pushed */
          16384 0
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        125
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        SFVTL[0]	/* SetFVectorToLine */
        GFV[ ]	/* GetFVector */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHW[ ]	/* 2 values pushed */
          0 16384
        ELSE[ ]	/* Else */
          PUSHW[ ]	/* 2 values pushed */
          16384 0
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        125
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SFVTL[0]	/* SetFVectorToLine */
        PUSHB[ ]	/* 1 value pushed */
        1
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHW[ ]	/* 2 values pushed */
          0 16384
        ELSE[ ]	/* Else */
          PUSHW[ ]	/* 2 values pushed */
          16384 0
        EIF[ ]	/* EndIf */
        GFV[ ]	/* GetFVector */
        PUSHB[ ]	/* 1 value pushed */
        125
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        SFVTL[0]	/* SetFVectorToLine */
        GFV[ ]	/* GetFVector */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        SFVTL[0]	/* SetFVectorToLine */
        GFV[ ]	/* GetFVector */
        PUSHB[ ]	/* 1 value pushed */
        125
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        SVTCA[1]	/* SetFPVectorToAxis */
        GC[0]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SVTCA[0]	/* SetFPVectorToAxis */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        10
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        11
        RS[ ]	/* ReadStore */
        ROLL[ ]	/* RollTopThreeStack */
        MUL[ ]	/* Multiply */
        SWAP[ ]	/* SwapTopStack */
        DIV[ ]	/* Divide */
        SUB[ ]	/* Subtract */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        9
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        RDTG[ ]	/* RoundDownToGrid */
        MDRP[00101]	/* MoveDirectRelPt */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          106
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          108
        EIF[ ]	/* EndIf */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          106
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          108
        EIF[ ]	/* EndIf */
        CALL[ ]	/* CallFunction */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        111
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          102
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          104
        EIF[ ]	/* EndIf */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          102
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          104
        EIF[ ]	/* EndIf */
        CALL[ ]	/* CallFunction */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          RDTG[ ]	/* RoundDownToGrid */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          MDRP[00101]	/* MoveDirectRelPt */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          1
          CINDEX[ ]	/* CopyXToTopStack */
          MDRP[00101]	/* MoveDirectRelPt */
          PUSHB[ ]	/* 1 value pushed */
          5
          MINDEX[ ]	/* MoveXToTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          5
          MINDEX[ ]	/* MoveXToTopStack */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          6
          MINDEX[ ]	/* MoveXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          8
          MINDEX[ ]	/* MoveXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          111
          CALL[ ]	/* CallFunction */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          RDTG[ ]	/* RoundDownToGrid */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          130
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          130
          CALL[ ]	/* CallFunction */
          DUP[ ]	/* DuplicateTopStack */
          DUP[ ]	/* DuplicateTopStack */
          ROUND[01]	/* Round */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          4
          RS[ ]	/* ReadStore */
          SVTCA[1]	/* SetFPVectorToAxis */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          96
          ADD[ ]	/* Add */
          DUP[ ]	/* DuplicateTopStack */
          ROUND[01]	/* Round */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          32
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          8
          MINDEX[ ]	/* MoveXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          8
          MINDEX[ ]	/* MoveXToTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          SLOOP[ ]	/* SetLoopVariable */
          SHPIX[ ]	/* ShiftZoneByPixel */
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          ROUND[01]	/* Round */
          SUB[ ]	/* Subtract */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          2
          SLOOP[ ]	/* SetLoopVariable */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        RTG[ ]	/* RoundToGrid */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GT[ ]	/* GreaterThan */
        PUSHB[ ]	/* 2 values pushed */
        1 2
        RS[ ]	/* ReadStore */
        GTEQ[ ]	/* GreaterThanOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          DUP[ ]	/* DuplicateTopStack */
          SVTCA[1]	/* SetFPVectorToAxis */
          ALIGNRP[ ]	/* AlignRelativePt */
          SVTCA[0]	/* SetFPVectorToAxis */
          ALIGNRP[ ]	/* AlignRelativePt */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          IF[ ]	/* If */
            ALIGNRP[ ]	/* AlignRelativePt */
          ELSE[ ]	/* Else */
            IP[ ]	/* InterpolatePts */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          1
          ADD[ ]	/* Add */
          PUSHW[ ]	/* 1 value pushed */
          -23
          JMPR[ ]	/* Jump */
        EIF[ ]	/* EndIf */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[1]	/* GetCoordOnPVector */
        EQ[ ]	/* Equal */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SRP1[ ]	/* SetRefPoint1 */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP2[ ]	/* SetRefPoint2 */
        PUSHB[ ]	/* 1 value pushed */
        1
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        133
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[1]	/* GetCoordOnPVector */
        EQ[ ]	/* Equal */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP2[ ]	/* SetRefPoint2 */
        PUSHB[ ]	/* 1 value pushed */
        1
        SUB[ ]	/* Subtract */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SRP1[ ]	/* SetRefPoint1 */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        133
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        133
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          GPV[ ]	/* GetPVector */
          SPVTCA[0]	/* SetPVectorToAxis */
          ROLL[ ]	/* RollTopThreeStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          GTEQ[ ]	/* GreaterThanOrEqual */
          PUSHB[ ]	/* 1 value pushed */
          4
          MINDEX[ ]	/* MoveXToTopStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          LTEQ[ ]	/* LessThenOrEqual */
          AND[ ]	/* LogicalAnd */
          IF[ ]	/* If */
            SPVFS[ ]	/* SetPVectorFromStack */
            SHPIX[ ]	/* ShiftZoneByPixel */
          ELSE[ ]	/* Else */
            SPVFS[ ]	/* SetPVectorFromStack */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        152
        CALL[ ]	/* CallFunction */
        IF[ ]	/* If */
          GPV[ ]	/* GetPVector */
          SPVTCA[0]	/* SetPVectorToAxis */
          ROLL[ ]	/* RollTopThreeStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          GTEQ[ ]	/* GreaterThanOrEqual */
          PUSHB[ ]	/* 1 value pushed */
          4
          MINDEX[ ]	/* MoveXToTopStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          LTEQ[ ]	/* LessThenOrEqual */
          AND[ ]	/* LogicalAnd */
          IF[ ]	/* If */
            SPVFS[ ]	/* SetPVectorFromStack */
            SHPIX[ ]	/* ShiftZoneByPixel */
          ELSE[ ]	/* Else */
            SPVFS[ ]	/* SetPVectorFromStack */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        PUSHB[ ]	/* 1 value pushed */
        1
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        95
        SWAP[ ]	/* SwapTopStack */
        JROT[ ]	/* JumpRelativeOnTrue */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        86
        SWAP[ ]	/* SwapTopStack */
        JROF[ ]	/* JumpRelativeOnFalse */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        32
        DUP[ ]	/* DuplicateTopStack */
        NOT[ ]	/* LogicalNot */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 2 values pushed */
          0 71
          JMPR[ ]	/* Jump */
        EIF[ ]	/* EndIf */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        PUSHW[ ]	/* 1 value pushed */
        4096
        MUL[ ]	/* Multiply */
        ODD[ ]	/* Odd */
        IF[ ]	/* If */
          PUSHW[ ]	/* 1 value pushed */
          4096
          MUL[ ]	/* Multiply */
          ODD[ ]	/* Odd */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
            PUSHB[ ]	/* 2 values pushed */
            1 44
            JMPR[ ]	/* Jump */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        128
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        NOT[ ]	/* LogicalNot */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 2 values pushed */
          0 27
          JMPR[ ]	/* Jump */
        EIF[ ]	/* EndIf */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        128
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        NOT[ ]	/* LogicalNot */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 2 values pushed */
          0 12
          JMPR[ ]	/* Jump */
        EIF[ ]	/* EndIf */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        SUB[ ]	/* Subtract */
        PUSHW[ ]	/* 1 value pushed */
        -77
        JMPR[ ]	/* Jump */
        SWAP[ ]	/* SwapTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        PUSHB[ ]	/* 1 value pushed */
        1
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        123
        SWAP[ ]	/* SwapTopStack */
        JROT[ ]	/* JumpRelativeOnTrue */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        114
        SWAP[ ]	/* SwapTopStack */
        JROF[ ]	/* JumpRelativeOnFalse */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RS[ ]	/* ReadStore */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        32
        DUP[ ]	/* DuplicateTopStack */
        NOT[ ]	/* LogicalNot */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          99
          JMPR[ ]	/* Jump */
        EIF[ ]	/* EndIf */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        PUSHW[ ]	/* 1 value pushed */
        4096
        MUL[ ]	/* Multiply */
        ODD[ ]	/* Odd */
        IF[ ]	/* If */
          PUSHW[ ]	/* 1 value pushed */
          4096
          MUL[ ]	/* Multiply */
          ODD[ ]	/* Odd */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            4
            MINDEX[ ]	/* MoveXToTopStack */
            PUSHB[ ]	/* 1 value pushed */
            1
            OR[ ]	/* LogicalOr */
            PUSHB[ ]	/* 1 value pushed */
            4
            MINDEX[ ]	/* MoveXToTopStack */
            PUSHB[ ]	/* 1 value pushed */
            4
            MINDEX[ ]	/* MoveXToTopStack */
            PUSHB[ ]	/* 1 value pushed */
            4
            MINDEX[ ]	/* MoveXToTopStack */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
            PUSHB[ ]	/* 2 values pushed */
            54 0
            SWAP[ ]	/* SwapTopStack */
            JMPR[ ]	/* Jump */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        128
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        NOT[ ]	/* LogicalNot */
        IF[ ]	/* If */
          ROLL[ ]	/* RollTopThreeStack */
          NOT[ ]	/* LogicalNot */
          ROLL[ ]	/* RollTopThreeStack */
          AND[ ]	/* LogicalAnd */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          29
          JMPR[ ]	/* Jump */
        EIF[ ]	/* EndIf */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        128
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        NOT[ ]	/* LogicalNot */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          14
          JMPR[ ]	/* Jump */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        SUB[ ]	/* Subtract */
        PUSHW[ ]	/* 1 value pushed */
        -104
        JMPR[ ]	/* Jump */
        SWAP[ ]	/* SwapTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
    </assembly>
  </fpgm>

  <prep>
    <assembly>
      NPUSHB[ ]	/* 141 values pushed */
      118 110 41 31 116 114 100 31 114 67 41 31 112 110 100 31 110 66 27 31 105 97 41 31 103
      101 100 31 101 67 41 31 99 97 100 31 97 66 27 31 89 81 41 31 87 85 100 31 85 67
      41 31 83 81 100 31 81 66 27 31 76 68 41 31 74 72 100 31 72 67 41 31 70 68 100
      31 68 66 27 31 67 65 17 31 66 65 17 31 18 89 16 89 13 50 12 85 5 50 4 85
      12 89 4 89 15 50 14 85 11 50 10 85 7 50 6 85 1 50 0 85 14 89 10 89 6
      89 0 89 9 50 8 85 3 50 2 85 8 89 2 89 3
      PUSHW[ ]	/* 6 values pushed */
      256 256 5 1 400 84
      CALL[ ]	/* CallFunction */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHW[ ]	/* 1 value pushed */
      2047
      GT[ ]	/* GreaterThan */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      9
      LT[ ]	/* LessThan */
      OR[ ]	/* LogicalOr */
      PUSHB[ ]	/* 1 value pushed */
      1
      GETINFO[ ]	/* GetInfo */
      PUSHB[ ]	/* 1 value pushed */
      37
      GTEQ[ ]	/* GreaterThanOrEqual */
      PUSHB[ ]	/* 1 value pushed */
      1
      GETINFO[ ]	/* GetInfo */
      PUSHB[ ]	/* 1 value pushed */
      64
      LTEQ[ ]	/* LessThenOrEqual */
      AND[ ]	/* LogicalAnd */
      PUSHB[ ]	/* 1 value pushed */
      6
      GETINFO[ ]	/* GetInfo */
      PUSHB[ ]	/* 1 value pushed */
      0
      NEQ[ ]	/* NotEqual */
      AND[ ]	/* LogicalAnd */
      OR[ ]	/* LogicalOr */
      IF[ ]	/* If */
        PUSHB[ ]	/* 2 values pushed */
        1 1
        INSTCTRL[ ]	/* SetInstrExecControl */
      EIF[ ]	/* EndIf */
      SCANCTRL[ ]	/* ScanConversionControl */
      SCANTYPE[ ]	/* ScanType */
      SCANTYPE[ ]	/* ScanType */
      SVTCA[0]	/* SetFPVectorToAxis */
      SCVTCI[ ]	/* SetCVTCutIn */
      WS[ ]	/* WriteStore */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      29
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
        PUSHB[ ]	/* 3 values pushed */
        3 160 160
        SCVTCI[ ]	/* SetCVTCutIn */
        WS[ ]	/* WriteStore */
      EIF[ ]	/* EndIf */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      128
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
        PUSHB[ ]	/* 3 values pushed */
        3 0 0
        SCVTCI[ ]	/* SetCVTCutIn */
        WS[ ]	/* WriteStore */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 2 values pushed */
      2 2
      RS[ ]	/* ReadStore */
      LTEQ[ ]	/* LessThenOrEqual */
      IF[ ]	/* If */
        PUSHB[ ]	/* 2 values pushed */
        4 3
        INSTCTRL[ ]	/* SetInstrExecControl */
      EIF[ ]	/* EndIf */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      RTG[ ]	/* RoundToGrid */
    </assembly>
  </prep>

  <cvt>
    <cv index="0" value="760"/>
    <cv index="1" value="10"/>
    <cv index="2" value="714"/>
    <cv index="3" value="0"/>
    <cv index="4" value="714"/>
    <cv index="5" value="10"/>
    <cv index="6" value="536"/>
    <cv index="7" value="10"/>
    <cv index="8" value="0"/>
    <cv index="9" value="0"/>
    <cv index="10" value="0"/>
    <cv index="11" value="-10"/>
    <cv index="12" value="0"/>
    <cv index="13" value="-10"/>
    <cv index="14" value="-250"/>
    <cv index="15" value="-10"/>
    <cv index="16" value="0"/>
    <cv index="17" value="0"/>
    <cv index="18" value="0"/>
    <cv index="19" value="0"/>
    <cv index="20" value="0"/>
    <cv index="21" value="0"/>
    <cv index="22" value="0"/>
    <cv index="23" value="0"/>
    <cv index="24" value="0"/>
    <cv index="25" value="0"/>
    <cv index="26" value="0"/>
    <cv index="27" value="0"/>
    <cv index="28" value="0"/>
    <cv index="29" value="0"/>
    <cv index="30" value="0"/>
    <cv index="31" value="0"/>
    <cv index="32" value="0"/>
    <cv index="33" value="0"/>
    <cv index="34" value="0"/>
    <cv index="35" value="0"/>
    <cv index="36" value="0"/>
    <cv index="37" value="0"/>
    <cv index="38" value="0"/>
    <cv index="39" value="0"/>
    <cv index="40" value="0"/>
    <cv index="41" value="0"/>
    <cv index="42" value="0"/>
    <cv index="43" value="0"/>
    <cv index="44" value="0"/>
    <cv index="45" value="0"/>
    <cv index="46" value="0"/>
    <cv index="47" value="0"/>
    <cv index="48" value="0"/>
    <cv index="49" value="0"/>
    <cv index="50" value="0"/>
    <cv index="51" value="0"/>
    <cv index="52" value="0"/>
    <cv index="53" value="0"/>
    <cv index="54" value="0"/>
    <cv index="55" value="0"/>
    <cv index="56" value="0"/>
    <cv index="57" value="0"/>
    <cv index="58" value="0"/>
    <cv index="59" value="0"/>
    <cv index="60" value="0"/>
    <cv index="61" value="0"/>
    <cv index="62" value="0"/>
    <cv index="63" value="0"/>
    <cv index="64" value="0"/>
    <cv index="65" value="64"/>
    <cv index="66" value="94"/>
    <cv index="67" value="64"/>
    <cv index="68" value="0"/>
    <cv index="69" value="0"/>
    <cv index="70" value="0"/>
    <cv index="71" value="0"/>
    <cv index="72" value="0"/>
    <cv index="73" value="0"/>
    <cv index="74" value="0"/>
    <cv index="75" value="0"/>
    <cv index="76" value="0"/>
    <cv index="77" value="0"/>
    <cv index="78" value="0"/>
    <cv index="79" value="0"/>
    <cv index="80" value="0"/>
    <cv index="81" value="0"/>
    <cv index="82" value="0"/>
    <cv index="83" value="0"/>
    <cv index="84" value="0"/>
    <cv index="85" value="53"/>
    <cv index="86" value="0"/>
    <cv index="87" value="64"/>
    <cv index="88" value="0"/>
    <cv index="89" value="0"/>
    <cv index="90" value="0"/>
    <cv index="91" value="0"/>
    <cv index="92" value="0"/>
    <cv index="93" value="42"/>
    <cv index="94" value="0"/>
    <cv index="95" value="0"/>
    <cv index="96" value="0"/>
    <cv index="97" value="0"/>
    <cv index="98" value="0"/>
    <cv index="99" value="0"/>
    <cv index="100" value="0"/>
    <cv index="101" value="0"/>
    <cv index="102" value="0"/>
    <cv index="103" value="0"/>
    <cv index="104" value="0"/>
    <cv index="105" value="0"/>
    <cv index="106" value="0"/>
    <cv index="107" value="0"/>
    <cv index="108" value="0"/>
    <cv index="109" value="0"/>
    <cv index="110" value="0"/>
    <cv index="111" value="0"/>
    <cv index="112" value="0"/>
    <cv index="113" value="0"/>
    <cv index="114" value="0"/>
    <cv index="115" value="0"/>
    <cv index="116" value="0"/>
    <cv index="117" value="0"/>
    <cv index="118" value="0"/>
    <cv index="119" value="0"/>
  </cvt>

  <loca>
    <!-- The 'loca' table will be calculated by the compiler -->
  </loca>

  <glyf>

    <!-- The xMin, yMin, xMax and yMax values
         will be recalculated by the compiler. -->

    <TTGlyph name=".notdef" xMin="50" yMin="-240" xMax="450" yMax="760">
      <contour>
        <pt x="50" y="-240" on="1"/>
        <pt x="450" y="-240" on="1"/>
        <pt x="450" y="760" on="1"/>
        <pt x="50" y="760" on="1"/>
      </contour>
      <contour>
        <pt x="100" y="-190" on="1"/>
        <pt x="100" y="710" on="1"/>
        <pt x="400" y="710" on="1"/>
        <pt x="400" y="-190" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 6 values pushed */
          5 85 3 4 85 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uni0020"/><!-- contains no outline data -->

    <TTGlyph name="uni0068" xMin="18" yMin="0" xMax="607" yMax="760">
      <contour>
        <pt x="18" y="0" on="1"/>
        <pt x="18" y="42" on="1"/>
        <pt x="26" y="42" on="1"/>
        <pt x="48" y="42" on="0"/>
        <pt x="86" y="52" on="0"/>
        <pt x="108" y="82" on="0"/>
        <pt x="108" y="114" on="1"/>
        <pt x="108" y="650" on="1"/>
        <pt x="108" y="680" on="0"/>
        <pt x="85" y="709" on="0"/>
        <pt x="48" y="718" on="0"/>
        <pt x="26" y="718" on="1"/>
        <pt x="18" y="718" on="1"/>
        <pt x="18" y="760" on="1"/>
        <pt x="202" y="760" on="1"/>
        <pt x="202" y="540" on="1"/>
        <pt x="202" y="522" on="0"/>
        <pt x="200" y="482" on="0"/>
        <pt x="198" y="455" on="0"/>
        <pt x="198" y="455" on="1"/>
        <pt x="203" y="455" on="1"/>
        <pt x="218" y="485" on="0"/>
        <pt x="261" y="526" on="0"/>
        <pt x="316" y="546" on="0"/>
        <pt x="350" y="546" on="1"/>
        <pt x="436" y="546" on="0"/>
        <pt x="527" y="453" on="0"/>
        <pt x="527" y="350" on="1"/>
        <pt x="527" y="114" on="1"/>
        <pt x="527" y="82" on="0"/>
        <pt x="547" y="52" on="0"/>
        <pt x="582" y="42" on="0"/>
        <pt x="604" y="42" on="1"/>
        <pt x="607" y="42" on="1"/>
        <pt x="607" y="0" on="1"/>
        <pt x="433" y="0" on="1"/>
        <pt x="433" y="345" on="1"/>
        <pt x="433" y="410" on="0"/>
        <pt x="384" y="482" on="0"/>
        <pt x="323" y="482" on="1"/>
        <pt x="282" y="482" on="0"/>
        <pt x="228" y="442" on="0"/>
        <pt x="202" y="369" on="0"/>
        <pt x="202" y="320" on="1"/>
        <pt x="202" y="109" on="1"/>
        <pt x="202" y="80" on="0"/>
        <pt x="225" y="51" on="0"/>
        <pt x="262" y="42" on="0"/>
        <pt x="284" y="42" on="1"/>
        <pt x="287" y="42" on="1"/>
        <pt x="287" y="0" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 21 values pushed */
          33 48 48 1 93 50 10 49 10 35 10 24 39 87 108 24 7 12 93 13 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uni006E" xMin="28" yMin="0" xMax="617" yMax="546">
      <contour>
        <pt x="28" y="0" on="1"/>
        <pt x="28" y="42" on="1"/>
        <pt x="36" y="42" on="1"/>
        <pt x="58" y="42" on="0"/>
        <pt x="96" y="52" on="0"/>
        <pt x="118" y="82" on="0"/>
        <pt x="118" y="114" on="1"/>
        <pt x="118" y="426" on="1"/>
        <pt x="118" y="456" on="0"/>
        <pt x="96" y="485" on="0"/>
        <pt x="60" y="494" on="0"/>
        <pt x="38" y="494" on="1"/>
        <pt x="33" y="494" on="1"/>
        <pt x="33" y="536" on="1"/>
        <pt x="195" y="536" on="1"/>
        <pt x="208" y="455" on="1"/>
        <pt x="213" y="455" on="1"/>
        <pt x="234" y="492" on="0"/>
        <pt x="281" y="532" on="0"/>
        <pt x="337" y="546" on="0"/>
        <pt x="369" y="546" on="1"/>
        <pt x="448" y="546" on="0"/>
        <pt x="537" y="453" on="0"/>
        <pt x="537" y="350" on="1"/>
        <pt x="537" y="114" on="1"/>
        <pt x="537" y="82" on="0"/>
        <pt x="556" y="52" on="0"/>
        <pt x="590" y="42" on="0"/>
        <pt x="612" y="42" on="1"/>
        <pt x="617" y="42" on="1"/>
        <pt x="617" y="0" on="1"/>
        <pt x="443" y="0" on="1"/>
        <pt x="443" y="345" on="1"/>
        <pt x="443" y="410" on="0"/>
        <pt x="394" y="482" on="0"/>
        <pt x="333" y="482" on="1"/>
        <pt x="288" y="482" on="0"/>
        <pt x="235" y="437" on="0"/>
        <pt x="212" y="363" on="0"/>
        <pt x="212" y="320" on="1"/>
        <pt x="212" y="109" on="1"/>
        <pt x="212" y="80" on="0"/>
        <pt x="234" y="51" on="0"/>
        <pt x="270" y="42" on="0"/>
        <pt x="292" y="42" on="1"/>
        <pt x="297" y="42" on="1"/>
        <pt x="297" y="0" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 19 values pushed */
          31 10 20 35 87 108 20 7 11 93 13 6 29 45 45 1 93 0 10
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          MIAP[1]	/* MoveIndirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uni006F" xMin="55" yMin="-10" xMax="522" yMax="546">
      <contour>
        <pt x="287" y="-10" on="1"/>
        <pt x="179" y="-10" on="0"/>
        <pt x="55" y="128" on="0"/>
        <pt x="55" y="269" on="1"/>
        <pt x="55" y="409" on="0"/>
        <pt x="174" y="546" on="0"/>
        <pt x="290" y="546" on="1"/>
        <pt x="398" y="546" on="0"/>
        <pt x="522" y="409" on="0"/>
        <pt x="522" y="269" on="1"/>
        <pt x="522" y="128" on="0"/>
        <pt x="402" y="-10" on="0"/>
      </contour>
      <contour>
        <pt x="289" y="42" on="1"/>
        <pt x="339" y="42" on="0"/>
        <pt x="399" y="93" on="0"/>
        <pt x="425" y="194" on="0"/>
        <pt x="425" y="269" on="1"/>
        <pt x="425" y="344" on="0"/>
        <pt x="398" y="443" on="0"/>
        <pt x="338" y="493" on="0"/>
        <pt x="288" y="493" on="1"/>
        <pt x="238" y="493" on="0"/>
        <pt x="178" y="443" on="0"/>
        <pt x="152" y="344" on="0"/>
        <pt x="152" y="269" on="1"/>
        <pt x="152" y="194" on="0"/>
        <pt x="179" y="93" on="0"/>
        <pt x="239" y="42" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 12 values pushed */
          6 20 85 108 6 7 0 12 85 108 0 11
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

  </glyf>

  <name>
    <namerecord nameID="256" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Weight
    </namerecord>
    <namerecord nameID="257" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Width
    </namerecord>
    <namerecord nameID="258" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Optical Size
    </namerecord>
    <namerecord nameID="259" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Condensed Thin
    </namerecord>
    <namerecord nameID="260" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Condensed Regular
    </namerecord>
    <namerecord nameID="261" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Condensed Black
    </namerecord>
    <namerecord nameID="262" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Thin
    </namerecord>
    <namerecord nameID="263" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Regular
    </namerecord>
    <namerecord nameID="264" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Black
    </namerecord>
    <namerecord nameID="265" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Condensed Thin Display
    </namerecord>
    <namerecord nameID="266" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Condensed Regular Display
    </namerecord>
    <namerecord nameID="267" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Condensed Black Display
    </namerecord>
    <namerecord nameID="268" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Thin Display
    </namerecord>
    <namerecord nameID="269" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Regular Display
    </namerecord>
    <namerecord nameID="270" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Black Display
    </namerecord>
    <namerecord nameID="0" platformID="3" platEncID="1" langID="0x409">
      Copyright 2015 Google Inc. All Rights Reserved.
    </namerecord>
    <namerecord nameID="1" platformID="3" platEncID="1" langID="0x409">
      Test CVAR GVAR One
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x409">
      Regular
    </namerecord>
    <namerecord nameID="3" platformID="3" platEncID="1" langID="0x409">
      Version 91.903;GOOG;Voto Serif GX Text Regular
    </namerecord>
    <namerecord nameID="4" platformID="3" platEncID="1" langID="0x409">
      Test CVAR GVAR One
    </namerecord>
    <namerecord nameID="5" platformID="3" platEncID="1" langID="0x409">
      Version 91.903
    </namerecord>
    <namerecord nameID="6" platformID="3" platEncID="1" langID="0x409">
      TestCVARGVAR-One
    </namerecord>
    <namerecord nameID="7" platformID="3" platEncID="1" langID="0x409">
      Noto is a trademark of Google Inc.
    </namerecord>
    <namerecord nameID="8" platformID="3" platEncID="1" langID="0x409">
      Monotype Imaging Inc.
    </namerecord>
    <namerecord nameID="9" platformID="3" platEncID="1" langID="0x409">
      Monotype Design Team &amp; Adam Twardoch
    </namerecord>
    <namerecord nameID="10" platformID="3" platEncID="1" langID="0x409">
      Designed by Monotype design team.
    </namerecord>
    <namerecord nameID="11" platformID="3" platEncID="1" langID="0x409">
      http://www.google.com/get/noto/
    </namerecord>
    <namerecord nameID="12" platformID="3" platEncID="1" langID="0x409">
      http://www.monotype.com/studio
    </namerecord>
    <namerecord nameID="13" platformID="3" platEncID="1" langID="0x409">
      This Font Software is licensed under the SIL Open Font License, Version 1.1. This Font Software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the SIL Open Font License for the specific language, permissions and limitations governing your use of this Font Software.
    </namerecord>
    <namerecord nameID="14" platformID="3" platEncID="1" langID="0x409">
      http://scripts.sil.org/OFL
    </namerecord>
    <namerecord nameID="16" platformID="3" platEncID="1" langID="0x409">
      Test CVAR GVAR
    </namerecord>
    <namerecord nameID="17" platformID="3" platEncID="1" langID="0x409">
      One
    </namerecord>
    <namerecord nameID="256" platformID="3" platEncID="1" langID="0x409">
      Weight
    </namerecord>
    <namerecord nameID="257" platformID="3" platEncID="1" langID="0x409">
      Width
    </namerecord>
    <namerecord nameID="258" platformID="3" platEncID="1" langID="0x409">
      Optical Size
    </namerecord>
    <namerecord nameID="259" platformID="3" platEncID="1" langID="0x409">
      Condensed Thin
    </namerecord>
    <namerecord nameID="260" platformID="3" platEncID="1" langID="0x409">
      Condensed Regular
    </namerecord>
    <namerecord nameID="261" platformID="3" platEncID="1" langID="0x409">
      Condensed Black
    </namerecord>
    <namerecord nameID="262" platformID="3" platEncID="1" langID="0x409">
      Thin
    </namerecord>
    <namerecord nameID="263" platformID="3" platEncID="1" langID="0x409">
      Regular
    </namerecord>
    <namerecord nameID="264" platformID="3" platEncID="1" langID="0x409">
      Black
    </namerecord>
    <namerecord nameID="265" platformID="3" platEncID="1" langID="0x409">
      Condensed Thin Display
    </namerecord>
    <namerecord nameID="266" platformID="3" platEncID="1" langID="0x409">
      Condensed Regular Display
    </namerecord>
    <namerecord nameID="267" platformID="3" platEncID="1" langID="0x409">
      Condensed Black Display
    </namerecord>
    <namerecord nameID="268" platformID="3" platEncID="1" langID="0x409">
      Thin Display
    </namerecord>
    <namerecord nameID="269" platformID="3" platEncID="1" langID="0x409">
      Regular Display
    </namerecord>
    <namerecord nameID="270" platformID="3" platEncID="1" langID="0x409">
      Black Display
    </namerecord>
  </name>

  <post>
    <formatType value="2.0"/>
    <italicAngle value="0.0"/>
    <underlinePosition value="-100"/>
    <underlineThickness value="50"/>
    <isFixedPitch value="0"/>
    <minMemType42 value="0"/>
    <maxMemType42 value="0"/>
    <minMemType1 value="0"/>
    <maxMemType1 value="0"/>
    <psNames>
      <!-- This file uses unique glyph names based on the information
           found in the 'post' table. Since these names might not be unique,
           we have to invent artificial names in case of clashes. In order to
           be able to retain the original information, we need a name to
           ps name mapping for those cases where they differ. That's what
           you see below.
            -->
    </psNames>
    <extraNames>
      <!-- following are the name that are not taken from the standard Mac glyph order -->
      <psName name="uni0020"/>
      <psName name="uni0068"/>
      <psName name="uni006E"/>
      <psName name="uni006F"/>
    </extraNames>
  </post>

  <gasp>
    <gaspRange rangeMaxPPEM="8" rangeGaspBehavior="10"/>
    <gaspRange rangeMaxPPEM="96" rangeGaspBehavior="15"/>
    <gaspRange rangeMaxPPEM="65535" rangeGaspBehavior="10"/>
  </gasp>

  <GDEF>
    <Version value="0x00010003"/>
    <GlyphClassDef>
      <ClassDef glyph="uni0068" class="1"/>
      <ClassDef glyph="uni006E" class="1"/>
      <ClassDef glyph="uni006F" class="1"/>
    </GlyphClassDef>
    <VarStore Format="1">
      <Format value="1"/>
      <VarRegionList>
        <!-- RegionAxisCount=3 -->
        <!-- RegionCount=11 -->
        <Region index="0">
          <VarRegionAxis index="0">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="1">
          <VarRegionAxis index="0">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="2">
          <VarRegionAxis index="0">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="3">
          <VarRegionAxis index="0">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="4">
          <VarRegionAxis index="0">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="5">
          <VarRegionAxis index="0">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="6">
          <VarRegionAxis index="0">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="7">
          <VarRegionAxis index="0">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="8">
          <VarRegionAxis index="0">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="9">
          <VarRegionAxis index="0">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="10">
          <VarRegionAxis index="0">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
        </Region>
      </VarRegionList>
      <!-- VarDataCount=1 -->
      <VarData index="0">
        <!-- ItemCount=0 -->
        <NumShorts value="0"/>
        <!-- VarRegionCount=11 -->
        <VarRegionIndex index="0" value="0"/>
        <VarRegionIndex index="1" value="1"/>
        <VarRegionIndex index="2" value="2"/>
        <VarRegionIndex index="3" value="3"/>
        <VarRegionIndex index="4" value="4"/>
        <VarRegionIndex index="5" value="5"/>
        <VarRegionIndex index="6" value="6"/>
        <VarRegionIndex index="7" value="7"/>
        <VarRegionIndex index="8" value="8"/>
        <VarRegionIndex index="9" value="9"/>
        <VarRegionIndex index="10" value="10"/>
      </VarData>
    </VarStore>
  </GDEF>

  <HVAR>
    <Version value="0x00010000"/>
    <VarStore Format="1">
      <Format value="1"/>
      <VarRegionList>
        <!-- RegionAxisCount=3 -->
        <!-- RegionCount=11 -->
        <Region index="0">
          <VarRegionAxis index="0">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="1">
          <VarRegionAxis index="0">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="2">
          <VarRegionAxis index="0">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="3">
          <VarRegionAxis index="0">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="4">
          <VarRegionAxis index="0">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="5">
          <VarRegionAxis index="0">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="6">
          <VarRegionAxis index="0">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="7">
          <VarRegionAxis index="0">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="8">
          <VarRegionAxis index="0">
            <StartCoord value="0.0"/>
            <PeakCoord value="0.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="9">
          <VarRegionAxis index="0">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
        </Region>
        <Region index="10">
          <VarRegionAxis index="0">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="1">
            <StartCoord value="-1.0"/>
            <PeakCoord value="-1.0"/>
            <EndCoord value="0.0"/>
          </VarRegionAxis>
          <VarRegionAxis index="2">
            <StartCoord value="0.0"/>
            <PeakCoord value="1.0"/>
            <EndCoord value="1.0"/>
          </VarRegionAxis>
        </Region>
      </VarRegionList>
      <!-- VarDataCount=1 -->
      <VarData index="0">
        <!-- ItemCount=5 -->
        <NumShorts value="1"/>
        <!-- VarRegionCount=11 -->
        <VarRegionIndex index="0" value="2"/>
        <VarRegionIndex index="1" value="0"/>
        <VarRegionIndex index="2" value="1"/>
        <VarRegionIndex index="3" value="3"/>
        <VarRegionIndex index="4" value="4"/>
        <VarRegionIndex index="5" value="5"/>
        <VarRegionIndex index="6" value="6"/>
        <VarRegionIndex index="7" value="7"/>
        <VarRegionIndex index="8" value="8"/>
        <VarRegionIndex index="9" value="9"/>
        <VarRegionIndex index="10" value="10"/>
        <Item index="0" value="[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"/>
        <Item index="1" value="[-55, 0, 0, -35, -9, 12, 0, 0, 5, 9, -12]"/>
        <Item index="2" value="[-126, -40, 56, 0, -12, 11, 0, 0, 0, 0, 0]"/>
        <Item index="3" value="[-130, -28, 38, 0, -14, 17, 0, 0, 0, 0, 0]"/>
        <Item index="4" value="[-113, -46, 63, 0, -8, 6, 0, 0, -1, 1, 1]"/>
      </VarData>
    </VarStore>
  </HVAR>

  <cvar>
    <version major="1" minor="0"/>
    <tuple>
      <coord axis="wdth" value="-1.0"/>
      <delta cvt="65" value="8"/>
      <delta cvt="66" value="-8"/>
      <delta cvt="67" value="8"/>
      <delta cvt="85" value="-11"/>
      <delta cvt="87" value="0"/>
      <delta cvt="93" value="-1"/>
    </tuple>
    <tuple>
      <coord axis="wght" value="-1.0"/>
      <coord axis="wdth" value="-1.0"/>
      <delta cvt="65" value="-2"/>
      <delta cvt="66" value="8"/>
      <delta cvt="67" value="-7"/>
      <delta cvt="85" value="11"/>
      <delta cvt="87" value="0"/>
      <delta cvt="93" value="1"/>
    </tuple>
    <tuple>
      <coord axis="wght" value="1.0"/>
      <coord axis="wdth" value="-1.0"/>
      <delta cvt="65" value="56"/>
      <delta cvt="66" value="-24"/>
      <delta cvt="67" value="42"/>
      <delta cvt="85" value="6"/>
      <delta cvt="87" value="-10"/>
      <delta cvt="93" value="-4"/>
    </tuple>
    <tuple>
      <coord axis="wght" value="-1.0"/>
      <delta cvt="65" value="-44"/>
      <delta cvt="66" value="-66"/>
      <delta cvt="67" value="-39"/>
      <delta cvt="85" value="-28"/>
      <delta cvt="87" value="-39"/>
      <delta cvt="93" value="-22"/>
    </tuple>
    <tuple>
      <coord axis="wght" value="1.0"/>
      <delta cvt="65" value="22"/>
      <delta cvt="66" value="100"/>
      <delta cvt="67" value="36"/>
      <delta cvt="85" value="19"/>
      <delta cvt="87" value="36"/>
      <delta cvt="93" value="19"/>
    </tuple>
    <tuple>
      <coord axis="opsz" value="1.0"/>
      <delta cvt="65" value="8"/>
      <delta cvt="66" value="0"/>
      <delta cvt="67" value="8"/>
      <delta cvt="85" value="-43"/>
      <delta cvt="87" value="-49"/>
      <delta cvt="93" value="-32"/>
    </tuple>
    <tuple>
      <coord axis="wdth" value="-1.0"/>
      <coord axis="opsz" value="1.0"/>
      <delta cvt="65" value="-8"/>
      <delta cvt="66" value="0"/>
      <delta cvt="67" value="-8"/>
      <delta cvt="85" value="11"/>
      <delta cvt="87" value="9"/>
      <delta cvt="93" value="1"/>
    </tuple>
    <tuple>
      <coord axis="wght" value="1.0"/>
      <coord axis="wdth" value="-1.0"/>
      <coord axis="opsz" value="1.0"/>
      <delta cvt="65" value="-80"/>
      <delta cvt="66" value="0"/>
      <delta cvt="67" value="-90"/>
      <delta cvt="85" value="-6"/>
      <delta cvt="87" value="-47"/>
      <delta cvt="93" value="4"/>
    </tuple>
    <tuple>
      <coord axis="wght" value="-1.0"/>
      <coord axis="opsz" value="1.0"/>
      <delta cvt="65" value="-16"/>
      <delta cvt="66" value="0"/>
      <delta cvt="67" value="-21"/>
      <delta cvt="85" value="28"/>
      <delta cvt="87" value="39"/>
      <delta cvt="93" value="22"/>
    </tuple>
    <tuple>
      <coord axis="wght" value="1.0"/>
      <coord axis="opsz" value="1.0"/>
      <delta cvt="65" value="-46"/>
      <delta cvt="66" value="0"/>
      <delta cvt="67" value="-22"/>
      <delta cvt="85" value="-19"/>
      <delta cvt="87" value="35"/>
      <delta cvt="93" value="-19"/>
    </tuple>
    <tuple>
      <coord axis="wght" value="-1.0"/>
      <coord axis="wdth" value="-1.0"/>
      <coord axis="opsz" value="1.0"/>
      <delta cvt="65" value="2"/>
      <delta cvt="66" value="0"/>
      <delta cvt="67" value="7"/>
      <delta cvt="85" value="-11"/>
      <delta cvt="87" value="-9"/>
      <delta cvt="93" value="-1"/>
    </tuple>
  </cvar>

  <fvar>

    <!-- Weight -->
    <Axis>
      <AxisTag>wght</AxisTag>
      <Flags>0x0</Flags>
      <MinValue>28.0</MinValue>
      <DefaultValue>94.0</DefaultValue>
      <MaxValue>194.0</MaxValue>
      <AxisNameID>256</AxisNameID>
    </Axis>

    <!-- Width -->
    <Axis>
      <AxisTag>wdth</AxisTag>
      <Flags>0x0</Flags>
      <MinValue>70.0</MinValue>
      <DefaultValue>100.0</DefaultValue>
      <MaxValue>100.0</MaxValue>
      <AxisNameID>257</AxisNameID>
    </Axis>

    <!-- Optical Size -->
    <Axis>
      <AxisTag>opsz</AxisTag>
      <Flags>0x0</Flags>
      <MinValue>12.0</MinValue>
      <DefaultValue>12.0</DefaultValue>
      <MaxValue>72.0</MaxValue>
      <AxisNameID>258</AxisNameID>
    </Axis>

    <!-- Regular -->
    <NamedInstance flags="0x0" subfamilyNameID="263">
      <coord axis="wght" value="94.0"/>
      <coord axis="wdth" value="100.0"/>
      <coord axis="opsz" value="12.0"/>
    </NamedInstance>

    <!-- Condensed Thin -->
    <NamedInstance flags="0x0" subfamilyNameID="259">
      <coord axis="wght" value="28.0"/>
      <coord axis="wdth" value="70.0"/>
      <coord axis="opsz" value="12.0"/>
    </NamedInstance>

    <!-- Condensed Regular -->
    <NamedInstance flags="0x0" subfamilyNameID="260">
      <coord axis="wght" value="94.0"/>
      <coord axis="wdth" value="70.0"/>
      <coord axis="opsz" value="12.0"/>
    </NamedInstance>

    <!-- Condensed Black -->
    <NamedInstance flags="0x0" subfamilyNameID="261">
      <coord axis="wght" value="194.0"/>
      <coord axis="wdth" value="70.0"/>
      <coord axis="opsz" value="12.0"/>
    </NamedInstance>

    <!-- Thin -->
    <NamedInstance flags="0x0" subfamilyNameID="262">
      <coord axis="wght" value="28.0"/>
      <coord axis="wdth" value="100.0"/>
      <coord axis="opsz" value="12.0"/>
    </NamedInstance>

    <!-- Black -->
    <NamedInstance flags="0x0" subfamilyNameID="264">
      <coord axis="wght" value="194.0"/>
      <coord axis="wdth" value="100.0"/>
      <coord axis="opsz" value="12.0"/>
    </NamedInstance>

    <!-- Condensed Thin Display -->
    <NamedInstance flags="0x0" subfamilyNameID="265">
      <coord axis="wght" value="28.0"/>
      <coord axis="wdth" value="70.0"/>
      <coord axis="opsz" value="72.0"/>
    </NamedInstance>

    <!-- Condensed Regular Display -->
    <NamedInstance flags="0x0" subfamilyNameID="266">
      <coord axis="wght" value="94.0"/>
      <coord axis="wdth" value="70.0"/>
      <coord axis="opsz" value="72.0"/>
    </NamedInstance>

    <!-- Condensed Black Display -->
    <NamedInstance flags="0x0" subfamilyNameID="267">
      <coord axis="wght" value="194.0"/>
      <coord axis="wdth" value="70.0"/>
      <coord axis="opsz" value="72.0"/>
    </NamedInstance>

    <!-- Thin Display -->
    <NamedInstance flags="0x0" subfamilyNameID="268">
      <coord axis="wght" value="28.0"/>
      <coord axis="wdth" value="100.0"/>
      <coord axis="opsz" value="72.0"/>
    </NamedInstance>

    <!-- Regular Display -->
    <NamedInstance flags="0x0" subfamilyNameID="269">
      <coord axis="wght" value="94.0"/>
      <coord axis="wdth" value="100.0"/>
      <coord axis="opsz" value="72.0"/>
    </NamedInstance>

    <!-- Black Display -->
    <NamedInstance flags="0x0" subfamilyNameID="270">
      <coord axis="wght" value="194.0"/>
      <coord axis="wdth" value="100.0"/>
      <coord axis="opsz" value="72.0"/>
    </NamedInstance>
  </fvar>

  <gvar>
    <version value="1"/>
    <reserved value="0"/>
    <glyphVariations glyph="uni0020">
      <tuple>
        <coord axis="wdth" value="-1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="-55" y="0"/>
        <delta pt="2" x="0" y="0"/>
        <delta pt="3" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="-35" y="0"/>
        <delta pt="2" x="0" y="0"/>
        <delta pt="3" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="-1.0"/>
        <coord axis="wdth" value="-1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="-9" y="0"/>
        <delta pt="2" x="0" y="0"/>
        <delta pt="3" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="1.0"/>
        <coord axis="wdth" value="-1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="12" y="0"/>
        <delta pt="2" x="0" y="0"/>
        <delta pt="3" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wdth" value="-1.0"/>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="5" y="0"/>
        <delta pt="2" x="0" y="0"/>
        <delta pt="3" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="-1.0"/>
        <coord axis="wdth" value="-1.0"/>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="9" y="0"/>
        <delta pt="2" x="0" y="0"/>
        <delta pt="3" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="1.0"/>
        <coord axis="wdth" value="-1.0"/>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="-12" y="0"/>
        <delta pt="2" x="0" y="0"/>
        <delta pt="3" x="0" y="0"/>
      </tuple>
    </glyphVariations>
    <glyphVariations glyph="uni0068">
      <tuple>
        <coord axis="wght" value="-1.0"/>
        <delta pt="0" x="-2" y="0"/>
        <delta pt="1" x="-2" y="-22"/>
        <delta pt="2" x="15" y="-22"/>
        <delta pt="3" x="30" y="-22"/>
        <delta pt="4" x="24" y="-24"/>
        <delta pt="5" x="10" y="-23"/>
        <delta pt="6" x="10" y="-20"/>
        <delta pt="7" x="10" y="12"/>
        <delta pt="8" x="10" y="19"/>
        <delta pt="9" x="25" y="23"/>
        <delta pt="10" x="33" y="22"/>
        <delta pt="11" x="25" y="22"/>
        <delta pt="12" x="8" y="22"/>
        <delta pt="13" x="8" y="0"/>
        <delta pt="14" x="-56" y="0"/>
        <delta pt="15" x="-56" y="-58"/>
        <delta pt="16" x="-56" y="-48"/>
        <delta pt="17" x="-55" y="-26"/>
        <delta pt="18" x="-54" y="-14"/>
        <delta pt="19" x="-55" y="-20"/>
        <delta pt="20" x="-58" y="-20"/>
        <delta pt="21" x="-64" y="-24"/>
        <delta pt="22" x="-68" y="-16"/>
        <delta pt="23" x="-54" y="-4"/>
        <delta pt="24" x="-36" y="-4"/>
        <delta pt="25" x="-44" y="-4"/>
        <delta pt="26" x="-52" y="4"/>
        <delta pt="27" x="-52" y="12"/>
        <delta pt="28" x="-52" y="-20"/>
        <delta pt="29" x="-52" y="-23"/>
        <delta pt="30" x="-64" y="-24"/>
        <delta pt="31" x="-66" y="-22"/>
        <delta pt="32" x="-52" y="-22"/>
        <delta pt="33" x="-38" y="-22"/>
        <delta pt="34" x="-38" y="0"/>
        <delta pt="35" x="14" y="0"/>
        <delta pt="36" x="14" y="15"/>
        <delta pt="37" x="14" y="31"/>
        <delta pt="38" x="0" y="35"/>
        <delta pt="39" x="-9" y="35"/>
        <delta pt="40" x="-18" y="35"/>
        <delta pt="41" x="-40" y="36"/>
        <delta pt="42" x="-56" y="29"/>
        <delta pt="43" x="-56" y="14"/>
        <delta pt="44" x="-56" y="-15"/>
        <delta pt="45" x="-56" y="-21"/>
        <delta pt="46" x="-71" y="-23"/>
        <delta pt="47" x="-76" y="-22"/>
        <delta pt="48" x="-61" y="-22"/>
        <delta pt="49" x="-45" y="-22"/>
        <delta pt="50" x="-45" y="0"/>
        <delta pt="51" x="0" y="0"/>
        <delta pt="52" x="-40" y="0"/>
        <delta pt="53" x="0" y="0"/>
        <delta pt="54" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="1.0"/>
        <delta pt="0" x="3" y="0"/>
        <delta pt="1" x="3" y="19"/>
        <delta pt="2" x="-1" y="19"/>
        <delta pt="3" x="-4" y="19"/>
        <delta pt="4" x="-10" y="18"/>
        <delta pt="5" x="-14" y="17"/>
        <delta pt="6" x="-14" y="14"/>
        <delta pt="7" x="-14" y="-7"/>
        <delta pt="8" x="-14" y="-12"/>
        <delta pt="9" x="-16" y="-18"/>
        <delta pt="10" x="-9" y="-19"/>
        <delta pt="11" x="5" y="-19"/>
        <delta pt="12" x="-2" y="-19"/>
        <delta pt="13" x="-2" y="0"/>
        <delta pt="14" x="87" y="0"/>
        <delta pt="15" x="87" y="82"/>
        <delta pt="16" x="87" y="72"/>
        <delta pt="17" x="88" y="60"/>
        <delta pt="18" x="88" y="41"/>
        <delta pt="19" x="86" y="23"/>
        <delta pt="20" x="89" y="23"/>
        <delta pt="21" x="86" y="11"/>
        <delta pt="22" x="79" y="4"/>
        <delta pt="23" x="82" y="5"/>
        <delta pt="24" x="91" y="5"/>
        <delta pt="25" x="88" y="5"/>
        <delta pt="26" x="76" y="7"/>
        <delta pt="27" x="76" y="10"/>
        <delta pt="28" x="76" y="17"/>
        <delta pt="29" x="76" y="18"/>
        <delta pt="30" x="67" y="19"/>
        <delta pt="31" x="58" y="19"/>
        <delta pt="32" x="58" y="19"/>
        <delta pt="33" x="59" y="19"/>
        <delta pt="34" x="59" y="0"/>
        <delta pt="35" x="-25" y="0"/>
        <delta pt="36" x="-25" y="-28"/>
        <delta pt="37" x="-25" y="-29"/>
        <delta pt="38" x="-2" y="-31"/>
        <delta pt="39" x="28" y="-31"/>
        <delta pt="40" x="42" y="-31"/>
        <delta pt="41" x="70" y="-37"/>
        <delta pt="42" x="88" y="-33"/>
        <delta pt="43" x="88" y="-19"/>
        <delta pt="44" x="88" y="16"/>
        <delta pt="45" x="88" y="18"/>
        <delta pt="46" x="78" y="19"/>
        <delta pt="47" x="68" y="19"/>
        <delta pt="48" x="68" y="19"/>
        <delta pt="49" x="69" y="19"/>
        <delta pt="50" x="69" y="0"/>
        <delta pt="51" x="0" y="0"/>
        <delta pt="52" x="56" y="0"/>
        <delta pt="53" x="0" y="0"/>
        <delta pt="54" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wdth" value="-1.0"/>
        <delta pt="1" x="-4" y="-1"/>
        <delta pt="2" x="-5" y="-1"/>
        <delta pt="5" x="-25" y="0"/>
        <delta pt="6" x="-25" y="-1"/>
        <delta pt="7" x="-25" y="1"/>
        <delta pt="8" x="-25" y="0"/>
        <delta pt="10" x="-12" y="1"/>
        <delta pt="11" x="-5" y="1"/>
        <delta pt="13" x="-4" y="0"/>
        <delta pt="15" x="-32" y="-9"/>
        <delta pt="16" x="-32" y="-7"/>
        <delta pt="17" x="-32" y="0"/>
        <delta pt="18" x="-31" y="3"/>
        <delta pt="19" x="-31" y="-1"/>
        <delta pt="21" x="-38" y="-7"/>
        <delta pt="22" x="-49" y="-6"/>
        <delta pt="23" x="-56" y="0"/>
        <delta pt="24" x="-55" y="0"/>
        <delta pt="26" x="-101" y="-1"/>
        <delta pt="28" x="-101" y="-1"/>
        <delta pt="29" x="-101" y="0"/>
        <delta pt="30" x="-107" y="-1"/>
        <delta pt="34" x="-120" y="0"/>
        <delta pt="37" x="-94" y="2"/>
        <delta pt="39" x="-64" y="2"/>
        <delta pt="41" x="-40" y="2"/>
        <delta pt="42" x="-32" y="2"/>
        <delta pt="44" x="-32" y="-1"/>
        <delta pt="45" x="-32" y="-2"/>
        <delta pt="46" x="-39" y="-1"/>
        <delta pt="47" x="-48" y="-1"/>
        <delta pt="50" x="-53" y="0"/>
        <delta pt="52" x="-126" y="0"/>
      </tuple>
      <tuple>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="0" y="-32"/>
        <delta pt="2" x="0" y="-32"/>
        <delta pt="3" x="9" y="-32"/>
        <delta pt="4" x="7" y="-25"/>
        <delta pt="5" x="0" y="-15"/>
        <delta pt="6" x="0" y="-12"/>
        <delta pt="7" x="0" y="10"/>
        <delta pt="8" x="0" y="14"/>
        <delta pt="9" x="8" y="24"/>
        <delta pt="10" x="10" y="32"/>
        <delta pt="11" x="2" y="32"/>
        <delta pt="12" x="5" y="32"/>
        <delta pt="13" x="5" y="0"/>
        <delta pt="14" x="0" y="0"/>
        <delta pt="15" x="0" y="18"/>
        <delta pt="16" x="0" y="16"/>
        <delta pt="17" x="2" y="18"/>
        <delta pt="18" x="4" y="7"/>
        <delta pt="19" x="3" y="-13"/>
        <delta pt="20" x="0" y="-13"/>
        <delta pt="21" x="-2" y="3"/>
        <delta pt="22" x="6" y="7"/>
        <delta pt="23" x="10" y="0"/>
        <delta pt="24" x="1" y="0"/>
        <delta pt="25" x="4" y="0"/>
        <delta pt="26" x="0" y="0"/>
        <delta pt="27" x="0" y="0"/>
        <delta pt="28" x="0" y="-12"/>
        <delta pt="29" x="0" y="-15"/>
        <delta pt="30" x="-6" y="-25"/>
        <delta pt="31" x="-8" y="-32"/>
        <delta pt="32" x="-2" y="-32"/>
        <delta pt="33" x="0" y="-32"/>
        <delta pt="34" x="0" y="0"/>
        <delta pt="35" x="0" y="0"/>
        <delta pt="36" x="0" y="39"/>
        <delta pt="37" x="0" y="39"/>
        <delta pt="38" x="0" y="49"/>
        <delta pt="39" x="3" y="49"/>
        <delta pt="40" x="-3" y="49"/>
        <delta pt="41" x="-3" y="39"/>
        <delta pt="42" x="0" y="33"/>
        <delta pt="43" x="0" y="39"/>
        <delta pt="44" x="0" y="-7"/>
        <delta pt="45" x="0" y="-13"/>
        <delta pt="46" x="-8" y="-24"/>
        <delta pt="47" x="-10" y="-32"/>
        <delta pt="48" x="-2" y="-32"/>
        <delta pt="49" x="0" y="-32"/>
        <delta pt="50" x="0" y="0"/>
        <delta pt="51" x="0" y="0"/>
        <delta pt="52" x="0" y="0"/>
        <delta pt="53" x="0" y="0"/>
        <delta pt="54" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="-1.0"/>
        <coord axis="wdth" value="-1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="0" y="1"/>
        <delta pt="2" x="-15" y="1"/>
        <delta pt="3" x="-16" y="1"/>
        <delta pt="4" x="-10" y="2"/>
        <delta pt="5" x="-5" y="2"/>
        <delta pt="6" x="-5" y="3"/>
        <delta pt="7" x="-5" y="1"/>
        <delta pt="8" x="-5" y="-1"/>
        <delta pt="9" x="-10" y="-3"/>
        <delta pt="10" x="-13" y="-1"/>
        <delta pt="11" x="-15" y="-1"/>
        <delta pt="12" x="-7" y="-1"/>
        <delta pt="13" x="-7" y="0"/>
        <delta pt="14" x="2" y="0"/>
        <delta pt="15" x="2" y="22"/>
        <delta pt="16" x="2" y="22"/>
        <delta pt="17" x="2" y="19"/>
        <delta pt="18" x="1" y="16"/>
        <delta pt="19" x="1" y="17"/>
        <delta pt="20" x="3" y="17"/>
        <delta pt="21" x="8" y="20"/>
        <delta pt="22" x="12" y="12"/>
        <delta pt="23" x="-1" y="0"/>
        <delta pt="24" x="-20" y="0"/>
        <delta pt="25" x="-17" y="0"/>
        <delta pt="26" x="-8" y="-4"/>
        <delta pt="27" x="-8" y="3"/>
        <delta pt="28" x="-8" y="1"/>
        <delta pt="29" x="-8" y="2"/>
        <delta pt="30" x="-3" y="3"/>
        <delta pt="31" x="-2" y="1"/>
        <delta pt="32" x="-6" y="1"/>
        <delta pt="33" x="-14" y="1"/>
        <delta pt="34" x="-14" y="0"/>
        <delta pt="35" x="-15" y="0"/>
        <delta pt="36" x="-15" y="2"/>
        <delta pt="37" x="-15" y="-5"/>
        <delta pt="38" x="-11" y="-2"/>
        <delta pt="39" x="-17" y="-2"/>
        <delta pt="40" x="-15" y="-2"/>
        <delta pt="41" x="-5" y="-2"/>
        <delta pt="42" x="2" y="-4"/>
        <delta pt="43" x="2" y="-2"/>
        <delta pt="44" x="2" y="3"/>
        <delta pt="45" x="2" y="4"/>
        <delta pt="46" x="9" y="2"/>
        <delta pt="47" x="14" y="1"/>
        <delta pt="48" x="11" y="1"/>
        <delta pt="49" x="-2" y="1"/>
        <delta pt="50" x="-2" y="0"/>
        <delta pt="51" x="0" y="0"/>
        <delta pt="52" x="-12" y="0"/>
        <delta pt="53" x="0" y="0"/>
        <delta pt="54" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="1.0"/>
        <coord axis="wdth" value="-1.0"/>
        <delta pt="0" x="1" y="0"/>
        <delta pt="2" x="1" y="-4"/>
        <delta pt="5" x="9" y="-5"/>
        <delta pt="6" x="9" y="-3"/>
        <delta pt="7" x="9" y="1"/>
        <delta pt="9" x="8" y="4"/>
        <delta pt="10" x="5" y="4"/>
        <delta pt="11" x="0" y="4"/>
        <delta pt="13" x="1" y="0"/>
        <delta pt="15" x="-15" y="-14"/>
        <delta pt="16" x="-15" y="-13"/>
        <delta pt="17" x="-16" y="-15"/>
        <delta pt="18" x="-17" y="-13"/>
        <delta pt="19" x="-16" y="-5"/>
        <delta pt="21" x="-12" y="3"/>
        <delta pt="22" x="-7" y="3"/>
        <delta pt="23" x="-10" y="-1"/>
        <delta pt="24" x="-18" y="-1"/>
        <delta pt="27" x="1" y="-2"/>
        <delta pt="30" x="5" y="-4"/>
        <delta pt="31" x="9" y="-4"/>
        <delta pt="35" x="26" y="0"/>
        <delta pt="36" x="26" y="6"/>
        <delta pt="39" x="6" y="6"/>
        <delta pt="41" x="-9" y="8"/>
        <delta pt="42" x="-16" y="7"/>
        <delta pt="43" x="-16" y="4"/>
        <delta pt="44" x="-16" y="-3"/>
        <delta pt="46" x="-11" y="-4"/>
        <delta pt="47" x="-6" y="-4"/>
        <delta pt="52" x="11" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="-1.0"/>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="0" y="22"/>
        <delta pt="2" x="0" y="22"/>
        <delta pt="3" x="-9" y="22"/>
        <delta pt="4" x="-7" y="15"/>
        <delta pt="5" x="0" y="5"/>
        <delta pt="6" x="0" y="2"/>
        <delta pt="7" x="0" y="0"/>
        <delta pt="8" x="0" y="-4"/>
        <delta pt="9" x="-8" y="-14"/>
        <delta pt="10" x="-10" y="-22"/>
        <delta pt="11" x="-2" y="-22"/>
        <delta pt="12" x="-5" y="-22"/>
        <delta pt="13" x="-5" y="0"/>
        <delta pt="14" x="0" y="0"/>
        <delta pt="15" x="0" y="-18"/>
        <delta pt="16" x="0" y="-16"/>
        <delta pt="17" x="-1" y="-16"/>
        <delta pt="18" x="-2" y="-13"/>
        <delta pt="19" x="-1" y="-6"/>
        <delta pt="20" x="2" y="-6"/>
        <delta pt="21" x="7" y="-8"/>
        <delta pt="22" x="8" y="-5"/>
        <delta pt="23" x="2" y="0"/>
        <delta pt="24" x="-1" y="0"/>
        <delta pt="25" x="-4" y="0"/>
        <delta pt="26" x="0" y="0"/>
        <delta pt="27" x="0" y="0"/>
        <delta pt="28" x="0" y="2"/>
        <delta pt="29" x="0" y="5"/>
        <delta pt="30" x="6" y="15"/>
        <delta pt="31" x="8" y="22"/>
        <delta pt="32" x="2" y="22"/>
        <delta pt="33" x="0" y="22"/>
        <delta pt="34" x="0" y="0"/>
        <delta pt="35" x="0" y="0"/>
        <delta pt="36" x="0" y="-39"/>
        <delta pt="37" x="0" y="-32"/>
        <delta pt="38" x="0" y="-39"/>
        <delta pt="39" x="-3" y="-39"/>
        <delta pt="40" x="3" y="-39"/>
        <delta pt="41" x="3" y="-34"/>
        <delta pt="42" x="0" y="-33"/>
        <delta pt="43" x="0" y="-39"/>
        <delta pt="44" x="0" y="-3"/>
        <delta pt="45" x="0" y="3"/>
        <delta pt="46" x="8" y="14"/>
        <delta pt="47" x="10" y="22"/>
        <delta pt="48" x="2" y="22"/>
        <delta pt="49" x="0" y="22"/>
        <delta pt="50" x="0" y="0"/>
        <delta pt="51" x="0" y="0"/>
        <delta pt="52" x="0" y="0"/>
        <delta pt="53" x="0" y="0"/>
        <delta pt="54" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="1.0"/>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="0" y="-19"/>
        <delta pt="2" x="0" y="-19"/>
        <delta pt="3" x="-5" y="-19"/>
        <delta pt="4" x="-5" y="-26"/>
        <delta pt="5" x="0" y="-36"/>
        <delta pt="6" x="0" y="-39"/>
        <delta pt="7" x="0" y="34"/>
        <delta pt="8" x="0" y="32"/>
        <delta pt="9" x="3" y="26"/>
        <delta pt="10" x="3" y="19"/>
        <delta pt="11" x="-3" y="19"/>
        <delta pt="12" x="-5" y="19"/>
        <delta pt="13" x="-5" y="0"/>
        <delta pt="14" x="0" y="0"/>
        <delta pt="15" x="0" y="-69"/>
        <delta pt="16" x="0" y="-62"/>
        <delta pt="17" x="-1" y="-55"/>
        <delta pt="18" x="-2" y="-41"/>
        <delta pt="19" x="0" y="-26"/>
        <delta pt="20" x="-3" y="-26"/>
        <delta pt="21" x="-4" y="-23"/>
        <delta pt="22" x="-11" y="-11"/>
        <delta pt="23" x="-11" y="0"/>
        <delta pt="24" x="-1" y="0"/>
        <delta pt="25" x="-7" y="0"/>
        <delta pt="26" x="0" y="0"/>
        <delta pt="27" x="0" y="0"/>
        <delta pt="28" x="0" y="-39"/>
        <delta pt="29" x="0" y="-35"/>
        <delta pt="30" x="6" y="-26"/>
        <delta pt="31" x="8" y="-19"/>
        <delta pt="32" x="2" y="-19"/>
        <delta pt="33" x="0" y="-19"/>
        <delta pt="34" x="0" y="0"/>
        <delta pt="35" x="1" y="0"/>
        <delta pt="36" x="1" y="22"/>
        <delta pt="37" x="1" y="22"/>
        <delta pt="38" x="5" y="2"/>
        <delta pt="39" x="1" y="2"/>
        <delta pt="40" x="9" y="2"/>
        <delta pt="41" x="6" y="11"/>
        <delta pt="42" x="-1" y="13"/>
        <delta pt="43" x="-1" y="2"/>
        <delta pt="44" x="-1" y="-44"/>
        <delta pt="45" x="-1" y="-38"/>
        <delta pt="46" x="7" y="-26"/>
        <delta pt="47" x="10" y="-19"/>
        <delta pt="48" x="2" y="-19"/>
        <delta pt="49" x="0" y="-19"/>
        <delta pt="50" x="0" y="0"/>
        <delta pt="51" x="0" y="0"/>
        <delta pt="52" x="0" y="0"/>
        <delta pt="53" x="0" y="0"/>
        <delta pt="54" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wdth" value="-1.0"/>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="1" y="0"/>
        <delta pt="1" x="1" y="1"/>
        <delta pt="2" x="0" y="1"/>
        <delta pt="3" x="1" y="1"/>
        <delta pt="4" x="2" y="-6"/>
        <delta pt="5" x="1" y="-15"/>
        <delta pt="6" x="1" y="-18"/>
        <delta pt="7" x="1" y="18"/>
        <delta pt="8" x="1" y="14"/>
        <delta pt="9" x="2" y="5"/>
        <delta pt="10" x="5" y="-1"/>
        <delta pt="11" x="5" y="-1"/>
        <delta pt="12" x="-5" y="-1"/>
        <delta pt="13" x="-5" y="0"/>
        <delta pt="14" x="1" y="0"/>
        <delta pt="15" x="1" y="-33"/>
        <delta pt="16" x="1" y="-25"/>
        <delta pt="17" x="1" y="-11"/>
        <delta pt="18" x="-1" y="0"/>
        <delta pt="19" x="-1" y="4"/>
        <delta pt="20" x="1" y="4"/>
        <delta pt="21" x="0" y="-5"/>
        <delta pt="22" x="-7" y="-6"/>
        <delta pt="23" x="-8" y="-1"/>
        <delta pt="24" x="-1" y="-1"/>
        <delta pt="25" x="-6" y="-1"/>
        <delta pt="26" x="-1" y="3"/>
        <delta pt="27" x="-1" y="12"/>
        <delta pt="28" x="-1" y="-19"/>
        <delta pt="29" x="-1" y="-15"/>
        <delta pt="30" x="-1" y="-5"/>
        <delta pt="31" x="-2" y="1"/>
        <delta pt="32" x="-2" y="1"/>
        <delta pt="33" x="0" y="1"/>
        <delta pt="34" x="0" y="0"/>
        <delta pt="35" x="0" y="0"/>
        <delta pt="36" x="0" y="-16"/>
        <delta pt="37" x="0" y="-2"/>
        <delta pt="38" x="3" y="-12"/>
        <delta pt="39" x="0" y="-12"/>
        <delta pt="40" x="7" y="-12"/>
        <delta pt="41" x="6" y="-1"/>
        <delta pt="42" x="0" y="-2"/>
        <delta pt="43" x="0" y="-19"/>
        <delta pt="44" x="0" y="-20"/>
        <delta pt="45" x="0" y="-15"/>
        <delta pt="46" x="1" y="-6"/>
        <delta pt="47" x="0" y="1"/>
        <delta pt="48" x="0" y="1"/>
        <delta pt="49" x="1" y="1"/>
        <delta pt="50" x="1" y="0"/>
        <delta pt="51" x="0" y="0"/>
        <delta pt="52" x="0" y="0"/>
        <delta pt="53" x="0" y="0"/>
        <delta pt="54" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="-1.0"/>
        <coord axis="wdth" value="-1.0"/>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="-1" y="0"/>
        <delta pt="1" x="-1" y="-1"/>
        <delta pt="2" x="0" y="-1"/>
        <delta pt="3" x="-1" y="-1"/>
        <delta pt="4" x="-2" y="6"/>
        <delta pt="5" x="-1" y="15"/>
        <delta pt="6" x="-1" y="18"/>
        <delta pt="7" x="-1" y="-18"/>
        <delta pt="8" x="-1" y="-14"/>
        <delta pt="9" x="-2" y="-5"/>
        <delta pt="10" x="-5" y="1"/>
        <delta pt="11" x="-5" y="1"/>
        <delta pt="12" x="5" y="1"/>
        <delta pt="13" x="5" y="0"/>
        <delta pt="14" x="-1" y="0"/>
        <delta pt="15" x="-1" y="33"/>
        <delta pt="16" x="-1" y="25"/>
        <delta pt="17" x="-1" y="15"/>
        <delta pt="18" x="1" y="6"/>
        <delta pt="19" x="1" y="0"/>
        <delta pt="20" x="-1" y="0"/>
        <delta pt="21" x="-5" y="4"/>
        <delta pt="22" x="-5" y="4"/>
        <delta pt="23" x="-1" y="1"/>
        <delta pt="24" x="1" y="1"/>
        <delta pt="25" x="6" y="1"/>
        <delta pt="26" x="1" y="-3"/>
        <delta pt="27" x="1" y="-12"/>
        <delta pt="28" x="1" y="19"/>
        <delta pt="29" x="1" y="16"/>
        <delta pt="30" x="1" y="5"/>
        <delta pt="31" x="2" y="-1"/>
        <delta pt="32" x="2" y="-1"/>
        <delta pt="33" x="0" y="-1"/>
        <delta pt="34" x="0" y="0"/>
        <delta pt="35" x="0" y="0"/>
        <delta pt="36" x="0" y="16"/>
        <delta pt="37" x="0" y="2"/>
        <delta pt="38" x="-3" y="12"/>
        <delta pt="39" x="0" y="12"/>
        <delta pt="40" x="-7" y="12"/>
        <delta pt="41" x="-6" y="5"/>
        <delta pt="42" x="0" y="7"/>
        <delta pt="43" x="0" y="19"/>
        <delta pt="44" x="0" y="20"/>
        <delta pt="45" x="0" y="15"/>
        <delta pt="46" x="-1" y="6"/>
        <delta pt="47" x="0" y="-1"/>
        <delta pt="48" x="0" y="-1"/>
        <delta pt="49" x="-1" y="-1"/>
        <delta pt="50" x="-1" y="0"/>
        <delta pt="51" x="0" y="0"/>
        <delta pt="52" x="0" y="0"/>
        <delta pt="53" x="0" y="0"/>
        <delta pt="54" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="1.0"/>
        <coord axis="wdth" value="-1.0"/>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="-1" y="0"/>
        <delta pt="1" x="-1" y="4"/>
        <delta pt="2" x="0" y="4"/>
        <delta pt="3" x="0" y="4"/>
        <delta pt="4" x="0" y="14"/>
        <delta pt="5" x="-1" y="24"/>
        <delta pt="6" x="-1" y="23"/>
        <delta pt="7" x="-1" y="-21"/>
        <delta pt="8" x="-1" y="-21"/>
        <delta pt="9" x="-2" y="-13"/>
        <delta pt="10" x="-5" y="-4"/>
        <delta pt="11" x="-5" y="-4"/>
        <delta pt="12" x="5" y="-4"/>
        <delta pt="13" x="5" y="0"/>
        <delta pt="14" x="-1" y="0"/>
        <delta pt="15" x="-1" y="29"/>
        <delta pt="16" x="-1" y="27"/>
        <delta pt="17" x="0" y="21"/>
        <delta pt="18" x="2" y="20"/>
        <delta pt="19" x="1" y="20"/>
        <delta pt="20" x="0" y="20"/>
        <delta pt="21" x="2" y="19"/>
        <delta pt="22" x="9" y="10"/>
        <delta pt="23" x="9" y="1"/>
        <delta pt="24" x="1" y="1"/>
        <delta pt="25" x="6" y="1"/>
        <delta pt="26" x="1" y="-3"/>
        <delta pt="27" x="1" y="-12"/>
        <delta pt="28" x="1" y="24"/>
        <delta pt="29" x="1" y="23"/>
        <delta pt="30" x="1" y="13"/>
        <delta pt="31" x="2" y="4"/>
        <delta pt="32" x="2" y="4"/>
        <delta pt="33" x="0" y="4"/>
        <delta pt="34" x="0" y="0"/>
        <delta pt="35" x="0" y="0"/>
        <delta pt="36" x="0" y="7"/>
        <delta pt="37" x="0" y="6"/>
        <delta pt="38" x="-2" y="14"/>
        <delta pt="39" x="4" y="14"/>
        <delta pt="40" x="-1" y="14"/>
        <delta pt="41" x="-2" y="12"/>
        <delta pt="42" x="0" y="15"/>
        <delta pt="43" x="0" y="24"/>
        <delta pt="44" x="0" y="25"/>
        <delta pt="45" x="0" y="23"/>
        <delta pt="46" x="-2" y="13"/>
        <delta pt="47" x="-2" y="4"/>
        <delta pt="48" x="0" y="4"/>
        <delta pt="49" x="-1" y="4"/>
        <delta pt="50" x="-1" y="0"/>
        <delta pt="51" x="0" y="0"/>
        <delta pt="52" x="0" y="0"/>
        <delta pt="53" x="0" y="0"/>
        <delta pt="54" x="0" y="0"/>
      </tuple>
    </glyphVariations>
    <glyphVariations glyph="uni006E">
      <tuple>
        <coord axis="wght" value="-1.0"/>
        <delta pt="0" x="10" y="0"/>
        <delta pt="1" x="10" y="-22"/>
        <delta pt="2" x="25" y="-22"/>
        <delta pt="3" x="40" y="-22"/>
        <delta pt="4" x="34" y="-24"/>
        <delta pt="5" x="20" y="-23"/>
        <delta pt="6" x="20" y="-20"/>
        <delta pt="7" x="20" y="16"/>
        <delta pt="8" x="20" y="20"/>
        <delta pt="9" x="34" y="23"/>
        <delta pt="10" x="41" y="22"/>
        <delta pt="11" x="33" y="22"/>
        <delta pt="12" x="10" y="22"/>
        <delta pt="13" x="10" y="0"/>
        <delta pt="14" x="-33" y="0"/>
        <delta pt="15" x="-43" y="-6"/>
        <delta pt="16" x="-44" y="-6"/>
        <delta pt="17" x="-45" y="-8"/>
        <delta pt="18" x="-44" y="-7"/>
        <delta pt="19" x="-41" y="-4"/>
        <delta pt="20" x="-36" y="-4"/>
        <delta pt="21" x="-29" y="-4"/>
        <delta pt="22" x="-39" y="-2"/>
        <delta pt="23" x="-39" y="7"/>
        <delta pt="24" x="-39" y="-20"/>
        <delta pt="25" x="-39" y="-23"/>
        <delta pt="26" x="-50" y="-24"/>
        <delta pt="27" x="-52" y="-22"/>
        <delta pt="28" x="-37" y="-22"/>
        <delta pt="29" x="-27" y="-22"/>
        <delta pt="30" x="-27" y="0"/>
        <delta pt="31" x="27" y="0"/>
        <delta pt="32" x="27" y="20"/>
        <delta pt="33" x="27" y="22"/>
        <delta pt="34" x="15" y="35"/>
        <delta pt="35" x="0" y="35"/>
        <delta pt="36" x="-20" y="35"/>
        <delta pt="37" x="-40" y="26"/>
        <delta pt="38" x="-46" y="15"/>
        <delta pt="39" x="-46" y="14"/>
        <delta pt="40" x="-46" y="-15"/>
        <delta pt="41" x="-46" y="-21"/>
        <delta pt="42" x="-60" y="-23"/>
        <delta pt="43" x="-64" y="-22"/>
        <delta pt="44" x="-49" y="-22"/>
        <delta pt="45" x="-38" y="-22"/>
        <delta pt="46" x="-38" y="0"/>
        <delta pt="47" x="0" y="0"/>
        <delta pt="48" x="-28" y="0"/>
        <delta pt="49" x="0" y="-4"/>
        <delta pt="50" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="1.0"/>
        <delta pt="0" x="-14" y="0"/>
        <delta pt="1" x="-14" y="19"/>
        <delta pt="2" x="-18" y="19"/>
        <delta pt="3" x="-18" y="19"/>
        <delta pt="4" x="-25" y="18"/>
        <delta pt="5" x="-31" y="17"/>
        <delta pt="6" x="-31" y="14"/>
        <delta pt="7" x="-31" y="-14"/>
        <delta pt="8" x="-31" y="-17"/>
        <delta pt="9" x="-23" y="-19"/>
        <delta pt="10" x="-15" y="-19"/>
        <delta pt="11" x="-15" y="-19"/>
        <delta pt="12" x="-14" y="-19"/>
        <delta pt="13" x="-14" y="0"/>
        <delta pt="14" x="70" y="0"/>
        <delta pt="15" x="70" y="17"/>
        <delta pt="16" x="70" y="17"/>
        <delta pt="17" x="62" y="0"/>
        <delta pt="18" x="51" y="-3"/>
        <delta pt="19" x="53" y="5"/>
        <delta pt="20" x="65" y="5"/>
        <delta pt="21" x="66" y="5"/>
        <delta pt="22" x="59" y="7"/>
        <delta pt="23" x="59" y="10"/>
        <delta pt="24" x="59" y="17"/>
        <delta pt="25" x="59" y="18"/>
        <delta pt="26" x="51" y="19"/>
        <delta pt="27" x="42" y="19"/>
        <delta pt="28" x="43" y="19"/>
        <delta pt="29" x="42" y="19"/>
        <delta pt="30" x="42" y="0"/>
        <delta pt="31" x="-41" y="0"/>
        <delta pt="32" x="-41" y="-28"/>
        <delta pt="33" x="-41" y="-29"/>
        <delta pt="34" x="-14" y="-31"/>
        <delta pt="35" x="15" y="-31"/>
        <delta pt="36" x="34" y="-31"/>
        <delta pt="37" x="59" y="-28"/>
        <delta pt="38" x="70" y="-23"/>
        <delta pt="39" x="70" y="-19"/>
        <delta pt="40" x="70" y="16"/>
        <delta pt="41" x="70" y="18"/>
        <delta pt="42" x="61" y="19"/>
        <delta pt="43" x="53" y="19"/>
        <delta pt="44" x="53" y="19"/>
        <delta pt="45" x="52" y="19"/>
        <delta pt="46" x="52" y="0"/>
        <delta pt="47" x="0" y="0"/>
        <delta pt="48" x="38" y="0"/>
        <delta pt="49" x="0" y="5"/>
        <delta pt="50" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wdth" value="-1.0"/>
        <delta pt="0" x="-8" y="0"/>
        <delta pt="1" x="-8" y="-1"/>
        <delta pt="2" x="-9" y="-1"/>
        <delta pt="3" x="-13" y="-1"/>
        <delta pt="4" x="-23" y="-1"/>
        <delta pt="5" x="-28" y="0"/>
        <delta pt="6" x="-28" y="-1"/>
        <delta pt="7" x="-28" y="1"/>
        <delta pt="8" x="-28" y="0"/>
        <delta pt="9" x="-22" y="1"/>
        <delta pt="10" x="-14" y="1"/>
        <delta pt="11" x="-9" y="1"/>
        <delta pt="12" x="-9" y="1"/>
        <delta pt="13" x="-9" y="0"/>
        <delta pt="14" x="-32" y="0"/>
        <delta pt="15" x="-35" y="-1"/>
        <delta pt="16" x="-36" y="-1"/>
        <delta pt="17" x="-44" y="-4"/>
        <delta pt="18" x="-55" y="-4"/>
        <delta pt="19" x="-66" y="0"/>
        <delta pt="20" x="-69" y="0"/>
        <delta pt="21" x="-85" y="0"/>
        <delta pt="22" x="-106" y="-1"/>
        <delta pt="23" x="-106" y="-1"/>
        <delta pt="24" x="-106" y="-1"/>
        <delta pt="25" x="-106" y="0"/>
        <delta pt="26" x="-111" y="-1"/>
        <delta pt="27" x="-118" y="-1"/>
        <delta pt="28" x="-123" y="-1"/>
        <delta pt="29" x="-124" y="-1"/>
        <delta pt="30" x="-124" y="0"/>
        <delta pt="31" x="-98" y="0"/>
        <delta pt="32" x="-98" y="2"/>
        <delta pt="33" x="-98" y="1"/>
        <delta pt="34" x="-83" y="3"/>
        <delta pt="35" x="-64" y="3"/>
        <delta pt="36" x="-54" y="3"/>
        <delta pt="37" x="-42" y="1"/>
        <delta pt="38" x="-36" y="0"/>
        <delta pt="39" x="-36" y="1"/>
        <delta pt="40" x="-36" y="-1"/>
        <delta pt="41" x="-36" y="-2"/>
        <delta pt="42" x="-43" y="-1"/>
        <delta pt="43" x="-52" y="-1"/>
        <delta pt="44" x="-56" y="-1"/>
        <delta pt="45" x="-56" y="-1"/>
        <delta pt="46" x="-56" y="0"/>
        <delta pt="47" x="0" y="0"/>
        <delta pt="48" x="-130" y="0"/>
        <delta pt="49" x="0" y="0"/>
        <delta pt="50" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="0" y="-32"/>
        <delta pt="2" x="0" y="-32"/>
        <delta pt="3" x="9" y="-32"/>
        <delta pt="4" x="7" y="-25"/>
        <delta pt="5" x="0" y="-15"/>
        <delta pt="6" x="0" y="-12"/>
        <delta pt="7" x="0" y="10"/>
        <delta pt="8" x="0" y="14"/>
        <delta pt="9" x="7" y="24"/>
        <delta pt="10" x="8" y="32"/>
        <delta pt="11" x="0" y="32"/>
        <delta pt="12" x="0" y="32"/>
        <delta pt="13" x="0" y="0"/>
        <delta pt="14" x="16" y="0"/>
        <delta pt="15" x="3" y="-13"/>
        <delta pt="16" x="0" y="-13"/>
        <delta pt="17" x="-8" y="-4"/>
        <delta pt="18" x="-4" y="1"/>
        <delta pt="19" x="-1" y="0"/>
        <delta pt="20" x="-8" y="0"/>
        <delta pt="21" x="2" y="0"/>
        <delta pt="22" x="0" y="0"/>
        <delta pt="23" x="0" y="0"/>
        <delta pt="24" x="0" y="-12"/>
        <delta pt="25" x="0" y="-15"/>
        <delta pt="26" x="-5" y="-25"/>
        <delta pt="27" x="-6" y="-32"/>
        <delta pt="28" x="0" y="-32"/>
        <delta pt="29" x="0" y="-32"/>
        <delta pt="30" x="0" y="0"/>
        <delta pt="31" x="0" y="0"/>
        <delta pt="32" x="0" y="39"/>
        <delta pt="33" x="0" y="39"/>
        <delta pt="34" x="0" y="49"/>
        <delta pt="35" x="3" y="49"/>
        <delta pt="36" x="1" y="49"/>
        <delta pt="37" x="0" y="44"/>
        <delta pt="38" x="0" y="39"/>
        <delta pt="39" x="0" y="39"/>
        <delta pt="40" x="0" y="-7"/>
        <delta pt="41" x="0" y="-13"/>
        <delta pt="42" x="-7" y="-24"/>
        <delta pt="43" x="-8" y="-32"/>
        <delta pt="44" x="0" y="-32"/>
        <delta pt="45" x="0" y="-32"/>
        <delta pt="46" x="0" y="0"/>
        <delta pt="47" x="0" y="0"/>
        <delta pt="48" x="0" y="0"/>
        <delta pt="49" x="0" y="0"/>
        <delta pt="50" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="-1.0"/>
        <coord axis="wdth" value="-1.0"/>
        <delta pt="0" x="-2" y="0"/>
        <delta pt="1" x="-2" y="1"/>
        <delta pt="2" x="-16" y="1"/>
        <delta pt="3" x="-19" y="1"/>
        <delta pt="4" x="-12" y="2"/>
        <delta pt="5" x="-7" y="2"/>
        <delta pt="6" x="-7" y="3"/>
        <delta pt="7" x="-7" y="-2"/>
        <delta pt="8" x="-7" y="0"/>
        <delta pt="9" x="-13" y="-1"/>
        <delta pt="10" x="-21" y="-1"/>
        <delta pt="11" x="-26" y="-1"/>
        <delta pt="12" x="-3" y="-1"/>
        <delta pt="13" x="-3" y="0"/>
        <delta pt="14" x="-3" y="0"/>
        <delta pt="15" x="0" y="11"/>
        <delta pt="16" x="-1" y="11"/>
        <delta pt="17" x="-1" y="4"/>
        <delta pt="18" x="-6" y="0"/>
        <delta pt="19" x="-10" y="0"/>
        <delta pt="20" x="-12" y="0"/>
        <delta pt="21" x="-14" y="0"/>
        <delta pt="22" x="-11" y="5"/>
        <delta pt="23" x="-11" y="7"/>
        <delta pt="24" x="-11" y="3"/>
        <delta pt="25" x="-11" y="2"/>
        <delta pt="26" x="-6" y="2"/>
        <delta pt="27" x="-4" y="1"/>
        <delta pt="28" x="-7" y="1"/>
        <delta pt="29" x="-17" y="1"/>
        <delta pt="30" x="-17" y="0"/>
        <delta pt="31" x="-19" y="0"/>
        <delta pt="32" x="-19" y="-3"/>
        <delta pt="33" x="-19" y="1"/>
        <delta pt="34" x="-18" y="-3"/>
        <delta pt="35" x="-15" y="-3"/>
        <delta pt="36" x="6" y="-3"/>
        <delta pt="37" x="11" y="17"/>
        <delta pt="38" x="1" y="22"/>
        <delta pt="39" x="1" y="-2"/>
        <delta pt="40" x="1" y="3"/>
        <delta pt="41" x="1" y="4"/>
        <delta pt="42" x="8" y="2"/>
        <delta pt="43" x="13" y="1"/>
        <delta pt="44" x="10" y="1"/>
        <delta pt="45" x="0" y="1"/>
        <delta pt="46" x="0" y="0"/>
        <delta pt="47" x="0" y="0"/>
        <delta pt="48" x="-14" y="0"/>
        <delta pt="49" x="0" y="0"/>
        <delta pt="50" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="1.0"/>
        <coord axis="wdth" value="-1.0"/>
        <delta pt="1" x="5" y="-4"/>
        <delta pt="3" x="7" y="-4"/>
        <delta pt="5" x="13" y="-5"/>
        <delta pt="6" x="13" y="-3"/>
        <delta pt="7" x="13" y="3"/>
        <delta pt="8" x="13" y="5"/>
        <delta pt="9" x="9" y="4"/>
        <delta pt="10" x="6" y="4"/>
        <delta pt="13" x="5" y="0"/>
        <delta pt="14" x="-12" y="0"/>
        <delta pt="16" x="-11" y="-4"/>
        <delta pt="17" x="-6" y="3"/>
        <delta pt="18" x="0" y="3"/>
        <delta pt="19" x="2" y="-1"/>
        <delta pt="20" x="-3" y="-1"/>
        <delta pt="21" x="0" y="-1"/>
        <delta pt="23" x="7" y="-2"/>
        <delta pt="27" x="14" y="-4"/>
        <delta pt="28" x="14" y="-4"/>
        <delta pt="30" x="15" y="0"/>
        <delta pt="33" x="31" y="7"/>
        <delta pt="35" x="6" y="6"/>
        <delta pt="36" x="1" y="6"/>
        <delta pt="38" x="-11" y="6"/>
        <delta pt="40" x="-11" y="-3"/>
        <delta pt="42" x="-6" y="-4"/>
        <delta pt="43" x="-1" y="-4"/>
        <delta pt="44" x="-1" y="-4"/>
        <delta pt="46" x="-2" y="0"/>
        <delta pt="48" x="17" y="0"/>
        <delta pt="49" x="0" y="-1"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="-1.0"/>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="0" y="22"/>
        <delta pt="2" x="0" y="22"/>
        <delta pt="3" x="-9" y="22"/>
        <delta pt="4" x="-7" y="15"/>
        <delta pt="5" x="0" y="5"/>
        <delta pt="6" x="0" y="2"/>
        <delta pt="7" x="0" y="0"/>
        <delta pt="8" x="0" y="-4"/>
        <delta pt="9" x="-7" y="-14"/>
        <delta pt="10" x="-8" y="-22"/>
        <delta pt="11" x="0" y="-22"/>
        <delta pt="12" x="0" y="-22"/>
        <delta pt="13" x="0" y="0"/>
        <delta pt="14" x="-12" y="0"/>
        <delta pt="15" x="-2" y="-9"/>
        <delta pt="16" x="-1" y="-9"/>
        <delta pt="17" x="-1" y="-16"/>
        <delta pt="18" x="-5" y="-11"/>
        <delta pt="19" x="-1" y="0"/>
        <delta pt="20" x="8" y="0"/>
        <delta pt="21" x="-2" y="0"/>
        <delta pt="22" x="0" y="0"/>
        <delta pt="23" x="0" y="0"/>
        <delta pt="24" x="0" y="2"/>
        <delta pt="25" x="0" y="5"/>
        <delta pt="26" x="5" y="15"/>
        <delta pt="27" x="6" y="22"/>
        <delta pt="28" x="0" y="22"/>
        <delta pt="29" x="0" y="22"/>
        <delta pt="30" x="0" y="0"/>
        <delta pt="31" x="0" y="0"/>
        <delta pt="32" x="0" y="-29"/>
        <delta pt="33" x="0" y="-29"/>
        <delta pt="34" x="0" y="-39"/>
        <delta pt="35" x="-3" y="-39"/>
        <delta pt="36" x="-1" y="-39"/>
        <delta pt="37" x="0" y="-34"/>
        <delta pt="38" x="0" y="-29"/>
        <delta pt="39" x="0" y="-29"/>
        <delta pt="40" x="0" y="-3"/>
        <delta pt="41" x="0" y="3"/>
        <delta pt="42" x="7" y="14"/>
        <delta pt="43" x="8" y="22"/>
        <delta pt="44" x="0" y="22"/>
        <delta pt="45" x="0" y="22"/>
        <delta pt="46" x="0" y="0"/>
        <delta pt="47" x="0" y="0"/>
        <delta pt="48" x="0" y="0"/>
        <delta pt="49" x="0" y="0"/>
        <delta pt="50" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="1.0"/>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="0" y="-19"/>
        <delta pt="2" x="0" y="-19"/>
        <delta pt="3" x="-9" y="-19"/>
        <delta pt="4" x="-7" y="-26"/>
        <delta pt="5" x="0" y="-36"/>
        <delta pt="6" x="0" y="-39"/>
        <delta pt="7" x="0" y="41"/>
        <delta pt="8" x="0" y="37"/>
        <delta pt="9" x="-7" y="27"/>
        <delta pt="10" x="-8" y="19"/>
        <delta pt="11" x="0" y="19"/>
        <delta pt="12" x="0" y="19"/>
        <delta pt="13" x="0" y="0"/>
        <delta pt="14" x="-1" y="0"/>
        <delta pt="15" x="-1" y="-20"/>
        <delta pt="16" x="-1" y="-20"/>
        <delta pt="17" x="2" y="-12"/>
        <delta pt="18" x="0" y="-4"/>
        <delta pt="19" x="1" y="0"/>
        <delta pt="20" x="8" y="0"/>
        <delta pt="21" x="-2" y="0"/>
        <delta pt="22" x="0" y="0"/>
        <delta pt="23" x="0" y="0"/>
        <delta pt="24" x="0" y="-39"/>
        <delta pt="25" x="0" y="-35"/>
        <delta pt="26" x="5" y="-26"/>
        <delta pt="27" x="6" y="-19"/>
        <delta pt="28" x="0" y="-19"/>
        <delta pt="29" x="0" y="-19"/>
        <delta pt="30" x="0" y="0"/>
        <delta pt="31" x="0" y="0"/>
        <delta pt="32" x="0" y="22"/>
        <delta pt="33" x="0" y="22"/>
        <delta pt="34" x="0" y="2"/>
        <delta pt="35" x="-3" y="2"/>
        <delta pt="36" x="-1" y="2"/>
        <delta pt="37" x="0" y="2"/>
        <delta pt="38" x="0" y="3"/>
        <delta pt="39" x="0" y="2"/>
        <delta pt="40" x="0" y="-44"/>
        <delta pt="41" x="0" y="-38"/>
        <delta pt="42" x="7" y="-26"/>
        <delta pt="43" x="8" y="-19"/>
        <delta pt="44" x="0" y="-19"/>
        <delta pt="45" x="0" y="-19"/>
        <delta pt="46" x="0" y="0"/>
        <delta pt="47" x="0" y="0"/>
        <delta pt="48" x="0" y="0"/>
        <delta pt="49" x="0" y="0"/>
        <delta pt="50" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wdth" value="-1.0"/>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="1" y="0"/>
        <delta pt="1" x="1" y="1"/>
        <delta pt="2" x="0" y="1"/>
        <delta pt="3" x="0" y="1"/>
        <delta pt="4" x="1" y="-6"/>
        <delta pt="5" x="0" y="-15"/>
        <delta pt="6" x="0" y="-18"/>
        <delta pt="7" x="0" y="19"/>
        <delta pt="8" x="0" y="16"/>
        <delta pt="9" x="0" y="6"/>
        <delta pt="10" x="1" y="-1"/>
        <delta pt="11" x="0" y="-1"/>
        <delta pt="12" x="0" y="-1"/>
        <delta pt="13" x="0" y="0"/>
        <delta pt="14" x="-4" y="0"/>
        <delta pt="15" x="-1" y="1"/>
        <delta pt="16" x="0" y="1"/>
        <delta pt="17" x="4" y="-11"/>
        <delta pt="18" x="-5" y="-10"/>
        <delta pt="19" x="-4" y="-1"/>
        <delta pt="20" x="8" y="-1"/>
        <delta pt="21" x="3" y="-1"/>
        <delta pt="22" x="0" y="5"/>
        <delta pt="23" x="0" y="11"/>
        <delta pt="24" x="0" y="-18"/>
        <delta pt="25" x="0" y="-15"/>
        <delta pt="26" x="0" y="-5"/>
        <delta pt="27" x="-2" y="1"/>
        <delta pt="28" x="0" y="1"/>
        <delta pt="29" x="0" y="1"/>
        <delta pt="30" x="0" y="0"/>
        <delta pt="31" x="0" y="0"/>
        <delta pt="32" x="0" y="-16"/>
        <delta pt="33" x="0" y="-3"/>
        <delta pt="34" x="1" y="-13"/>
        <delta pt="35" x="-1" y="-13"/>
        <delta pt="36" x="9" y="-13"/>
        <delta pt="37" x="8" y="2"/>
        <delta pt="38" x="0" y="2"/>
        <delta pt="39" x="0" y="-19"/>
        <delta pt="40" x="0" y="-20"/>
        <delta pt="41" x="0" y="-15"/>
        <delta pt="42" x="1" y="-6"/>
        <delta pt="43" x="0" y="1"/>
        <delta pt="44" x="0" y="1"/>
        <delta pt="45" x="0" y="1"/>
        <delta pt="46" x="0" y="0"/>
        <delta pt="47" x="0" y="0"/>
        <delta pt="48" x="0" y="0"/>
        <delta pt="49" x="0" y="-1"/>
        <delta pt="50" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="-1.0"/>
        <coord axis="wdth" value="-1.0"/>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="-1" y="0"/>
        <delta pt="1" x="-1" y="-1"/>
        <delta pt="2" x="0" y="-1"/>
        <delta pt="3" x="0" y="-1"/>
        <delta pt="4" x="-1" y="6"/>
        <delta pt="5" x="0" y="15"/>
        <delta pt="6" x="0" y="18"/>
        <delta pt="7" x="0" y="-19"/>
        <delta pt="8" x="0" y="-16"/>
        <delta pt="9" x="0" y="-6"/>
        <delta pt="10" x="-1" y="1"/>
        <delta pt="11" x="0" y="1"/>
        <delta pt="12" x="0" y="1"/>
        <delta pt="13" x="0" y="0"/>
        <delta pt="14" x="3" y="0"/>
        <delta pt="15" x="0" y="-7"/>
        <delta pt="16" x="1" y="-7"/>
        <delta pt="17" x="2" y="11"/>
        <delta pt="18" x="11" y="13"/>
        <delta pt="19" x="7" y="1"/>
        <delta pt="20" x="-7" y="1"/>
        <delta pt="21" x="-3" y="1"/>
        <delta pt="22" x="0" y="-5"/>
        <delta pt="23" x="0" y="-11"/>
        <delta pt="24" x="0" y="18"/>
        <delta pt="25" x="0" y="15"/>
        <delta pt="26" x="0" y="5"/>
        <delta pt="27" x="2" y="-1"/>
        <delta pt="28" x="0" y="-1"/>
        <delta pt="29" x="0" y="-1"/>
        <delta pt="30" x="0" y="0"/>
        <delta pt="31" x="0" y="0"/>
        <delta pt="32" x="0" y="6"/>
        <delta pt="33" x="0" y="0"/>
        <delta pt="34" x="-1" y="13"/>
        <delta pt="35" x="0" y="13"/>
        <delta pt="36" x="-9" y="13"/>
        <delta pt="37" x="-8" y="-3"/>
        <delta pt="38" x="0" y="-7"/>
        <delta pt="39" x="0" y="9"/>
        <delta pt="40" x="0" y="20"/>
        <delta pt="41" x="0" y="15"/>
        <delta pt="42" x="-1" y="6"/>
        <delta pt="43" x="0" y="-1"/>
        <delta pt="44" x="0" y="-1"/>
        <delta pt="45" x="0" y="-1"/>
        <delta pt="46" x="0" y="0"/>
        <delta pt="47" x="0" y="0"/>
        <delta pt="48" x="0" y="0"/>
        <delta pt="49" x="0" y="1"/>
        <delta pt="50" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="1.0"/>
        <coord axis="wdth" value="-1.0"/>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="-1" y="0"/>
        <delta pt="1" x="-1" y="4"/>
        <delta pt="2" x="0" y="4"/>
        <delta pt="3" x="2" y="4"/>
        <delta pt="4" x="1" y="14"/>
        <delta pt="5" x="0" y="24"/>
        <delta pt="6" x="0" y="23"/>
        <delta pt="7" x="0" y="-24"/>
        <delta pt="8" x="0" y="-25"/>
        <delta pt="9" x="2" y="-14"/>
        <delta pt="10" x="1" y="-4"/>
        <delta pt="11" x="0" y="-4"/>
        <delta pt="12" x="0" y="-4"/>
        <delta pt="13" x="0" y="0"/>
        <delta pt="14" x="2" y="0"/>
        <delta pt="15" x="1" y="22"/>
        <delta pt="16" x="1" y="22"/>
        <delta pt="17" x="0" y="22"/>
        <delta pt="18" x="7" y="12"/>
        <delta pt="19" x="4" y="1"/>
        <delta pt="20" x="-8" y="1"/>
        <delta pt="21" x="-3" y="1"/>
        <delta pt="22" x="0" y="-5"/>
        <delta pt="23" x="0" y="-11"/>
        <delta pt="24" x="0" y="23"/>
        <delta pt="25" x="0" y="23"/>
        <delta pt="26" x="0" y="13"/>
        <delta pt="27" x="2" y="4"/>
        <delta pt="28" x="0" y="4"/>
        <delta pt="29" x="0" y="4"/>
        <delta pt="30" x="0" y="0"/>
        <delta pt="31" x="0" y="0"/>
        <delta pt="32" x="0" y="7"/>
        <delta pt="33" x="0" y="7"/>
        <delta pt="34" x="0" y="14"/>
        <delta pt="35" x="6" y="14"/>
        <delta pt="36" x="-2" y="14"/>
        <delta pt="37" x="-3" y="12"/>
        <delta pt="38" x="0" y="14"/>
        <delta pt="39" x="0" y="24"/>
        <delta pt="40" x="0" y="25"/>
        <delta pt="41" x="0" y="23"/>
        <delta pt="42" x="-2" y="13"/>
        <delta pt="43" x="-2" y="4"/>
        <delta pt="44" x="0" y="4"/>
        <delta pt="45" x="0" y="4"/>
        <delta pt="46" x="0" y="0"/>
        <delta pt="47" x="0" y="0"/>
        <delta pt="48" x="0" y="0"/>
        <delta pt="49" x="0" y="1"/>
        <delta pt="50" x="0" y="0"/>
      </tuple>
    </glyphVariations>
    <glyphVariations glyph="uni006F">
      <tuple>
        <coord axis="wght" value="-1.0"/>
        <delta pt="0" x="-22" y="0"/>
        <delta pt="1" x="-7" y="0"/>
        <delta pt="2" x="10" y="-2"/>
        <delta pt="3" x="10" y="-2"/>
        <delta pt="4" x="10" y="-2"/>
        <delta pt="5" x="-5" y="-4"/>
        <delta pt="6" x="-20" y="-4"/>
        <delta pt="7" x="-34" y="-4"/>
        <delta pt="8" x="-56" y="2"/>
        <delta pt="9" x="-56" y="-2"/>
        <delta pt="10" x="-56" y="-2"/>
        <delta pt="11" x="-38" y="0"/>
        <delta pt="12" x="-24" y="-27"/>
        <delta pt="13" x="-10" y="-27"/>
        <delta pt="14" x="6" y="-15"/>
        <delta pt="15" x="13" y="-3"/>
        <delta pt="16" x="13" y="-2"/>
        <delta pt="17" x="13" y="8"/>
        <delta pt="18" x="4" y="20"/>
        <delta pt="19" x="-10" y="24"/>
        <delta pt="20" x="-18" y="24"/>
        <delta pt="21" x="-31" y="24"/>
        <delta pt="22" x="-49" y="18"/>
        <delta pt="23" x="-59" y="6"/>
        <delta pt="24" x="-59" y="-2"/>
        <delta pt="25" x="-59" y="-6"/>
        <delta pt="26" x="-50" y="-18"/>
        <delta pt="27" x="-33" y="-27"/>
        <delta pt="28" x="0" y="0"/>
        <delta pt="29" x="-46" y="0"/>
        <delta pt="30" x="0" y="-4"/>
        <delta pt="31" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="1.0"/>
        <delta pt="2" x="-14" y="2"/>
        <delta pt="3" x="-14" y="2"/>
        <delta pt="4" x="-14" y="3"/>
        <delta pt="7" x="52" y="5"/>
        <delta pt="8" x="76" y="3"/>
        <delta pt="9" x="76" y="2"/>
        <delta pt="10" x="76" y="2"/>
        <delta pt="11" x="54" y="0"/>
        <delta pt="13" x="11" y="19"/>
        <delta pt="14" x="-13" y="16"/>
        <delta pt="17" x="-24" y="-4"/>
        <delta pt="21" x="51" y="-14"/>
        <delta pt="23" x="87" y="-4"/>
        <delta pt="26" x="75" y="16"/>
        <delta pt="29" x="63" y="0"/>
        <delta pt="30" x="0" y="5"/>
      </tuple>
      <tuple>
        <coord axis="wdth" value="-1.0"/>
        <delta pt="4" x="-13" y="0"/>
        <delta pt="6" x="-56" y="0"/>
        <delta pt="7" x="-77" y="0"/>
        <delta pt="10" x="-100" y="0"/>
        <delta pt="11" x="-77" y="0"/>
        <delta pt="13" x="-69" y="-1"/>
        <delta pt="17" x="-92" y="0"/>
        <delta pt="18" x="-84" y="1"/>
        <delta pt="22" x="-27" y="1"/>
        <delta pt="24" x="-21" y="0"/>
        <delta pt="29" x="-113" y="0"/>
      </tuple>
      <tuple>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="0" y="0"/>
        <delta pt="2" x="0" y="0"/>
        <delta pt="3" x="0" y="0"/>
        <delta pt="4" x="0" y="0"/>
        <delta pt="5" x="0" y="0"/>
        <delta pt="6" x="0" y="0"/>
        <delta pt="7" x="0" y="0"/>
        <delta pt="8" x="0" y="0"/>
        <delta pt="9" x="0" y="0"/>
        <delta pt="10" x="0" y="0"/>
        <delta pt="11" x="0" y="0"/>
        <delta pt="12" x="0" y="-42"/>
        <delta pt="13" x="-1" y="-42"/>
        <delta pt="14" x="-1" y="-39"/>
        <delta pt="15" x="0" y="-22"/>
        <delta pt="16" x="0" y="0"/>
        <delta pt="17" x="0" y="21"/>
        <delta pt="18" x="0" y="39"/>
        <delta pt="19" x="0" y="43"/>
        <delta pt="20" x="0" y="43"/>
        <delta pt="21" x="1" y="43"/>
        <delta pt="22" x="1" y="39"/>
        <delta pt="23" x="0" y="21"/>
        <delta pt="24" x="0" y="0"/>
        <delta pt="25" x="0" y="-22"/>
        <delta pt="26" x="0" y="-39"/>
        <delta pt="27" x="1" y="-42"/>
        <delta pt="28" x="0" y="0"/>
        <delta pt="29" x="0" y="0"/>
        <delta pt="30" x="0" y="0"/>
        <delta pt="31" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="-1.0"/>
        <coord axis="wdth" value="-1.0"/>
        <delta pt="0" x="-4" y="0"/>
        <delta pt="1" x="-6" y="0"/>
        <delta pt="2" x="-4" y="-2"/>
        <delta pt="3" x="-4" y="0"/>
        <delta pt="4" x="-4" y="-2"/>
        <delta pt="5" x="-10" y="0"/>
        <delta pt="6" x="-7" y="0"/>
        <delta pt="7" x="0" y="0"/>
        <delta pt="8" x="-4" y="-7"/>
        <delta pt="9" x="-4" y="0"/>
        <delta pt="10" x="-4" y="-4"/>
        <delta pt="11" x="-5" y="0"/>
        <delta pt="12" x="-3" y="1"/>
        <delta pt="13" x="-6" y="1"/>
        <delta pt="14" x="-10" y="-4"/>
        <delta pt="15" x="-12" y="-6"/>
        <delta pt="16" x="-12" y="0"/>
        <delta pt="17" x="-12" y="-2"/>
        <delta pt="18" x="-9" y="-2"/>
        <delta pt="19" x="-7" y="-1"/>
        <delta pt="20" x="-9" y="-1"/>
        <delta pt="21" x="-6" y="-1"/>
        <delta pt="22" x="-1" y="0"/>
        <delta pt="23" x="4" y="0"/>
        <delta pt="24" x="4" y="0"/>
        <delta pt="25" x="4" y="-4"/>
        <delta pt="26" x="3" y="-2"/>
        <delta pt="27" x="-1" y="1"/>
        <delta pt="28" x="0" y="0"/>
        <delta pt="29" x="-8" y="0"/>
        <delta pt="30" x="0" y="0"/>
        <delta pt="31" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="1.0"/>
        <coord axis="wdth" value="-1.0"/>
        <delta pt="2" x="6" y="-1"/>
        <delta pt="6" x="3" y="-1"/>
        <delta pt="10" x="1" y="-1"/>
        <delta pt="11" x="1" y="0"/>
        <delta pt="14" x="20" y="-3"/>
        <delta pt="17" x="25" y="0"/>
        <delta pt="19" x="10" y="3"/>
        <delta pt="21" x="-5" y="3"/>
        <delta pt="22" x="-15" y="2"/>
        <delta pt="25" x="-18" y="-2"/>
        <delta pt="26" x="-13" y="-3"/>
        <delta pt="27" x="-5" y="-4"/>
        <delta pt="29" x="6" y="0"/>
        <delta pt="30" x="0" y="-1"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="-1.0"/>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="0" y="0"/>
        <delta pt="2" x="0" y="0"/>
        <delta pt="3" x="0" y="0"/>
        <delta pt="4" x="0" y="0"/>
        <delta pt="5" x="0" y="0"/>
        <delta pt="6" x="0" y="0"/>
        <delta pt="7" x="0" y="0"/>
        <delta pt="8" x="0" y="0"/>
        <delta pt="9" x="0" y="0"/>
        <delta pt="10" x="0" y="0"/>
        <delta pt="11" x="0" y="0"/>
        <delta pt="12" x="0" y="27"/>
        <delta pt="13" x="1" y="27"/>
        <delta pt="14" x="1" y="25"/>
        <delta pt="15" x="0" y="15"/>
        <delta pt="16" x="0" y="0"/>
        <delta pt="17" x="0" y="-13"/>
        <delta pt="18" x="0" y="-25"/>
        <delta pt="19" x="0" y="-28"/>
        <delta pt="20" x="0" y="-28"/>
        <delta pt="21" x="-1" y="-28"/>
        <delta pt="22" x="-1" y="-25"/>
        <delta pt="23" x="0" y="-13"/>
        <delta pt="24" x="0" y="0"/>
        <delta pt="25" x="0" y="14"/>
        <delta pt="26" x="0" y="25"/>
        <delta pt="27" x="-1" y="27"/>
        <delta pt="28" x="0" y="0"/>
        <delta pt="29" x="0" y="0"/>
        <delta pt="30" x="0" y="0"/>
        <delta pt="31" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="1.0"/>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="0" y="0"/>
        <delta pt="2" x="0" y="0"/>
        <delta pt="3" x="0" y="0"/>
        <delta pt="4" x="0" y="0"/>
        <delta pt="5" x="0" y="0"/>
        <delta pt="6" x="0" y="0"/>
        <delta pt="7" x="0" y="0"/>
        <delta pt="8" x="0" y="0"/>
        <delta pt="9" x="0" y="0"/>
        <delta pt="10" x="0" y="0"/>
        <delta pt="11" x="0" y="0"/>
        <delta pt="12" x="0" y="-19"/>
        <delta pt="13" x="2" y="-19"/>
        <delta pt="14" x="1" y="-21"/>
        <delta pt="15" x="0" y="-12"/>
        <delta pt="16" x="0" y="0"/>
        <delta pt="17" x="0" y="13"/>
        <delta pt="18" x="1" y="20"/>
        <delta pt="19" x="1" y="19"/>
        <delta pt="20" x="0" y="19"/>
        <delta pt="21" x="-2" y="19"/>
        <delta pt="22" x="-1" y="20"/>
        <delta pt="23" x="0" y="13"/>
        <delta pt="24" x="0" y="0"/>
        <delta pt="25" x="0" y="-12"/>
        <delta pt="26" x="0" y="-21"/>
        <delta pt="27" x="-2" y="-19"/>
        <delta pt="28" x="0" y="0"/>
        <delta pt="29" x="0" y="0"/>
        <delta pt="30" x="0" y="0"/>
        <delta pt="31" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wdth" value="-1.0"/>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="-1" y="0"/>
        <delta pt="2" x="0" y="-2"/>
        <delta pt="3" x="0" y="-1"/>
        <delta pt="4" x="0" y="-1"/>
        <delta pt="5" x="-3" y="-1"/>
        <delta pt="6" x="-1" y="-1"/>
        <delta pt="7" x="4" y="-1"/>
        <delta pt="8" x="-1" y="-2"/>
        <delta pt="9" x="-1" y="-1"/>
        <delta pt="10" x="-1" y="-3"/>
        <delta pt="11" x="0" y="0"/>
        <delta pt="12" x="-1" y="1"/>
        <delta pt="13" x="1" y="1"/>
        <delta pt="14" x="2" y="0"/>
        <delta pt="15" x="1" y="-1"/>
        <delta pt="16" x="1" y="-1"/>
        <delta pt="17" x="1" y="1"/>
        <delta pt="18" x="1" y="1"/>
        <delta pt="19" x="0" y="-2"/>
        <delta pt="20" x="-1" y="-2"/>
        <delta pt="21" x="-2" y="-2"/>
        <delta pt="22" x="-3" y="1"/>
        <delta pt="23" x="-1" y="1"/>
        <delta pt="24" x="-1" y="-1"/>
        <delta pt="25" x="-1" y="-2"/>
        <delta pt="26" x="0" y="0"/>
        <delta pt="27" x="-1" y="1"/>
        <delta pt="28" x="0" y="0"/>
        <delta pt="29" x="-1" y="0"/>
        <delta pt="30" x="0" y="-1"/>
        <delta pt="31" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="-1.0"/>
        <coord axis="wdth" value="-1.0"/>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="1" y="0"/>
        <delta pt="2" x="0" y="2"/>
        <delta pt="3" x="0" y="1"/>
        <delta pt="4" x="0" y="1"/>
        <delta pt="5" x="3" y="1"/>
        <delta pt="6" x="1" y="1"/>
        <delta pt="7" x="-4" y="1"/>
        <delta pt="8" x="1" y="2"/>
        <delta pt="9" x="1" y="1"/>
        <delta pt="10" x="1" y="3"/>
        <delta pt="11" x="0" y="0"/>
        <delta pt="12" x="1" y="-1"/>
        <delta pt="13" x="-1" y="-1"/>
        <delta pt="14" x="-2" y="0"/>
        <delta pt="15" x="-1" y="1"/>
        <delta pt="16" x="-1" y="1"/>
        <delta pt="17" x="-1" y="-1"/>
        <delta pt="18" x="-1" y="-2"/>
        <delta pt="19" x="0" y="2"/>
        <delta pt="20" x="1" y="2"/>
        <delta pt="21" x="2" y="2"/>
        <delta pt="22" x="3" y="-2"/>
        <delta pt="23" x="1" y="-1"/>
        <delta pt="24" x="1" y="1"/>
        <delta pt="25" x="1" y="3"/>
        <delta pt="26" x="0" y="0"/>
        <delta pt="27" x="1" y="-1"/>
        <delta pt="28" x="0" y="0"/>
        <delta pt="29" x="1" y="0"/>
        <delta pt="30" x="0" y="1"/>
        <delta pt="31" x="0" y="0"/>
      </tuple>
      <tuple>
        <coord axis="wght" value="1.0"/>
        <coord axis="wdth" value="-1.0"/>
        <coord axis="opsz" value="1.0"/>
        <delta pt="0" x="0" y="0"/>
        <delta pt="1" x="1" y="0"/>
        <delta pt="2" x="0" y="2"/>
        <delta pt="3" x="0" y="1"/>
        <delta pt="4" x="0" y="1"/>
        <delta pt="5" x="3" y="1"/>
        <delta pt="6" x="1" y="1"/>
        <delta pt="7" x="-4" y="1"/>
        <delta pt="8" x="1" y="2"/>
        <delta pt="9" x="1" y="1"/>
        <delta pt="10" x="1" y="3"/>
        <delta pt="11" x="0" y="0"/>
        <delta pt="12" x="1" y="4"/>
        <delta pt="13" x="-2" y="4"/>
        <delta pt="14" x="-1" y="0"/>
        <delta pt="15" x="-1" y="-3"/>
        <delta pt="16" x="-1" y="1"/>
        <delta pt="17" x="-1" y="3"/>
        <delta pt="18" x="-1" y="0"/>
        <delta pt="19" x="0" y="-3"/>
        <delta pt="20" x="1" y="-3"/>
        <delta pt="21" x="3" y="-3"/>
        <delta pt="22" x="3" y="0"/>
        <delta pt="23" x="1" y="3"/>
        <delta pt="24" x="1" y="1"/>
        <delta pt="25" x="1" y="-2"/>
        <delta pt="26" x="-1" y="0"/>
        <delta pt="27" x="2" y="4"/>
        <delta pt="28" x="0" y="0"/>
        <delta pt="29" x="1" y="0"/>
        <delta pt="30" x="0" y="1"/>
        <delta pt="31" x="0" y="0"/>
      </tuple>
    </glyphVariations>
  </gvar>

</ttFont>
