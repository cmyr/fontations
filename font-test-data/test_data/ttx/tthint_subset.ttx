<?xml version="1.0" encoding="UTF-8"?>
<ttFont sfntVersion="\x00\x01\x00\x00" ttLibVersion="4.41">

  <GlyphOrder>
    <!-- The 'id' attribute is only for humans; it is ignored when parsed. -->
    <GlyphID id="0" name=".notdef"/>
    <GlyphID id="1" name="A"/>
    <GlyphID id="2" name="Aacute"/>
  </GlyphOrder>

  <head>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="1.0"/>
    <fontRevision value="1.0"/>
    <checkSumAdjustment value="0x9834ebf6"/>
    <magicNumber value="0x5f0f3cf5"/>
    <flags value="00000000 00001111"/>
    <unitsPerEm value="1040"/>
    <created value="Sun Jun  4 20:05:16 2023"/>
    <modified value="Wed Jan 24 14:42:25 2024"/>
    <xMin value="0"/>
    <yMin value="-320"/>
    <xMax value="1760"/>
    <yMax value="1045"/>
    <macStyle value="00000000 00000000"/>
    <lowestRecPPEM value="6"/>
    <fontDirectionHint value="2"/>
    <indexToLocFormat value="0"/>
    <glyphDataFormat value="0"/>
  </head>

  <hhea>
    <tableVersion value="0x00010000"/>
    <ascent value="1045"/>
    <descent value="-320"/>
    <lineGap value="0"/>
    <advanceWidthMax value="1760"/>
    <minLeftSideBearing value="0"/>
    <minRightSideBearing value="-320"/>
    <xMaxExtent value="1760"/>
    <caretSlopeRise value="1"/>
    <caretSlopeRun value="0"/>
    <caretOffset value="0"/>
    <reserved0 value="0"/>
    <reserved1 value="0"/>
    <reserved2 value="0"/>
    <reserved3 value="0"/>
    <metricDataFormat value="0"/>
    <numberOfHMetrics value="2"/>
  </hhea>

  <maxp>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="0x10000"/>
    <numGlyphs value="3"/>
    <maxPoints value="1236"/>
    <maxContours value="300"/>
    <maxCompositePoints value="0"/>
    <maxCompositeContours value="0"/>
    <maxZones value="2"/>
    <maxTwilightPoints value="1220"/>
    <maxStorage value="1854"/>
    <maxFunctionDefs value="141"/>
    <maxInstructionDefs value="0"/>
    <maxStackElements value="4039"/>
    <maxSizeOfInstructions value="19419"/>
    <maxComponentElements value="0"/>
    <maxComponentDepth value="0"/>
  </maxp>

  <OS_2>
    <!-- The fields 'usFirstCharIndex' and 'usLastCharIndex'
         will be recalculated by the compiler -->
    <version value="4"/>
    <xAvgCharWidth value="607"/>
    <usWeightClass value="400"/>
    <usWidthClass value="5"/>
    <fsType value="00000000 00000000"/>
    <ySubscriptXSize value="676"/>
    <ySubscriptYSize value="624"/>
    <ySubscriptXOffset value="0"/>
    <ySubscriptYOffset value="78"/>
    <ySuperscriptXSize value="676"/>
    <ySuperscriptYSize value="624"/>
    <ySuperscriptXOffset value="0"/>
    <ySuperscriptYOffset value="364"/>
    <yStrikeoutSize value="50"/>
    <yStrikeoutPosition value="288"/>
    <sFamilyClass value="0"/>
    <panose>
      <bFamilyType value="0"/>
      <bSerifStyle value="0"/>
      <bWeight value="0"/>
      <bProportion value="0"/>
      <bContrast value="0"/>
      <bStrokeVariation value="0"/>
      <bArmStyle value="0"/>
      <bLetterForm value="0"/>
      <bMidline value="0"/>
      <bXHeight value="0"/>
    </panose>
    <ulUnicodeRange1 value="00000000 00000000 00000000 00000011"/>
    <ulUnicodeRange2 value="00000000 00000000 00000000 00000000"/>
    <ulUnicodeRange3 value="00000000 00000000 00000000 00000000"/>
    <ulUnicodeRange4 value="00000000 00000000 00000000 00000000"/>
    <achVendID value="NONE"/>
    <fsSelection value="00000000 11000000"/>
    <usFirstCharIndex value="65"/>
    <usLastCharIndex value="193"/>
    <sTypoAscender value="1045"/>
    <sTypoDescender value="-320"/>
    <sTypoLineGap value="0"/>
    <usWinAscent value="1045"/>
    <usWinDescent value="320"/>
    <ulCodePageRange1 value="00000000 00000000 00000000 10010011"/>
    <ulCodePageRange2 value="00000000 00000000 00000000 00000000"/>
    <sxHeight value="480"/>
    <sCapHeight value="720"/>
    <usDefaultChar value="0"/>
    <usBreakChar value="32"/>
    <usMaxContext value="2"/>
  </OS_2>

  <hmtx>
    <mtx name=".notdef" width="400" lsb="0"/>
    <mtx name="A" width="880" lsb="0"/>
    <mtx name="Aacute" width="880" lsb="0"/>
  </hmtx>

  <cmap>
    <tableVersion version="0"/>
    <cmap_format_4 platformID="0" platEncID="3" language="0">
      <map code="0x41" name="A"/><!-- LATIN CAPITAL LETTER A -->
      <map code="0xc1" name="Aacute"/><!-- LATIN CAPITAL LETTER A WITH ACUTE -->
    </cmap_format_4>
    <cmap_format_4 platformID="3" platEncID="1" language="0">
      <map code="0x41" name="A"/><!-- LATIN CAPITAL LETTER A -->
      <map code="0xc1" name="Aacute"/><!-- LATIN CAPITAL LETTER A WITH ACUTE -->
    </cmap_format_4>
  </cmap>

  <fpgm>
    <assembly>
      PUSHB[ ]	/* 1 value pushed */
      0
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        NEQ[ ]	/* NotEqual */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHW[ ]	/* 1 value pushed */
        14
        LTEQ[ ]	/* LessThenOrEqual */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHB[ ]	/* 1 value pushed */
        6
        GTEQ[ ]	/* GreaterThanOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          52
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          40
        EIF[ ]	/* EndIf */
        ADD[ ]	/* Add */
        FLOOR[ ]	/* Floor */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        NEQ[ ]	/* NotEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          SUB[ ]	/* Subtract */
          PUSHW[ ]	/* 2 values pushed */
          2048 2048
          MUL[ ]	/* Multiply */
          MUL[ ]	/* Multiply */
          SWAP[ ]	/* SwapTopStack */
          DIV[ ]	/* Divide */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 3 values pushed */
        0 1 0
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      1
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        32
        ADD[ ]	/* Add */
        FLOOR[ ]	/* Floor */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      2
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        POP[ ]	/* PopTopStack */
        SWAP[ ]	/* SwapTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      3
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 4 values pushed */
        3 20 21 0
        WS[ ]	/* WriteStore */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        19
        RS[ ]	/* ReadStore */
        DUP[ ]	/* DuplicateTopStack */
        ADD[ ]	/* Add */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        2 20
        RS[ ]	/* ReadStore */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        37 3
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        JROT[ ]	/* JumpRelativeOnTrue */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        12
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        RS[ ]	/* ReadStore */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        4
        LT[ ]	/* LessThan */
        JROT[ ]	/* JumpRelativeOnTrue */
        PUSHB[ ]	/* 3 values pushed */
        2 2 2
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        33
        NEG[ ]	/* Negate */
        JMPR[ ]	/* Jump */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 3 values pushed */
        14 21 1
        WS[ ]	/* WriteStore */
        JMPR[ ]	/* Jump */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 3 values pushed */
        19 1 19
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          NEG[ ]	/* Negate */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 3 values pushed */
        22 1 2
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      4
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        3
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        21
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          22
          RS[ ]	/* ReadStore */
          RS[ ]	/* ReadStore */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            NEG[ ]	/* Negate */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          DUP[ ]	/* DuplicateTopStack */
          ABS[ ]	/* Absolute */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          192
          LT[ ]	/* LessThan */
          PUSHB[ ]	/* 1 value pushed */
          4
          MINDEX[ ]	/* MoveXToTopStack */
          AND[ ]	/* LogicalAnd */
          PUSHB[ ]	/* 3 values pushed */
          40 1 13
          RS[ ]	/* ReadStore */
          RCVT[ ]	/* ReadCVT */
          MUL[ ]	/* Multiply */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          6
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
          EIF[ ]	/* EndIf */
          GT[ ]	/* GreaterThan */
          OR[ ]	/* LogicalOr */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            SWAP[ ]	/* SwapTopStack */
            POP[ ]	/* PopTopStack */
          ELSE[ ]	/* Else */
            ROLL[ ]	/* RollTopThreeStack */
            IF[ ]	/* If */
              DUP[ ]	/* DuplicateTopStack */
              PUSHB[ ]	/* 1 value pushed */
              80
              LT[ ]	/* LessThan */
              IF[ ]	/* If */
                POP[ ]	/* PopTopStack */
                PUSHB[ ]	/* 1 value pushed */
                64
              EIF[ ]	/* EndIf */
            ELSE[ ]	/* Else */
              DUP[ ]	/* DuplicateTopStack */
              PUSHB[ ]	/* 1 value pushed */
              56
              LT[ ]	/* LessThan */
              IF[ ]	/* If */
                POP[ ]	/* PopTopStack */
                PUSHB[ ]	/* 1 value pushed */
                56
              EIF[ ]	/* EndIf */
            EIF[ ]	/* EndIf */
            DUP[ ]	/* DuplicateTopStack */
            PUSHB[ ]	/* 2 values pushed */
            1 13
            RS[ ]	/* ReadStore */
            RCVT[ ]	/* ReadCVT */
            MUL[ ]	/* Multiply */
            RCVT[ ]	/* ReadCVT */
            SUB[ ]	/* Subtract */
            ABS[ ]	/* Absolute */
            PUSHB[ ]	/* 1 value pushed */
            40
            LT[ ]	/* LessThan */
            IF[ ]	/* If */
              POP[ ]	/* PopTopStack */
              PUSHB[ ]	/* 2 values pushed */
              1 13
              RS[ ]	/* ReadStore */
              RCVT[ ]	/* ReadCVT */
              MUL[ ]	/* Multiply */
              RCVT[ ]	/* ReadCVT */
              DUP[ ]	/* DuplicateTopStack */
              PUSHB[ ]	/* 1 value pushed */
              48
              LT[ ]	/* LessThan */
              IF[ ]	/* If */
                POP[ ]	/* PopTopStack */
                PUSHB[ ]	/* 1 value pushed */
                48
              EIF[ ]	/* EndIf */
            ELSE[ ]	/* Else */
              DUP[ ]	/* DuplicateTopStack */
              PUSHB[ ]	/* 1 value pushed */
              192
              LT[ ]	/* LessThan */
              IF[ ]	/* If */
                DUP[ ]	/* DuplicateTopStack */
                FLOOR[ ]	/* Floor */
                DUP[ ]	/* DuplicateTopStack */
                ROLL[ ]	/* RollTopThreeStack */
                ROLL[ ]	/* RollTopThreeStack */
                SUB[ ]	/* Subtract */
                DUP[ ]	/* DuplicateTopStack */
                PUSHB[ ]	/* 1 value pushed */
                10
                LT[ ]	/* LessThan */
                IF[ ]	/* If */
                  ADD[ ]	/* Add */
                ELSE[ ]	/* Else */
                  DUP[ ]	/* DuplicateTopStack */
                  PUSHB[ ]	/* 1 value pushed */
                  32
                  LT[ ]	/* LessThan */
                  IF[ ]	/* If */
                    POP[ ]	/* PopTopStack */
                    PUSHB[ ]	/* 1 value pushed */
                    10
                    ADD[ ]	/* Add */
                  ELSE[ ]	/* Else */
                    DUP[ ]	/* DuplicateTopStack */
                    PUSHB[ ]	/* 1 value pushed */
                    54
                    LT[ ]	/* LessThan */
                    IF[ ]	/* If */
                      POP[ ]	/* PopTopStack */
                      PUSHB[ ]	/* 1 value pushed */
                      54
                      ADD[ ]	/* Add */
                    ELSE[ ]	/* Else */
                      ADD[ ]	/* Add */
                    EIF[ ]	/* EndIf */
                  EIF[ ]	/* EndIf */
                EIF[ ]	/* EndIf */
              ELSE[ ]	/* Else */
                PUSHB[ ]	/* 1 value pushed */
                2
                CINDEX[ ]	/* CopyXToTopStack */
                PUSHB[ ]	/* 1 value pushed */
                12
                RS[ ]	/* ReadStore */
                MUL[ ]	/* Multiply */
                PUSHB[ ]	/* 1 value pushed */
                0
                GT[ ]	/* GreaterThan */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 1 value pushed */
                  0
                  MPPEM[ ]	/* MeasurePixelPerEm */
                  PUSHB[ ]	/* 1 value pushed */
                  10
                  LT[ ]	/* LessThan */
                  IF[ ]	/* If */
                    POP[ ]	/* PopTopStack */
                    PUSHB[ ]	/* 1 value pushed */
                    12
                    RS[ ]	/* ReadStore */
                  ELSE[ ]	/* Else */
                    MPPEM[ ]	/* MeasurePixelPerEm */
                    PUSHB[ ]	/* 1 value pushed */
                    30
                    LT[ ]	/* LessThan */
                    IF[ ]	/* If */
                      POP[ ]	/* PopTopStack */
                      PUSHB[ ]	/* 1 value pushed */
                      30
                      MPPEM[ ]	/* MeasurePixelPerEm */
                      SUB[ ]	/* Subtract */
                      PUSHW[ ]	/* 1 value pushed */
                      4096
                      MUL[ ]	/* Multiply */
                      PUSHB[ ]	/* 1 value pushed */
                      12
                      RS[ ]	/* ReadStore */
                      MUL[ ]	/* Multiply */
                      PUSHW[ ]	/* 1 value pushed */
                      1280
                      DIV[ ]	/* Divide */
                    EIF[ ]	/* EndIf */
                  EIF[ ]	/* EndIf */
                  ABS[ ]	/* Absolute */
                  SUB[ ]	/* Subtract */
                EIF[ ]	/* EndIf */
                PUSHB[ ]	/* 1 value pushed */
                1
                CALL[ ]	/* CallFunction */
              EIF[ ]	/* EndIf */
            EIF[ ]	/* EndIf */
            SWAP[ ]	/* SwapTopStack */
            PUSHB[ ]	/* 1 value pushed */
            0
            LT[ ]	/* LessThan */
            IF[ ]	/* If */
              NEG[ ]	/* Negate */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          DUP[ ]	/* DuplicateTopStack */
          ABS[ ]	/* Absolute */
          PUSHB[ ]	/* 1 value pushed */
          22
          RS[ ]	/* ReadStore */
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      5
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        RS[ ]	/* ReadStore */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          7
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
          PUSHB[ ]	/* 1 value pushed */
          8
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      6
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        POP[ ]	/* PopTopStack */
        SWAP[ ]	/* SwapTopStack */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CALL[ ]	/* CallFunction */
        DUP[ ]	/* DuplicateTopStack */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 2 values pushed */
        7 98
        WS[ ]	/* WriteStore */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        8
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        6
        RCVT[ ]	/* ReadCVT */
        IF[ ]	/* If */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 2 values pushed */
          1 13
          RS[ ]	/* ReadStore */
          RCVT[ ]	/* ReadCVT */
          MUL[ ]	/* Multiply */
          PUSHB[ ]	/* 2 values pushed */
          1 13
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          1
          ADD[ ]	/* Add */
          RCVT[ ]	/* ReadCVT */
          MUL[ ]	/* Multiply */
          PUSHB[ ]	/* 1 value pushed */
          5
          LOOPCALL[ ]	/* LoopAndCallFunction */
          POP[ ]	/* PopTopStack */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          8
          RS[ ]	/* ReadStore */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 2 values pushed */
          48 5
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          MINDEX[ ]	/* MoveXToTopStack */
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            ADD[ ]	/* Add */
            LT[ ]	/* LessThan */
          ELSE[ ]	/* Else */
            SUB[ ]	/* Subtract */
            GT[ ]	/* GreaterThan */
          EIF[ ]	/* EndIf */
          IF[ ]	/* If */
            SWAP[ ]	/* SwapTopStack */
          EIF[ ]	/* EndIf */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        64
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          1
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
        EIF[ ]	/* EndIf */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          NEG[ ]	/* Negate */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      7
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        9
        RS[ ]	/* ReadStore */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 3 values pushed */
        0 2 0
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      8
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        9
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        2
        DIV[ ]	/* Divide */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        7
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      9
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        14
        RS[ ]	/* ReadStore */
        MUL[ ]	/* Multiply */
        PUSHW[ ]	/* 1 value pushed */
        1024
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        ADD[ ]	/* Add */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      10
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        9 14 0
        RS[ ]	/* ReadStore */
        RCVT[ ]	/* ReadCVT */
        WS[ ]	/* WriteStore */
        LOOPCALL[ ]	/* LoopAndCallFunction */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 3 values pushed */
        0 1 0
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      11
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 3 values pushed */
        0 1 0
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      12
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        ABS[ ]	/* Absolute */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        32
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          48
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            32
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            64
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          NEG[ ]	/* Negate */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        WCVTP[ ]	/* WriteCVTInPixels */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      13
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        36
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          0
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          64
        EIF[ ]	/* EndIf */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          NEG[ ]	/* Negate */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        WCVTP[ ]	/* WriteCVTInPixels */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      14
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 4 values pushed */
        13 12 0 3
        RCVT[ ]	/* ReadCVT */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        LOOPCALL[ ]	/* LoopAndCallFunction */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      15
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        2 2
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        100
        SUB[ ]	/* Subtract */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      16
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        15
        RS[ ]	/* ReadStore */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          15
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        16
        RS[ ]	/* ReadStore */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        0
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          16
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      17
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        16
        DIV[ ]	/* Divide */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        DUP[ ]	/* DuplicateTopStack */
        PUSHW[ ]	/* 1 value pushed */
        1024
        MUL[ ]	/* Multiply */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        17
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        17
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        SWAP[ ]	/* SwapTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      18
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 2 values pushed */
          4 100
          WCVTP[ ]	/* WriteCVTInPixels */
        EIF[ ]	/* EndIf */
        DEPTH[ ]	/* GetDepthStack */
        PUSHB[ ]	/* 1 value pushed */
        13
        NEG[ ]	/* Negate */
        SWAP[ ]	/* SwapTopStack */
        JROT[ ]	/* JumpRelativeOnTrue */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      19
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          MPPEM[ ]	/* MeasurePixelPerEm */
          GTEQ[ ]	/* GreaterThanOrEqual */
          IF[ ]	/* If */
            PUSHB[ ]	/* 2 values pushed */
            4 100
            WCVTP[ ]	/* WriteCVTInPixels */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        DEPTH[ ]	/* GetDepthStack */
        PUSHB[ ]	/* 1 value pushed */
        19
        NEG[ ]	/* Negate */
        SWAP[ ]	/* SwapTopStack */
        JROT[ ]	/* JumpRelativeOnTrue */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      20
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 18
        RS[ ]	/* ReadStore */
        NEQ[ ]	/* NotEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 2 values pushed */
          18 18
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          1
          SUB[ ]	/* Subtract */
          WS[ ]	/* WriteStore */
          PUSHB[ ]	/* 1 value pushed */
          17
          CALL[ ]	/* CallFunction */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        15 2
        CINDEX[ ]	/* CopyXToTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        16 2
        CINDEX[ ]	/* CopyXToTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZPS[ ]	/* SetZonePointerS */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 2 values pushed */
          1 0
          RS[ ]	/* ReadStore */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          WS[ ]	/* WriteStore */
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          16
          LOOPCALL[ ]	/* LoopAndCallFunction */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          16
          LOOPCALL[ ]	/* LoopAndCallFunction */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 2 values pushed */
          1 0
          RS[ ]	/* ReadStore */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          WS[ ]	/* WriteStore */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          16
          LOOPCALL[ ]	/* LoopAndCallFunction */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        15
        RS[ ]	/* ReadStore */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        16
        RS[ ]	/* ReadStore */
        GC[1]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        2
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        14
        RS[ ]	/* ReadStore */
        MUL[ ]	/* Multiply */
        PUSHW[ ]	/* 1 value pushed */
        1024
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 2 values pushed */
        0 0
        SZP0[ ]	/* SetZonePointer0 */
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 1 value pushed */
        1
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        0
        MIAP[0]	/* MoveIndirectAbsPt */
        PUSHB[ ]	/* 3 values pushed */
        1 1 1
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      21
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RCVT[ ]	/* ReadCVT */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          18
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          14
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
          PUSHB[ ]	/* 1 value pushed */
          13
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          ADD[ ]	/* Add */
          WS[ ]	/* WriteStore */
          DUP[ ]	/* DuplicateTopStack */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 8 values pushed */
          24 24 1 0 17 0 19 0
          WS[ ]	/* WriteStore */
          WS[ ]	/* WriteStore */
          WS[ ]	/* WriteStore */
          ROLL[ ]	/* RollTopThreeStack */
          ADD[ ]	/* Add */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          20
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
          PUSHB[ ]	/* 1 value pushed */
          1
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 2 values pushed */
          20 8
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          139
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          CLEAR[ ]	/* ClearStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      22
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 21
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      23
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        1 21
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      24
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        2 21
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      25
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        3 21
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      26
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        4 21
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      27
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        5 21
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      28
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        6 21
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      29
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        7 21
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      30
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        8 21
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      31
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        9 21
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      43
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        16
        DIV[ ]	/* Divide */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 1 value pushed */
        6
        ADD[ ]	/* Add */
        MPPEM[ ]	/* MeasurePixelPerEm */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          MDAP[0]	/* MoveDirectAbsPt */
          PUSHB[ ]	/* 1 value pushed */
          1
          DELTAP1[ ]	/* DeltaExceptionP1 */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      44
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        16
        DIV[ ]	/* Divide */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 1 value pushed */
        22
        ADD[ ]	/* Add */
        MPPEM[ ]	/* MeasurePixelPerEm */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          MDAP[0]	/* MoveDirectAbsPt */
          PUSHB[ ]	/* 1 value pushed */
          1
          DELTAP2[ ]	/* DeltaExceptionP2 */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      45
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        16
        DIV[ ]	/* Divide */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 1 value pushed */
        38
        ADD[ ]	/* Add */
        MPPEM[ ]	/* MeasurePixelPerEm */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          MDAP[0]	/* MoveDirectAbsPt */
          PUSHB[ ]	/* 1 value pushed */
          1
          DELTAP3[ ]	/* DeltaExceptionP3 */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      32
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        15
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RCVT[ ]	/* ReadCVT */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          18
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          14
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
          PUSHB[ ]	/* 1 value pushed */
          13
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          ADD[ ]	/* Add */
          WS[ ]	/* WriteStore */
          DUP[ ]	/* DuplicateTopStack */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 1 value pushed */
          1
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 6 values pushed */
          24 24 1 0 17 0
          WS[ ]	/* WriteStore */
          WS[ ]	/* WriteStore */
          ROLL[ ]	/* RollTopThreeStack */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 2 values pushed */
          20 8
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          139
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          CLEAR[ ]	/* ClearStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      33
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 32
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      34
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        1 32
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      35
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        2 32
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      36
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        3 32
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      37
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        4 32
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      38
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        5 32
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      39
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        6 32
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      40
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        7 32
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      41
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        8 32
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      42
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        9 32
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      46
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      47
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        24
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        RS[ ]	/* ReadStore */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        46
        LOOPCALL[ ]	/* LoopAndCallFunction */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      48
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        47
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        47
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      49
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        GC[1]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        14
        RS[ ]	/* ReadStore */
        MUL[ ]	/* Multiply */
        PUSHW[ ]	/* 1 value pushed */
        1024
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        SHPIX[ ]	/* ShiftZoneByPixel */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        NEQ[ ]	/* NotEqual */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          GC[1]	/* GetCoordOnPVector */
          DUP[ ]	/* DuplicateTopStack */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          14
          RS[ ]	/* ReadStore */
          MUL[ ]	/* Multiply */
          PUSHW[ ]	/* 1 value pushed */
          1024
          DIV[ ]	/* Divide */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          FLOOR[ ]	/* Floor */
          PUSHB[ ]	/* 1 value pushed */
          1
          MUL[ ]	/* Multiply */
          ADD[ ]	/* Add */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      50
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RCVT[ ]	/* ReadCVT */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 2 values pushed */
          14 6
          RCVT[ ]	/* ReadCVT */
          WS[ ]	/* WriteStore */
          PUSHB[ ]	/* 1 value pushed */
          1
          SZPS[ ]	/* SetZonePointerS */
          PUSHB[ ]	/* 1 value pushed */
          49
          LOOPCALL[ ]	/* LoopAndCallFunction */
          PUSHB[ ]	/* 2 values pushed */
          5 1
          SZP2[ ]	/* SetZonePointer2 */
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            IUP[0]	/* InterpolateUntPts */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          CLEAR[ ]	/* ClearStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      51
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        15
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RCVT[ ]	/* ReadCVT */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 2 values pushed */
          14 6
          RCVT[ ]	/* ReadCVT */
          WS[ ]	/* WriteStore */
          PUSHB[ ]	/* 1 value pushed */
          1
          SZPS[ ]	/* SetZonePointerS */
          PUSHB[ ]	/* 1 value pushed */
          49
          LOOPCALL[ ]	/* LoopAndCallFunction */
          PUSHB[ ]	/* 2 values pushed */
          5 1
          SZP2[ ]	/* SetZonePointer2 */
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            IUP[0]	/* InterpolateUntPts */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          CLEAR[ ]	/* ClearStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      52
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        SHC[1]	/* ShiftContourByLastPt */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      53
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 2 values pushed */
        14 6
        RCVT[ ]	/* ReadCVT */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        1
        RCVT[ ]	/* ReadCVT */
        MUL[ ]	/* Multiply */
        PUSHW[ ]	/* 1 value pushed */
        1024
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 1 value pushed */
        1
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        14
        RS[ ]	/* ReadStore */
        MUL[ ]	/* Multiply */
        PUSHW[ ]	/* 1 value pushed */
        1024
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 1 value pushed */
        1
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 5 values pushed */
        0 0 0 0 0
        WCVTP[ ]	/* WriteCVTInPixels */
        MIAP[0]	/* MoveIndirectAbsPt */
        SWAP[ ]	/* SwapTopStack */
        SHPIX[ ]	/* ShiftZoneByPixel */
        PUSHB[ ]	/* 2 values pushed */
        52 1
        SZP2[ ]	/* SetZonePointer2 */
        LOOPCALL[ ]	/* LoopAndCallFunction */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      54
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        DUP[ ]	/* DuplicateTopStack */
        GC[1]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        14
        RS[ ]	/* ReadStore */
        MUL[ ]	/* Multiply */
        PUSHW[ ]	/* 1 value pushed */
        1024
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        SUB[ ]	/* Subtract */
        SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      55
      FDEF[ ]	/* FunctionDefinition */
        MDAP[0]	/* MoveDirectAbsPt */
        SLOOP[ ]	/* SetLoopVariable */
        ALIGNRP[ ]	/* AlignRelativePt */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      56
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        DUP[ ]	/* DuplicateTopStack */
        GC[1]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        14
        RS[ ]	/* ReadStore */
        MUL[ ]	/* Multiply */
        PUSHW[ ]	/* 1 value pushed */
        1024
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        1
        RS[ ]	/* ReadStore */
        MUL[ ]	/* Multiply */
        SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      57
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        2 0
        SZPS[ ]	/* SetZonePointerS */
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        DUP[ ]	/* DuplicateTopStack */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        0
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        MD[0]	/* MeasureDistance */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        IF[ ]	/* If */
          DIV[ ]	/* Divide */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        1
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 3 values pushed */
        56 1 1
        SZP2[ ]	/* SetZonePointer2 */
        SZP1[ ]	/* SetZonePointer1 */
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      58
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 1 value pushed */
        23
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 2 values pushed */
        12 0
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        11
        RS[ ]	/* ReadStore */
        CALL[ ]	/* CallFunction */
        NEG[ ]	/* Negate */
        ROLL[ ]	/* RollTopThreeStack */
        MDAP[0]	/* MoveDirectAbsPt */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        ROLL[ ]	/* RollTopThreeStack */
        SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      59
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 1 value pushed */
        23
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        12 0
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        11
        RS[ ]	/* ReadStore */
        CALL[ ]	/* CallFunction */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        96
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            PUSHB[ ]	/* 4 values pushed */
            4 32 5 32
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 4 values pushed */
            4 38 5 26
          EIF[ ]	/* EndIf */
          WS[ ]	/* WriteStore */
          WS[ ]	/* WriteStore */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          10
          RS[ ]	/* ReadStore */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
          GC[1]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          GC[1]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          SWAP[ ]	/* SwapTopStack */
          GC[0]	/* GetCoordOnPVector */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 1 value pushed */
          6
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          2
          DIV[ ]	/* Divide */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          FLOOR[ ]	/* Floor */
          PUSHB[ ]	/* 1 value pushed */
          1
          MUL[ ]	/* Multiply */
          ADD[ ]	/* Add */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          CALL[ ]	/* CallFunction */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          RS[ ]	/* ReadStore */
          ADD[ ]	/* Add */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          5
          RS[ ]	/* ReadStore */
          SUB[ ]	/* Subtract */
          ABS[ ]	/* Absolute */
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            4
            RS[ ]	/* ReadStore */
            SUB[ ]	/* Subtract */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            5
            RS[ ]	/* ReadStore */
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          DIV[ ]	/* Divide */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          FLOOR[ ]	/* Floor */
          PUSHB[ ]	/* 1 value pushed */
          1
          MUL[ ]	/* Multiply */
          SUB[ ]	/* Subtract */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          MINDEX[ ]	/* MoveXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          GC[0]	/* GetCoordOnPVector */
          SUB[ ]	/* Subtract */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          10
          RS[ ]	/* ReadStore */
          GC[0]	/* GetCoordOnPVector */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          10
          RS[ ]	/* ReadStore */
          GC[1]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          GC[1]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          ADD[ ]	/* Add */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          6
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          2
          DIV[ ]	/* Divide */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          FLOOR[ ]	/* Floor */
          PUSHB[ ]	/* 1 value pushed */
          1
          MUL[ ]	/* Multiply */
          ADD[ ]	/* Add */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          CALL[ ]	/* CallFunction */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          6
          RS[ ]	/* ReadStore */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 1 value pushed */
          1
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          DIV[ ]	/* Divide */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          FLOOR[ ]	/* Floor */
          PUSHB[ ]	/* 1 value pushed */
          1
          MUL[ ]	/* Multiply */
          PUSHB[ ]	/* 1 value pushed */
          4
          MINDEX[ ]	/* MoveXToTopStack */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          ADD[ ]	/* Add */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          ADD[ ]	/* Add */
          ABS[ ]	/* Absolute */
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
          ELSE[ ]	/* Else */
            SWAP[ ]	/* SwapTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          MINDEX[ ]	/* MoveXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          GC[0]	/* GetCoordOnPVector */
          SUB[ ]	/* Subtract */
          SHPIX[ ]	/* ShiftZoneByPixel */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      60
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 1 value pushed */
        23
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        SWAP[ ]	/* SwapTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      61
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 1 value pushed */
        23
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        10
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        GC[0]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        1
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      62
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 1 value pushed */
        23
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        0
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          MDAP[0]	/* MoveDirectAbsPt */
          DUP[ ]	/* DuplicateTopStack */
          ALIGNRP[ ]	/* AlignRelativePt */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          GC[1]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          GC[1]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          GC[1]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          GC[1]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          6
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          MD[0]	/* MeasureDistance */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          SUB[ ]	/* Subtract */
          PUSHW[ ]	/* 2 values pushed */
          2048 2048
          MUL[ ]	/* Multiply */
          MUL[ ]	/* Multiply */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          IF[ ]	/* If */
            DIV[ ]	/* Divide */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
          MUL[ ]	/* Multiply */
          PUSHW[ ]	/* 1 value pushed */
          1024
          DIV[ ]	/* Divide */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          FLOOR[ ]	/* Floor */
          PUSHB[ ]	/* 1 value pushed */
          1
          MUL[ ]	/* Multiply */
          ADD[ ]	/* Add */
          SWAP[ ]	/* SwapTopStack */
          MDAP[0]	/* MoveDirectAbsPt */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          DUP[ ]	/* DuplicateTopStack */
          ALIGNRP[ ]	/* AlignRelativePt */
          ROLL[ ]	/* RollTopThreeStack */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      63
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 1 value pushed */
        23
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        10
        RS[ ]	/* ReadStore */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        32
        ADD[ ]	/* Add */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        2
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        1
        MUL[ ]	/* Multiply */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        ROLL[ ]	/* RollTopThreeStack */
        SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      64
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        23
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          LT[ ]	/* LessThan */
        ELSE[ ]	/* Else */
          GT[ ]	/* GreaterThan */
        EIF[ ]	/* EndIf */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          ALIGNRP[ ]	/* AlignRelativePt */
        EIF[ ]	/* EndIf */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        48 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      65
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        23
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          GT[ ]	/* GreaterThan */
        ELSE[ ]	/* Else */
          LT[ ]	/* LessThan */
        EIF[ ]	/* EndIf */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          ALIGNRP[ ]	/* AlignRelativePt */
        EIF[ ]	/* EndIf */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        48 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      66
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        23
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          LT[ ]	/* LessThan */
        ELSE[ ]	/* Else */
          GT[ ]	/* GreaterThan */
        EIF[ ]	/* EndIf */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          ALIGNRP[ ]	/* AlignRelativePt */
        EIF[ ]	/* EndIf */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        23
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          GT[ ]	/* GreaterThan */
        ELSE[ ]	/* Else */
          LT[ ]	/* LessThan */
        EIF[ ]	/* EndIf */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          ALIGNRP[ ]	/* AlignRelativePt */
        EIF[ ]	/* EndIf */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        48 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      67
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        58
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        23
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          LT[ ]	/* LessThan */
        ELSE[ ]	/* Else */
          GT[ ]	/* GreaterThan */
        EIF[ ]	/* EndIf */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          ALIGNRP[ ]	/* AlignRelativePt */
        EIF[ ]	/* EndIf */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        48 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      68
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        59
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        PUSHB[ ]	/* 1 value pushed */
        6
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        ROLL[ ]	/* RollTopThreeStack */
        SHPIX[ ]	/* ShiftZoneByPixel */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        23
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          LT[ ]	/* LessThan */
        ELSE[ ]	/* Else */
          GT[ ]	/* GreaterThan */
        EIF[ ]	/* EndIf */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          ALIGNRP[ ]	/* AlignRelativePt */
        EIF[ ]	/* EndIf */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        48 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        6
        RS[ ]	/* ReadStore */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 1 value pushed */
        48
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      69
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        GC[0]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[1]	/* GetCoordOnPVector */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        12
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        11
        RS[ ]	/* ReadStore */
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        SWAP[ ]	/* SwapTopStack */
        SHPIX[ ]	/* ShiftZoneByPixel */
        PUSHB[ ]	/* 2 values pushed */
        48 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      70
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        10 4
        CINDEX[ ]	/* CopyXToTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[1]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        12 0
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        11
        RS[ ]	/* ReadStore */
        CALL[ ]	/* CallFunction */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        96
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            PUSHB[ ]	/* 4 values pushed */
            4 32 5 32
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 4 values pushed */
            4 38 5 26
          EIF[ ]	/* EndIf */
          WS[ ]	/* WriteStore */
          WS[ ]	/* WriteStore */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          GC[1]	/* GetCoordOnPVector */
          PUSHB[ ]	/* 1 value pushed */
          6
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          2
          DIV[ ]	/* Divide */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          FLOOR[ ]	/* Floor */
          PUSHB[ ]	/* 1 value pushed */
          1
          MUL[ ]	/* Multiply */
          ADD[ ]	/* Add */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          CALL[ ]	/* CallFunction */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          RS[ ]	/* ReadStore */
          ADD[ ]	/* Add */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          5
          RS[ ]	/* ReadStore */
          SUB[ ]	/* Subtract */
          ABS[ ]	/* Absolute */
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            4
            RS[ ]	/* ReadStore */
            SUB[ ]	/* Subtract */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            5
            RS[ ]	/* ReadStore */
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          DIV[ ]	/* Divide */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
          FLOOR[ ]	/* Floor */
          PUSHB[ ]	/* 1 value pushed */
          1
          MUL[ ]	/* Multiply */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          GC[0]	/* GetCoordOnPVector */
          SUB[ ]	/* Subtract */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          ALIGNRP[ ]	/* AlignRelativePt */
          SWAP[ ]	/* SwapTopStack */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          DUP[ ]	/* DuplicateTopStack */
          DUP[ ]	/* DuplicateTopStack */
          GC[0]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          GC[1]	/* GetCoordOnPVector */
          PUSHB[ ]	/* 1 value pushed */
          1
          CALL[ ]	/* CallFunction */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          SHPIX[ ]	/* ShiftZoneByPixel */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 2 values pushed */
        48 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      71
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 58
        CALL[ ]	/* CallFunction */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        48 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      72
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 59
        CALL[ ]	/* CallFunction */
        POP[ ]	/* PopTopStack */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        PUSHB[ ]	/* 1 value pushed */
        6
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        SWAP[ ]	/* SwapTopStack */
        SHPIX[ ]	/* ShiftZoneByPixel */
        PUSHB[ ]	/* 2 values pushed */
        48 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        6
        RS[ ]	/* ReadStore */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 1 value pushed */
        48
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      73
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZP2[ ]	/* SetZonePointer2 */
        DUP[ ]	/* DuplicateTopStack */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        0
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 3 values pushed */
        0 1 1
        SZP2[ ]	/* SetZonePointer2 */
        SZP1[ ]	/* SetZonePointer1 */
        SZP0[ ]	/* SetZonePointer0 */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 1 value pushed */
        54
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      74
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZP2[ ]	/* SetZonePointer2 */
        DUP[ ]	/* DuplicateTopStack */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        0
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 3 values pushed */
        0 1 1
        SZP2[ ]	/* SetZonePointer2 */
        SZP1[ ]	/* SetZonePointer1 */
        SZP0[ ]	/* SetZonePointer0 */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 1 value pushed */
        54
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      75
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 1
        SZP1[ ]	/* SetZonePointer1 */
        SZP0[ ]	/* SetZonePointer0 */
        PUSHB[ ]	/* 1 value pushed */
        55
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      76
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        57
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      77
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        RCVT[ ]	/* ReadCVT */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        DUP[ ]	/* DuplicateTopStack */
        GC[0]	/* GetCoordOnPVector */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        SHPIX[ ]	/* ShiftZoneByPixel */
        PUSHB[ ]	/* 2 values pushed */
        48 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      78
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        10
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        77
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      79
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 0 70
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      80
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 1 70
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      81
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 0 70
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      82
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 1 70
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      83
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 0 71
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      84
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 1 71
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      85
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 0 71
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      86
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 1 71
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      87
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 4 values pushed */
        0 0 0 67
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      88
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 4 values pushed */
        0 1 0 67
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      89
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 4 values pushed */
        1 0 0 67
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      90
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 4 values pushed */
        1 1 0 67
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      91
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 4 values pushed */
        0 0 1 67
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      92
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 4 values pushed */
        0 1 1 67
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      93
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 4 values pushed */
        1 0 1 67
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      94
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 4 values pushed */
        1 1 1 67
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      95
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 0 69
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      96
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 1 69
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      97
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 0 69
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      98
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 1 69
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      99
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 0 72
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      100
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        0 1 72
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      101
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 0 72
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      102
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        1 1 72
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      103
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 4 values pushed */
        0 0 0 68
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      104
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 4 values pushed */
        0 1 0 68
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      105
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 4 values pushed */
        1 0 0 68
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      106
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 4 values pushed */
        1 1 0 68
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      107
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 4 values pushed */
        0 0 1 68
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      108
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 4 values pushed */
        0 1 1 68
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      109
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 4 values pushed */
        1 0 1 68
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      110
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 4 values pushed */
        1 1 1 68
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      111
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 60
        CALL[ ]	/* CallFunction */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        48 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      112
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 60
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        64
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      113
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 60
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        65
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      114
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 2 values pushed */
        0 60
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        66
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      115
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        1 60
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        64
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      116
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        1 60
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        65
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      117
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 2 values pushed */
        1 60
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        66
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      118
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 61
        CALL[ ]	/* CallFunction */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        48 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      119
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 61
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        64
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      120
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 61
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        65
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      121
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 61
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        66
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      122
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        1 61
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        64
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      123
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        1 61
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        65
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      124
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        1 61
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        66
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      125
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 62
        CALL[ ]	/* CallFunction */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        48 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      126
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 62
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        64
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      127
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 62
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        65
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      128
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 62
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        66
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      129
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        1 62
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        64
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      130
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        1 62
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        65
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      131
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        1 62
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        66
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      132
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 63
        CALL[ ]	/* CallFunction */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        48 1
        SZP1[ ]	/* SetZonePointer1 */
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      133
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 63
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        64
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      134
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 63
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        65
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      135
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 63
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        66
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      136
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        1 63
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        64
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      137
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        1 63
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        65
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      138
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        1 63
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        66
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      139
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 3 values pushed */
        11 0 3
        RCVT[ ]	/* ReadCVT */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          6
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 3 values pushed */
          4 2 3
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            SWAP[ ]	/* SwapTopStack */
            POP[ ]	/* PopTopStack */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        WS[ ]	/* WriteStore */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        8
        NEG[ ]	/* Negate */
        PUSHB[ ]	/* 1 value pushed */
        3
        DEPTH[ ]	/* GetDepthStack */
        LT[ ]	/* LessThan */
        JROT[ ]	/* JumpRelativeOnTrue */
        PUSHB[ ]	/* 2 values pushed */
        5 1
        SZP2[ ]	/* SetZonePointer2 */
        RCVT[ ]	/* ReadCVT */
        IF[ ]	/* If */
          IUP[0]	/* InterpolateUntPts */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
    </assembly>
  </fpgm>

  <prep>
    <assembly>
      SVTCA[0]	/* SetFPVectorToAxis */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHW[ ]	/* 1 value pushed */
      200
      GT[ ]	/* GreaterThan */
      IF[ ]	/* If */
        PUSHB[ ]	/* 2 values pushed */
        1 1
        INSTCTRL[ ]	/* SetInstrExecControl */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 1 value pushed */
      1
      PUSHW[ ]	/* 2 values pushed */
      2048 2048
      MUL[ ]	/* Multiply */
      WCVTF[ ]	/* WriteCVTInFUnits */
      PUSHB[ ]	/* 2 values pushed */
      0 7
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 3 values pushed */
      26 1 0
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHB[ ]	/* 2 values pushed */
      0 7
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 4 values pushed */
      14 9 1 10
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHB[ ]	/* 2 values pushed */
      0 7
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 4 values pushed */
      23 6 1 10
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHB[ ]	/* 2 values pushed */
      0 8
      WS[ ]	/* WriteStore */
      PUSHW[ ]	/* 3 values pushed */
      960 1 11
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHB[ ]	/* 2 values pushed */
      0 9
      WS[ ]	/* WriteStore */
      PUSHW[ ]	/* 3 values pushed */
      128 1 11
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHW[ ]	/* 2 values pushed */
      3 0
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 2 values pushed */
      36 1
      GETINFO[ ]	/* GetInfo */
      LTEQ[ ]	/* LessThenOrEqual */
      IF[ ]	/* If */
        PUSHB[ ]	/* 1 value pushed */
        64
        GETINFO[ ]	/* GetInfo */
        IF[ ]	/* If */
          PUSHW[ ]	/* 2 values pushed */
          3 100
          WCVTP[ ]	/* WriteCVTInPixels */
          PUSHB[ ]	/* 2 values pushed */
          40 1
          GETINFO[ ]	/* GetInfo */
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            2048
            GETINFO[ ]	/* GetInfo */
            IF[ ]	/* If */
              PUSHW[ ]	/* 2 values pushed */
              3 0
              WCVTP[ ]	/* WriteCVTInPixels */
            EIF[ ]	/* EndIf */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 2 values pushed */
            39 1
            GETINFO[ ]	/* GetInfo */
            LTEQ[ ]	/* LessThenOrEqual */
            IF[ ]	/* If */
              PUSHW[ ]	/* 3 values pushed */
              2176 1 1088
              GETINFO[ ]	/* GetInfo */
              MUL[ ]	/* Multiply */
              EQ[ ]	/* Equal */
              IF[ ]	/* If */
                PUSHW[ ]	/* 2 values pushed */
                3 0
                WCVTP[ ]	/* WriteCVTInPixels */
              EIF[ ]	/* EndIf */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 4 values pushed */
      17 6 1 14
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHW[ ]	/* 1 value pushed */
      511
      SCANCTRL[ ]	/* ScanConversionControl */
      PUSHB[ ]	/* 1 value pushed */
      4
      SCANTYPE[ ]	/* ScanType */
      PUSHB[ ]	/* 2 values pushed */
      2 0
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 4 values pushed */
      5 100 6 0
      WCVTP[ ]	/* WriteCVTInPixels */
      WCVTP[ ]	/* WriteCVTInPixels */
    </assembly>
  </prep>

  <cvt>
    <cv index="0" value="0"/>
    <cv index="1" value="0"/>
    <cv index="2" value="0"/>
    <cv index="3" value="0"/>
    <cv index="4" value="0"/>
    <cv index="5" value="0"/>
    <cv index="6" value="0"/>
    <cv index="7" value="0"/>
    <cv index="8" value="0"/>
    <cv index="9" value="0"/>
    <cv index="10" value="5"/>
    <cv index="11" value="5"/>
    <cv index="12" value="80"/>
    <cv index="13" value="21"/>
    <cv index="14" value="4"/>
    <cv index="15" value="4"/>
    <cv index="16" value="85"/>
    <cv index="17" value="1045"/>
    <cv index="18" value="-320"/>
    <cv index="19" value="1045"/>
    <cv index="20" value="1045"/>
    <cv index="21" value="-320"/>
    <cv index="22" value="-320"/>
    <cv index="23" value="1045"/>
    <cv index="24" value="-320"/>
    <cv index="25" value="1045"/>
    <cv index="26" value="1045"/>
    <cv index="27" value="-320"/>
    <cv index="28" value="-320"/>
  </cvt>

  <loca>
    <!-- The 'loca' table will be calculated by the compiler -->
  </loca>

  <glyf>

    <!-- The xMin, yMin, xMax and yMax values
         will be recalculated by the compiler. -->

    <TTGlyph name=".notdef"/><!-- contains no outline data -->

    <TTGlyph name="A" xMin="0" yMin="-320" xMax="880" yMax="1045">
      <contour>
        <pt x="0" y="-320" on="1"/>
        <pt x="0" y="1045" on="1"/>
        <pt x="880" y="1045" on="1"/>
        <pt x="880" y="1040" on="1"/>
        <pt x="805" y="1040" on="1"/>
        <pt x="805" y="965" on="1"/>
        <pt x="880" y="965" on="1"/>
        <pt x="880" y="960" on="1"/>
        <pt x="805" y="960" on="1"/>
        <pt x="805" y="885" on="1"/>
        <pt x="880" y="885" on="1"/>
        <pt x="880" y="880" on="1"/>
        <pt x="805" y="880" on="1"/>
        <pt x="805" y="805" on="1"/>
        <pt x="880" y="805" on="1"/>
        <pt x="880" y="800" on="1"/>
        <pt x="805" y="800" on="1"/>
        <pt x="805" y="725" on="1"/>
        <pt x="880" y="725" on="1"/>
        <pt x="880" y="640" on="1"/>
        <pt x="805" y="640" on="1"/>
        <pt x="805" y="565" on="1"/>
        <pt x="880" y="565" on="1"/>
        <pt x="880" y="560" on="1"/>
        <pt x="805" y="560" on="1"/>
        <pt x="805" y="485" on="1"/>
        <pt x="880" y="485" on="1"/>
        <pt x="880" y="480" on="1"/>
        <pt x="805" y="480" on="1"/>
        <pt x="805" y="405" on="1"/>
        <pt x="880" y="405" on="1"/>
        <pt x="880" y="400" on="1"/>
        <pt x="805" y="400" on="1"/>
        <pt x="805" y="325" on="1"/>
        <pt x="880" y="325" on="1"/>
        <pt x="880" y="320" on="1"/>
        <pt x="805" y="320" on="1"/>
        <pt x="805" y="245" on="1"/>
        <pt x="880" y="245" on="1"/>
        <pt x="880" y="240" on="1"/>
        <pt x="805" y="240" on="1"/>
        <pt x="805" y="165" on="1"/>
        <pt x="880" y="165" on="1"/>
        <pt x="880" y="80" on="1"/>
        <pt x="805" y="80" on="1"/>
        <pt x="805" y="5" on="1"/>
        <pt x="880" y="5" on="1"/>
        <pt x="880" y="0" on="1"/>
        <pt x="805" y="0" on="1"/>
        <pt x="805" y="-75" on="1"/>
        <pt x="880" y="-75" on="1"/>
        <pt x="880" y="-80" on="1"/>
        <pt x="805" y="-80" on="1"/>
        <pt x="805" y="-155" on="1"/>
        <pt x="880" y="-155" on="1"/>
        <pt x="880" y="-160" on="1"/>
        <pt x="805" y="-160" on="1"/>
        <pt x="805" y="-235" on="1"/>
        <pt x="880" y="-235" on="1"/>
        <pt x="880" y="-240" on="1"/>
        <pt x="805" y="-240" on="1"/>
        <pt x="805" y="-315" on="1"/>
        <pt x="880" y="-315" on="1"/>
        <pt x="880" y="-320" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="965" on="1"/>
        <pt x="800" y="965" on="1"/>
        <pt x="800" y="1040" on="1"/>
        <pt x="725" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="965" on="1"/>
        <pt x="240" y="965" on="1"/>
        <pt x="240" y="1040" on="1"/>
        <pt x="165" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="965" on="1"/>
        <pt x="400" y="965" on="1"/>
        <pt x="400" y="1040" on="1"/>
        <pt x="325" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="965" on="1"/>
        <pt x="160" y="965" on="1"/>
        <pt x="160" y="1040" on="1"/>
        <pt x="85" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="405" y="965" on="1"/>
        <pt x="480" y="965" on="1"/>
        <pt x="480" y="1040" on="1"/>
        <pt x="405" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="965" on="1"/>
        <pt x="720" y="965" on="1"/>
        <pt x="720" y="1040" on="1"/>
        <pt x="645" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="965" on="1"/>
        <pt x="320" y="965" on="1"/>
        <pt x="320" y="1040" on="1"/>
        <pt x="245" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="965" on="1"/>
        <pt x="560" y="965" on="1"/>
        <pt x="560" y="1040" on="1"/>
        <pt x="485" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="965" on="1"/>
        <pt x="80" y="965" on="1"/>
        <pt x="80" y="1040" on="1"/>
        <pt x="5" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="965" on="1"/>
        <pt x="640" y="965" on="1"/>
        <pt x="640" y="1040" on="1"/>
        <pt x="565" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="885" on="1"/>
        <pt x="560" y="885" on="1"/>
        <pt x="560" y="960" on="1"/>
        <pt x="485" y="960" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="885" on="1"/>
        <pt x="640" y="885" on="1"/>
        <pt x="640" y="960" on="1"/>
        <pt x="565" y="960" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="885" on="1"/>
        <pt x="240" y="885" on="1"/>
        <pt x="240" y="960" on="1"/>
        <pt x="165" y="960" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="885" on="1"/>
        <pt x="800" y="885" on="1"/>
        <pt x="800" y="960" on="1"/>
        <pt x="725" y="960" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="885" on="1"/>
        <pt x="400" y="885" on="1"/>
        <pt x="400" y="960" on="1"/>
        <pt x="325" y="960" on="1"/>
      </contour>
      <contour>
        <pt x="405" y="885" on="1"/>
        <pt x="480" y="885" on="1"/>
        <pt x="480" y="960" on="1"/>
        <pt x="405" y="960" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="885" on="1"/>
        <pt x="80" y="885" on="1"/>
        <pt x="80" y="960" on="1"/>
        <pt x="5" y="960" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="885" on="1"/>
        <pt x="160" y="885" on="1"/>
        <pt x="160" y="960" on="1"/>
        <pt x="85" y="960" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="885" on="1"/>
        <pt x="720" y="885" on="1"/>
        <pt x="720" y="960" on="1"/>
        <pt x="645" y="960" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="885" on="1"/>
        <pt x="320" y="885" on="1"/>
        <pt x="320" y="960" on="1"/>
        <pt x="245" y="960" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="805" on="1"/>
        <pt x="240" y="805" on="1"/>
        <pt x="240" y="880" on="1"/>
        <pt x="165" y="880" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="805" on="1"/>
        <pt x="720" y="805" on="1"/>
        <pt x="720" y="880" on="1"/>
        <pt x="645" y="880" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="805" on="1"/>
        <pt x="560" y="805" on="1"/>
        <pt x="560" y="880" on="1"/>
        <pt x="485" y="880" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="805" on="1"/>
        <pt x="640" y="805" on="1"/>
        <pt x="640" y="880" on="1"/>
        <pt x="565" y="880" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="805" on="1"/>
        <pt x="160" y="805" on="1"/>
        <pt x="160" y="880" on="1"/>
        <pt x="85" y="880" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="805" on="1"/>
        <pt x="80" y="805" on="1"/>
        <pt x="80" y="880" on="1"/>
        <pt x="5" y="880" on="1"/>
      </contour>
      <contour>
        <pt x="405" y="805" on="1"/>
        <pt x="480" y="805" on="1"/>
        <pt x="480" y="880" on="1"/>
        <pt x="405" y="880" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="805" on="1"/>
        <pt x="800" y="805" on="1"/>
        <pt x="800" y="880" on="1"/>
        <pt x="725" y="880" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="805" on="1"/>
        <pt x="400" y="805" on="1"/>
        <pt x="400" y="880" on="1"/>
        <pt x="325" y="880" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="805" on="1"/>
        <pt x="320" y="805" on="1"/>
        <pt x="320" y="880" on="1"/>
        <pt x="245" y="880" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="725" on="1"/>
        <pt x="560" y="725" on="1"/>
        <pt x="560" y="800" on="1"/>
        <pt x="485" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="725" on="1"/>
        <pt x="320" y="725" on="1"/>
        <pt x="320" y="800" on="1"/>
        <pt x="245" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="725" on="1"/>
        <pt x="640" y="725" on="1"/>
        <pt x="640" y="800" on="1"/>
        <pt x="565" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="725" on="1"/>
        <pt x="160" y="725" on="1"/>
        <pt x="160" y="800" on="1"/>
        <pt x="85" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="725" on="1"/>
        <pt x="720" y="725" on="1"/>
        <pt x="720" y="800" on="1"/>
        <pt x="645" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="725" on="1"/>
        <pt x="800" y="725" on="1"/>
        <pt x="800" y="800" on="1"/>
        <pt x="725" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="405" y="725" on="1"/>
        <pt x="480" y="725" on="1"/>
        <pt x="480" y="800" on="1"/>
        <pt x="405" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="725" on="1"/>
        <pt x="80" y="725" on="1"/>
        <pt x="80" y="800" on="1"/>
        <pt x="5" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="725" on="1"/>
        <pt x="400" y="725" on="1"/>
        <pt x="400" y="800" on="1"/>
        <pt x="325" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="725" on="1"/>
        <pt x="240" y="725" on="1"/>
        <pt x="240" y="800" on="1"/>
        <pt x="165" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="645" on="1"/>
        <pt x="720" y="645" on="1"/>
        <pt x="720" y="720" on="1"/>
        <pt x="645" y="720" on="1"/>
      </contour>
      <contour>
        <pt x="405" y="645" on="1"/>
        <pt x="480" y="645" on="1"/>
        <pt x="480" y="720" on="1"/>
        <pt x="405" y="720" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="645" on="1"/>
        <pt x="80" y="645" on="1"/>
        <pt x="80" y="720" on="1"/>
        <pt x="5" y="720" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="645" on="1"/>
        <pt x="160" y="645" on="1"/>
        <pt x="160" y="720" on="1"/>
        <pt x="85" y="720" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="565" on="1"/>
        <pt x="240" y="565" on="1"/>
        <pt x="240" y="640" on="1"/>
        <pt x="165" y="640" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="565" on="1"/>
        <pt x="400" y="565" on="1"/>
        <pt x="400" y="640" on="1"/>
        <pt x="325" y="640" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="565" on="1"/>
        <pt x="560" y="565" on="1"/>
        <pt x="560" y="640" on="1"/>
        <pt x="485" y="640" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="565" on="1"/>
        <pt x="640" y="565" on="1"/>
        <pt x="640" y="640" on="1"/>
        <pt x="565" y="640" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="565" on="1"/>
        <pt x="80" y="565" on="1"/>
        <pt x="80" y="640" on="1"/>
        <pt x="5" y="640" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="565" on="1"/>
        <pt x="800" y="565" on="1"/>
        <pt x="800" y="640" on="1"/>
        <pt x="725" y="640" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="565" on="1"/>
        <pt x="320" y="565" on="1"/>
        <pt x="320" y="640" on="1"/>
        <pt x="245" y="640" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="485" on="1"/>
        <pt x="400" y="485" on="1"/>
        <pt x="400" y="560" on="1"/>
        <pt x="325" y="560" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="485" on="1"/>
        <pt x="320" y="485" on="1"/>
        <pt x="320" y="560" on="1"/>
        <pt x="245" y="560" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="485" on="1"/>
        <pt x="800" y="485" on="1"/>
        <pt x="800" y="560" on="1"/>
        <pt x="725" y="560" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="485" on="1"/>
        <pt x="80" y="485" on="1"/>
        <pt x="80" y="560" on="1"/>
        <pt x="5" y="560" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="485" on="1"/>
        <pt x="640" y="485" on="1"/>
        <pt x="640" y="560" on="1"/>
        <pt x="565" y="560" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="485" on="1"/>
        <pt x="240" y="485" on="1"/>
        <pt x="240" y="560" on="1"/>
        <pt x="165" y="560" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="485" on="1"/>
        <pt x="560" y="485" on="1"/>
        <pt x="560" y="560" on="1"/>
        <pt x="485" y="560" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="405" on="1"/>
        <pt x="320" y="405" on="1"/>
        <pt x="320" y="480" on="1"/>
        <pt x="245" y="480" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="405" on="1"/>
        <pt x="800" y="405" on="1"/>
        <pt x="800" y="480" on="1"/>
        <pt x="725" y="480" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="405" on="1"/>
        <pt x="80" y="405" on="1"/>
        <pt x="80" y="480" on="1"/>
        <pt x="5" y="480" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="405" on="1"/>
        <pt x="640" y="405" on="1"/>
        <pt x="640" y="480" on="1"/>
        <pt x="565" y="480" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="405" on="1"/>
        <pt x="400" y="405" on="1"/>
        <pt x="400" y="480" on="1"/>
        <pt x="325" y="480" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="405" on="1"/>
        <pt x="560" y="405" on="1"/>
        <pt x="560" y="480" on="1"/>
        <pt x="485" y="480" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="405" on="1"/>
        <pt x="160" y="405" on="1"/>
        <pt x="160" y="480" on="1"/>
        <pt x="85" y="480" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="325" on="1"/>
        <pt x="800" y="325" on="1"/>
        <pt x="800" y="400" on="1"/>
        <pt x="725" y="400" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="325" on="1"/>
        <pt x="80" y="325" on="1"/>
        <pt x="80" y="400" on="1"/>
        <pt x="5" y="400" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="325" on="1"/>
        <pt x="640" y="325" on="1"/>
        <pt x="640" y="400" on="1"/>
        <pt x="565" y="400" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="325" on="1"/>
        <pt x="400" y="325" on="1"/>
        <pt x="400" y="400" on="1"/>
        <pt x="325" y="400" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="325" on="1"/>
        <pt x="240" y="325" on="1"/>
        <pt x="240" y="400" on="1"/>
        <pt x="165" y="400" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="325" on="1"/>
        <pt x="160" y="325" on="1"/>
        <pt x="160" y="400" on="1"/>
        <pt x="85" y="400" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="325" on="1"/>
        <pt x="560" y="325" on="1"/>
        <pt x="560" y="400" on="1"/>
        <pt x="485" y="400" on="1"/>
      </contour>
      <contour>
        <pt x="160" y="320" on="1"/>
        <pt x="85" y="320" on="1"/>
        <pt x="85" y="245" on="1"/>
        <pt x="160" y="245" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="245" on="1"/>
        <pt x="800" y="245" on="1"/>
        <pt x="800" y="320" on="1"/>
        <pt x="725" y="320" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="245" on="1"/>
        <pt x="80" y="245" on="1"/>
        <pt x="80" y="320" on="1"/>
        <pt x="5" y="320" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="245" on="1"/>
        <pt x="400" y="245" on="1"/>
        <pt x="400" y="320" on="1"/>
        <pt x="325" y="320" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="245" on="1"/>
        <pt x="640" y="245" on="1"/>
        <pt x="640" y="320" on="1"/>
        <pt x="565" y="320" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="245" on="1"/>
        <pt x="560" y="245" on="1"/>
        <pt x="560" y="320" on="1"/>
        <pt x="485" y="320" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="165" on="1"/>
        <pt x="320" y="165" on="1"/>
        <pt x="320" y="240" on="1"/>
        <pt x="245" y="240" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="165" on="1"/>
        <pt x="160" y="165" on="1"/>
        <pt x="160" y="240" on="1"/>
        <pt x="85" y="240" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="165" on="1"/>
        <pt x="800" y="165" on="1"/>
        <pt x="800" y="240" on="1"/>
        <pt x="725" y="240" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="165" on="1"/>
        <pt x="80" y="165" on="1"/>
        <pt x="80" y="240" on="1"/>
        <pt x="5" y="240" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="165" on="1"/>
        <pt x="400" y="165" on="1"/>
        <pt x="400" y="240" on="1"/>
        <pt x="325" y="240" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="165" on="1"/>
        <pt x="640" y="165" on="1"/>
        <pt x="640" y="240" on="1"/>
        <pt x="565" y="240" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="165" on="1"/>
        <pt x="560" y="165" on="1"/>
        <pt x="560" y="240" on="1"/>
        <pt x="485" y="240" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="165" on="1"/>
        <pt x="240" y="165" on="1"/>
        <pt x="240" y="240" on="1"/>
        <pt x="165" y="240" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="85" on="1"/>
        <pt x="800" y="85" on="1"/>
        <pt x="800" y="160" on="1"/>
        <pt x="725" y="160" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="85" on="1"/>
        <pt x="80" y="85" on="1"/>
        <pt x="80" y="160" on="1"/>
        <pt x="5" y="160" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="85" on="1"/>
        <pt x="400" y="85" on="1"/>
        <pt x="400" y="160" on="1"/>
        <pt x="325" y="160" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="85" on="1"/>
        <pt x="320" y="85" on="1"/>
        <pt x="320" y="160" on="1"/>
        <pt x="245" y="160" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="85" on="1"/>
        <pt x="160" y="85" on="1"/>
        <pt x="160" y="160" on="1"/>
        <pt x="85" y="160" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="85" on="1"/>
        <pt x="560" y="85" on="1"/>
        <pt x="560" y="160" on="1"/>
        <pt x="485" y="160" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="85" on="1"/>
        <pt x="240" y="85" on="1"/>
        <pt x="240" y="160" on="1"/>
        <pt x="165" y="160" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="5" on="1"/>
        <pt x="240" y="5" on="1"/>
        <pt x="240" y="80" on="1"/>
        <pt x="165" y="80" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="5" on="1"/>
        <pt x="160" y="5" on="1"/>
        <pt x="160" y="80" on="1"/>
        <pt x="85" y="80" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="5" on="1"/>
        <pt x="320" y="5" on="1"/>
        <pt x="320" y="80" on="1"/>
        <pt x="245" y="80" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="5" on="1"/>
        <pt x="640" y="5" on="1"/>
        <pt x="640" y="80" on="1"/>
        <pt x="565" y="80" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="5" on="1"/>
        <pt x="80" y="5" on="1"/>
        <pt x="80" y="80" on="1"/>
        <pt x="5" y="80" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="5" on="1"/>
        <pt x="720" y="5" on="1"/>
        <pt x="720" y="80" on="1"/>
        <pt x="645" y="80" on="1"/>
      </contour>
      <contour>
        <pt x="405" y="5" on="1"/>
        <pt x="480" y="5" on="1"/>
        <pt x="480" y="80" on="1"/>
        <pt x="405" y="80" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="-75" on="1"/>
        <pt x="400" y="-75" on="1"/>
        <pt x="400" y="0" on="1"/>
        <pt x="325" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="-75" on="1"/>
        <pt x="80" y="-75" on="1"/>
        <pt x="80" y="0" on="1"/>
        <pt x="5" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="405" y="-75" on="1"/>
        <pt x="480" y="-75" on="1"/>
        <pt x="480" y="0" on="1"/>
        <pt x="405" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="-75" on="1"/>
        <pt x="560" y="-75" on="1"/>
        <pt x="560" y="0" on="1"/>
        <pt x="485" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="-75" on="1"/>
        <pt x="160" y="-75" on="1"/>
        <pt x="160" y="0" on="1"/>
        <pt x="85" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="-75" on="1"/>
        <pt x="320" y="-75" on="1"/>
        <pt x="320" y="0" on="1"/>
        <pt x="245" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="-75" on="1"/>
        <pt x="240" y="-75" on="1"/>
        <pt x="240" y="0" on="1"/>
        <pt x="165" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="-75" on="1"/>
        <pt x="640" y="-75" on="1"/>
        <pt x="640" y="0" on="1"/>
        <pt x="565" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="-75" on="1"/>
        <pt x="800" y="-75" on="1"/>
        <pt x="800" y="0" on="1"/>
        <pt x="725" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="-75" on="1"/>
        <pt x="720" y="-75" on="1"/>
        <pt x="720" y="0" on="1"/>
        <pt x="645" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="-155" on="1"/>
        <pt x="160" y="-155" on="1"/>
        <pt x="160" y="-80" on="1"/>
        <pt x="85" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="-155" on="1"/>
        <pt x="400" y="-155" on="1"/>
        <pt x="400" y="-80" on="1"/>
        <pt x="325" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="-155" on="1"/>
        <pt x="720" y="-155" on="1"/>
        <pt x="720" y="-80" on="1"/>
        <pt x="645" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="405" y="-155" on="1"/>
        <pt x="480" y="-155" on="1"/>
        <pt x="480" y="-80" on="1"/>
        <pt x="405" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="-155" on="1"/>
        <pt x="800" y="-155" on="1"/>
        <pt x="800" y="-80" on="1"/>
        <pt x="725" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="-155" on="1"/>
        <pt x="560" y="-155" on="1"/>
        <pt x="560" y="-80" on="1"/>
        <pt x="485" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="-155" on="1"/>
        <pt x="240" y="-155" on="1"/>
        <pt x="240" y="-80" on="1"/>
        <pt x="165" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="-155" on="1"/>
        <pt x="640" y="-155" on="1"/>
        <pt x="640" y="-80" on="1"/>
        <pt x="565" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="-155" on="1"/>
        <pt x="320" y="-155" on="1"/>
        <pt x="320" y="-80" on="1"/>
        <pt x="245" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="-155" on="1"/>
        <pt x="80" y="-155" on="1"/>
        <pt x="80" y="-80" on="1"/>
        <pt x="5" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="-235" on="1"/>
        <pt x="160" y="-235" on="1"/>
        <pt x="160" y="-160" on="1"/>
        <pt x="85" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="-235" on="1"/>
        <pt x="400" y="-235" on="1"/>
        <pt x="400" y="-160" on="1"/>
        <pt x="325" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="-235" on="1"/>
        <pt x="720" y="-235" on="1"/>
        <pt x="720" y="-160" on="1"/>
        <pt x="645" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="-235" on="1"/>
        <pt x="240" y="-235" on="1"/>
        <pt x="240" y="-160" on="1"/>
        <pt x="165" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="-235" on="1"/>
        <pt x="560" y="-235" on="1"/>
        <pt x="560" y="-160" on="1"/>
        <pt x="485" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="-235" on="1"/>
        <pt x="800" y="-235" on="1"/>
        <pt x="800" y="-160" on="1"/>
        <pt x="725" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="-235" on="1"/>
        <pt x="320" y="-235" on="1"/>
        <pt x="320" y="-160" on="1"/>
        <pt x="245" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="-235" on="1"/>
        <pt x="640" y="-235" on="1"/>
        <pt x="640" y="-160" on="1"/>
        <pt x="565" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="405" y="-235" on="1"/>
        <pt x="480" y="-235" on="1"/>
        <pt x="480" y="-160" on="1"/>
        <pt x="405" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="-235" on="1"/>
        <pt x="80" y="-235" on="1"/>
        <pt x="80" y="-160" on="1"/>
        <pt x="5" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="-315" on="1"/>
        <pt x="160" y="-315" on="1"/>
        <pt x="160" y="-240" on="1"/>
        <pt x="85" y="-240" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="-315" on="1"/>
        <pt x="720" y="-315" on="1"/>
        <pt x="720" y="-240" on="1"/>
        <pt x="645" y="-240" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="-315" on="1"/>
        <pt x="560" y="-315" on="1"/>
        <pt x="560" y="-240" on="1"/>
        <pt x="485" y="-240" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="-315" on="1"/>
        <pt x="400" y="-315" on="1"/>
        <pt x="400" y="-240" on="1"/>
        <pt x="325" y="-240" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="-315" on="1"/>
        <pt x="320" y="-315" on="1"/>
        <pt x="320" y="-240" on="1"/>
        <pt x="245" y="-240" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="-315" on="1"/>
        <pt x="240" y="-315" on="1"/>
        <pt x="240" y="-240" on="1"/>
        <pt x="165" y="-240" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="-315" on="1"/>
        <pt x="800" y="-315" on="1"/>
        <pt x="800" y="-240" on="1"/>
        <pt x="725" y="-240" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="-315" on="1"/>
        <pt x="640" y="-315" on="1"/>
        <pt x="640" y="-240" on="1"/>
        <pt x="565" y="-240" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="-315" on="1"/>
        <pt x="80" y="-315" on="1"/>
        <pt x="80" y="-240" on="1"/>
        <pt x="5" y="-240" on="1"/>
      </contour>
      <contour>
        <pt x="405" y="-315" on="1"/>
        <pt x="480" y="-315" on="1"/>
        <pt x="480" y="-240" on="1"/>
        <pt x="405" y="-240" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHW[ ]	/* 41 values pushed */
          5 1 30 9 1 46 13 1 60 21 1 114 25 1 126 29 1 138 33 1 152 37 1 164 45
          1 208 49 1 234 53 1 248 57 1 264 61 1 280 13 75
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          9
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            NPUSHW[ ]	/* 255 values pushed */
            0 37 0 35 1 37 114 0 35 33 1 35 112 0 33 31 1 33 112 0 31 29 1 31 112
            0 29 27 1 29 112 0 27 25 1 27 112 0 25 23 1 25 112 0 23 21 1 23 112 0
            21 19 1 21 112 0 19 18 1 19 112 0 18 20 0 18 112 0 20 22 0 20 112 0 22
            24 0 22 112 0 24 26 0 24 112 0 26 28 0 26 112 0 28 30 0 28 112 0 30 32
            0 30 112 0 32 34 0 32 112 0 34 36 0 34 112 0 36 1 0 36 112 0 57 1 55
            1 57 114 0 55 53 1 55 112 0 53 51 1 53 112 0 51 49 1 51 112 0 49 47 1
            49 112 0 47 45 1 47 112 0 45 43 1 45 112 0 43 41 1 43 112 0 41 39 1 41
            112 0 39 38 1 39 112 0 38 40 32 38 112 0 40 42 36 40 112 0 42 44 20 42 112
            0 44 46 18 44 112 0 46 48 22 46 112 0 48 50 26 48 112 0 50 52 34 50 112 0
            52 54 24 52 112 0 54 56 28 54 112 0 56 2 30 56 112 0 2 77 1 2 112 0 77
            75 1 77 75 126
            NPUSHW[ ]	/* 255 values pushed */
            0 75 73 1 75 73 126 0 73 71 1 73 71 126 0 71 69 1 71 69 126 0 69 67 1
            69 67 126 0 67 65 1 67 65 126 0 65 63 1 65 63 126 0 63 61 1 63 61 126 0
            61 59 1 61 59 126 0 59 58 1 59 58 126 0 58 60 42 58 112 0 60 62 54 60 112
            0 62 64 38 62 112 0 64 66 40 64 112 0 66 68 52 66 112 0 68 70 50 68 112 0
            70 72 48 70 112 0 72 74 44 72 112 0 74 76 46 74 112 0 76 3 56 76 112 0 3
            97 1 3 112 0 97 95 1 97 95 126 0 95 93 1 95 93 126 0 93 91 1 93 91 126
            0 91 89 1 91 89 126 0 89 87 1 89 87 126 0 87 85 1 87 85 126 0 85 83 1
            85 83 126 0 83 81 1 83 81 126 0 81 79 1 81 79 126 0 79 4 1 79 4 126 0
            84 82 86 66 84 114 0 86 88 60 86 112 0 90 88 92 70 90 114 0 92 94 68 92 112
            0 105 96 103 96 105 103 128 0 103 101 96 103 101 126 0 101 99 96 101 99 126 0 99 98
            96 99 98 126 0
            NPUSHW[ ]	/* 255 values pushed */
            102 100 104 92 102 114 0 115 117 113 117 115 113 128 0 114 112 116 102 114 114 0 6 118 133
            5 6 114 0 127 129 125 129 127 125 128 0 120 121 122 108 120 114 0 122 124 118 122 112 0
            124 126 116 124 112 0 126 128 114 126 112 0 128 130 112 128 112 0 132 130 7 110 132 114 0
            7 147 5 7 112 0 145 147 143 133 145 114 0 143 141 121 143 112 0 141 139 129 141 112 0
            139 137 147 139 137 126 0 137 135 125 137 112 0 135 134 123 135 112 0 136 134 138 124 136 114
            0 138 140 126 138 112 0 140 142 128 140 112 0 142 144 120 142 112 0 144 146 132 144 112 0
            8 146 161 146 8 161 128 0 161 159 146 161 159 126 0 155 157 153 157 155 153 128 0 153 151
            157 153 151 126 0 151 149 157 151 149 126 0 149 148 157 149 148 126 0 148 150 136 148 112 0
            150 152 138 150 112 0 152 154 140 152 112 0 154 156 142 154 112 0 158 156 160 146 158 114 0
            160 9 144 160 112 0 9 173 156 9 173 126 0 173 171 156 173 171 126 0 171 169 156 171 169
            126 0 169 167 156
            NPUSHW[ ]	/* 255 values pushed */
            169 167 126 0 167 165 156 167 165 126 0 165 162 156 165 162 126 0 162 163 159 162 112 0 163
            164 158 163 112 0 164 166 148 164 112 0 166 168 150 166 112 0 168 170 154 168 112 0 170 172
            152 170 112 0 172 10 160 172 112 0 10 189 156 10 189 126 0 187 189 185 189 187 185 128 0
            185 183 189 185 183 126 0 183 181 189 183 181 126 0 181 179 189 181 179 126 0 179 177 189 179
            177 126 0 177 175 189 177 175 126 0 176 174 178 163 176 114 0 178 180 164 178 112 0 180 182
            166 180 112 0 182 184 168 182 112 0 186 184 188 172 186 114 0 201 203 199 203 201 199 128 0
            199 197 203 199 197 126 0 195 197 193 197 195 193 128 0 193 191 197 193 191 126 0 191 190 197
            191 190 126 0 192 190 194 180 192 114 0 196 194 198 174 196 114 0 198 200 176 198 112 0 202
            200 217 188 202 114 0 213 215 211 215 213 211 128 0 209 211 207 197 209 114 0 207 205 211 207
            205 126 0 205 12 203 205 112 0 204 12 206 202 204 114 0 206 208 198 206 112 0 208 210 196
            208 112 0 212 210
            NPUSHW[ ]	/* 255 values pushed */
            214 192 212 114 0 13 216 237 12 13 114 0 231 233 229 233 231 229 128 0 229 227 233 229 227
            126 0 227 225 233 227 225 126 0 221 223 219 223 221 219 128 0 220 218 222 212 220 114 0 222
            224 216 222 112 0 226 224 228 206 226 114 0 228 230 208 228 112 0 230 232 204 230 112 0 232
            234 210 232 112 0 236 234 14 214 236 114 0 14 257 12 14 112 0 257 255 234 257 255 126 0
            255 253 234 255 253 126 0 253 251 233 253 112 0 251 249 234 251 249 126 0 245 247 243 223 245
            114 0 243 241 237 243 112 0 239 241 238 241 239 238 128 0 238 240 226 238 112 0 240 242 218
            240 112 0 242 244 236 242 112 0 244 246 222 244 112 0 246 248 234 246 112 0 248 250 224 248
            112 0 250 252 230 250 112 0 252 254 232 252 112 0 254 256 228 254 112 0 256 15 220 256 112
            0 15 277 241 15 277 126 0 277 275 241 277 275 126 0 275 273 241 275 273 126 0 273 271 241
            273 271 126 0 271 269 241 271 269 126 0 269 267 247 269 112 0 267 265 249 267 112 0 265 263
            241 265 263 126 0
            NPUSHW[ ]	/* 255 values pushed */
            263 261 241 263 261 126 0 261 259 241 261 112 0 259 258 241 259 258 126 0 260 258 262 258 260
            114 0 262 264 258 262 112 0 264 266 258 264 112 0 266 268 258 266 112 0 268 270 258 268 112
            0 270 272 258 270 112 0 272 274 258 272 112 0 274 276 258 274 112 0 276 16 258 276 112 0
            16 297 258 16 297 126 0 297 295 258 297 295 126 0 295 293 258 295 293 126 0 293 291 258 293
            291 126 0 291 289 258 291 289 126 0 289 287 258 289 287 126 0 287 285 258 287 285 126 0 285
            283 258 285 283 126 0 283 281 258 283 281 126 0 281 279 258 281 279 126 0 279 278 258 279 278
            126 0 278 280 258 278 112 0 280 282 258 280 112 0 282 284 258 282 112 0 284 286 258 284 112
            0 286 288 258 286 112 0 288 290 258 288 112 0 290 292 258 290 112 0 292 294 258 292 112 0
            294 296 258 294 112 0 296 17 258 296 112 0 80 0 119 117 80 119 103 0 88 0 117 115 88
            117 103 0 82 0 113 111 82 113 103 0 78 0 111 109 78 111 103 0 94 0 109 107 94 109
            103 0 96 0 107
            NPUSHW[ ]	/* 242 values pushed */
            5 96 107 103 0 4 0 5 106 4 5 103 0 110 0 133 131 110 133 103 0 106 0 131 129
            106 131 103 0 112 0 129 127 112 129 103 0 116 0 125 123 116 125 103 0 118 0 123 121 118
            123 103 0 108 0 121 120 108 121 103 0 104 0 147 145 104 147 103 0 146 0 159 157 146 159
            103 0 130 0 157 155 130 157 103 0 156 0 189 187 156 189 103 0 134 0 175 11 134 175 103
            0 188 0 203 201 188 203 103 0 174 0 197 195 174 197 103 0 100 0 217 215 100 217 103 0
            98 0 215 213 98 215 103 0 184 0 211 209 184 211 103 0 11 0 12 204 11 12 103 0 214
            0 237 235 214 237 103 0 190 0 235 233 190 235 103 0 210 0 233 231 210 233 103 0 200 0
            225 223 200 225 103 0 216 0 223 221 216 223 103 0 194 0 219 218 194 219 103 0 224 0 249
            247 224 249 103 0 234 0 247 245 234 247 103 0 218 0 241 239 218 241 103 0 1 1 0 96
            0 0 0 17 77 0 258 258 17 95 298 1 17 17 18 17 78
          ELSE[ ]	/* Else */
            MPPEM[ ]	/* MeasurePixelPerEm */
            PUSHB[ ]	/* 1 value pushed */
            17
            LT[ ]	/* LessThan */
            IF[ ]	/* If */
              NPUSHW[ ]	/* 255 values pushed */
              0 37 0 35 1 37 114 0 35 33 1 35 112 0 33 31 1 33 112 0 31 29 1 31 112
              0 29 27 1 29 112 0 27 25 1 27 112 0 25 23 1 25 112 0 23 21 1 23 112 0
              21 19 1 21 112 0 19 18 1 19 112 0 18 20 0 18 112 0 20 22 0 20 112 0 22
              24 0 22 112 0 24 26 0 24 112 0 26 28 0 26 112 0 28 30 0 28 112 0 30 32
              0 30 112 0 32 34 0 32 112 0 34 36 0 34 112 0 36 1 0 36 112 0 57 1 55
              1 57 114 0 55 53 1 55 112 0 53 51 1 53 112 0 51 49 1 51 112 0 49 47 1
              49 112 0 47 45 1 47 112 0 45 43 1 45 112 0 43 41 1 43 112 0 41 39 1 41
              112 0 39 38 1 39 112 0 38 40 32 38 112 0 40 42 36 40 112 0 42 44 20 42 112
              0 44 46 18 44 112 0 46 48 22 46 112 0 48 50 26 48 112 0 50 52 34 50 112 0
              52 54 24 52 112 0 54 56 28 54 112 0 56 2 30 56 112 0 2 77 1 2 112 0 77
              75 1 77 75 126
              NPUSHW[ ]	/* 255 values pushed */
              0 75 73 1 75 73 126 0 73 71 1 73 71 126 0 71 69 1 71 69 126 0 69 67 1
              69 67 126 0 67 65 1 67 65 126 0 65 63 1 65 63 126 0 63 61 1 63 61 126 0
              61 59 1 61 59 126 0 59 58 1 59 58 126 0 58 60 42 58 112 0 60 62 54 60 112
              0 62 64 38 62 112 0 64 66 40 64 112 0 66 68 52 66 112 0 68 70 50 68 112 0
              70 72 48 70 112 0 72 74 44 72 112 0 74 76 46 74 112 0 76 3 56 76 112 0 3
              97 1 3 97 126 0 97 95 1 97 95 126 0 95 93 1 95 93 126 0 93 91 1 93 91
              126 0 91 89 1 91 89 126 0 89 87 1 89 87 126 0 87 85 1 87 85 126 0 85 83
              1 85 83 126 0 83 81 1 83 81 126 0 81 79 1 81 79 126 0 79 4 1 79 4 126
              0 84 82 86 66 84 114 0 86 88 60 86 112 0 90 88 92 70 90 114 0 92 94 68 92
              112 0 105 96 103 96 105 103 128 0 103 101 96 103 101 126 0 101 99 96 101 99 126 0 99
              98 96 99 98 126
              NPUSHW[ ]	/* 255 values pushed */
              0 102 100 104 92 102 114 0 115 117 113 117 115 113 128 0 114 112 116 102 114 114 0 6 118
              133 5 6 114 0 127 129 125 129 127 125 128 0 120 121 122 108 120 114 0 122 124 118 122 112
              0 124 126 116 124 112 0 126 128 114 126 112 0 128 130 112 128 112 0 132 130 7 110 132 114
              0 7 147 130 7 147 126 0 145 147 143 133 145 114 0 143 141 121 143 112 0 141 139 129 141
              112 0 139 137 147 139 137 126 0 137 135 125 137 112 0 135 134 123 135 112 0 136 134 138 124
              136 114 0 138 140 126 138 112 0 140 142 128 140 112 0 142 144 120 142 112 0 144 146 132 144
              112 0 8 146 161 146 8 161 128 0 161 159 146 161 159 126 0 155 157 153 157 155 153 128 0
              153 151 157 153 151 126 0 151 149 157 151 149 126 0 149 148 157 149 148 126 0 148 150 136 148
              112 0 150 152 138 150 112 0 152 154 140 152 112 0 154 156 142 154 112 0 158 156 160 146 158
              114 0 160 9 144 160 112 0 9 173 156 9 173 126 0 173 171 156 173 171 126 0 171 169 156
              171 169 126 0 169
              NPUSHW[ ]	/* 255 values pushed */
              167 156 169 167 126 0 167 165 156 167 165 126 0 165 162 156 165 162 126 0 162 163 159 162 112
              0 163 164 158 163 112 0 164 166 148 164 112 0 166 168 150 166 112 0 168 170 154 168 112 0
              170 172 152 170 112 0 172 10 160 172 112 0 10 189 156 10 189 126 0 187 189 185 189 187 185
              128 0 185 183 189 185 183 126 0 183 181 189 183 181 126 0 181 179 189 181 179 126 0 179 177
              189 179 177 126 0 177 175 189 177 175 126 0 176 174 178 163 176 114 0 178 180 164 178 112 0
              180 182 166 180 112 0 182 184 168 182 112 0 186 184 188 172 186 114 0 201 203 199 203 201 199
              128 0 199 197 203 199 197 126 0 195 197 193 197 195 193 128 0 193 191 197 193 191 126 0 191
              190 197 191 190 126 0 192 190 194 180 192 114 0 196 194 198 174 196 114 0 198 200 176 198 112
              0 202 200 217 188 202 114 0 213 215 211 215 213 211 128 0 209 211 207 197 209 114 0 207 205
              211 207 205 126 0 205 12 203 205 112 0 204 12 206 202 204 114 0 206 208 198 206 112 0 208
              210 196 208 112 0
              NPUSHW[ ]	/* 255 values pushed */
              212 210 214 192 212 114 0 13 216 237 12 13 114 0 231 233 229 233 231 229 128 0 229 227 233
              229 227 126 0 227 225 233 227 225 126 0 221 223 219 223 221 219 128 0 220 218 222 212 220 114
              0 222 224 216 222 112 0 226 224 228 206 226 114 0 228 230 208 228 112 0 230 232 204 230 112
              0 232 234 210 232 112 0 236 234 14 214 236 114 0 14 257 234 14 257 126 0 257 255 234 257
              255 126 0 255 253 234 255 253 126 0 253 251 233 253 112 0 251 249 234 251 249 126 0 245 247
              243 223 245 114 0 243 241 237 243 112 0 239 241 238 241 239 238 128 0 238 240 226 238 112 0
              240 242 218 240 112 0 242 244 236 242 112 0 244 246 222 244 112 0 246 248 234 246 112 0 248
              250 224 248 112 0 250 252 230 250 112 0 252 254 232 252 112 0 254 256 228 254 112 0 256 15
              220 256 112 0 15 277 241 15 277 126 0 277 275 241 277 275 126 0 275 273 241 275 273 126 0
              273 271 241 273 271 126 0 271 269 241 271 269 126 0 269 267 247 269 112 0 267 265 249 267 112
              0 265 263 241 265
              NPUSHW[ ]	/* 255 values pushed */
              263 126 0 263 261 241 263 261 126 0 261 259 241 261 112 0 259 258 241 259 258 126 0 260 258
              262 258 260 114 0 262 264 258 262 112 0 264 266 258 264 112 0 266 268 258 266 112 0 268 270
              258 268 112 0 270 272 258 270 112 0 272 274 258 272 112 0 274 276 258 274 112 0 276 16 258
              276 112 0 16 297 258 16 297 126 0 297 295 258 297 295 126 0 295 293 258 295 293 126 0 293
              291 258 293 291 126 0 291 289 258 291 289 126 0 289 287 258 289 287 126 0 287 285 258 287 285
              126 0 285 283 258 285 283 126 0 283 281 258 283 281 126 0 281 279 258 281 279 126 0 279 278
              258 279 278 126 0 278 280 258 278 112 0 280 282 258 280 112 0 282 284 258 282 112 0 284 286
              258 284 112 0 286 288 258 286 112 0 288 290 258 288 112 0 290 292 258 290 112 0 292 294 258
              292 112 0 294 296 258 294 112 0 296 17 258 296 112 0 80 0 119 117 80 119 103 0 88 0
              117 115 88 117 103 0 82 0 113 111 82 113 103 0 78 0 111 109 78 111 103 0 94 0 109
              107 94 109 103 0
              NPUSHW[ ]	/* 245 values pushed */
              96 0 107 5 96 107 103 0 4 0 5 106 4 5 103 0 110 0 133 131 110 133 103 0 106
              0 131 129 106 131 103 0 112 0 129 127 112 129 103 0 116 0 125 123 116 125 103 0 118 0
              123 121 118 123 103 0 108 0 121 120 108 121 103 0 104 0 147 145 104 147 103 0 146 0 159
              157 146 159 103 0 130 0 157 155 130 157 103 0 156 0 189 187 156 189 103 0 134 0 175 11
              134 175 103 0 188 0 203 201 188 203 103 0 174 0 197 195 174 197 103 0 100 0 217 215 100
              217 103 0 98 0 215 213 98 215 103 0 184 0 211 209 184 211 103 0 11 0 12 204 11 12
              103 0 214 0 237 235 214 237 103 0 190 0 235 233 190 235 103 0 210 0 233 231 210 233 103
              0 200 0 225 223 200 225 103 0 216 0 223 221 216 223 103 0 194 0 219 218 194 219 103 0
              224 0 249 247 224 249 103 0 234 0 247 245 234 247 103 0 218 0 241 239 218 241 103 0 1
              1 0 96 0 0 0 17 77 0 258 258 17 95 298 1 17 17 18 17 78
            ELSE[ ]	/* Else */
              NPUSHW[ ]	/* 255 values pushed */
              0 37 0 35 0 37 35 128 0 35 33 0 35 33 126 0 33 31 0 33 31 126 0 31 29
              0 31 29 126 0 29 27 0 29 27 126 0 27 25 0 27 25 126 0 25 23 0 25 23 126
              0 23 21 0 23 21 126 0 21 19 0 21 19 126 0 19 18 0 19 18 126 0 18 20 0
              18 20 126 0 20 22 0 20 22 126 0 22 24 0 22 24 126 0 24 26 0 24 26 126 0
              26 28 0 26 28 126 0 28 30 0 28 30 126 0 30 32 0 30 32 126 0 32 34 0 32
              34 126 0 34 36 0 34 36 126 0 36 1 0 36 1 126 0 57 1 55 1 57 114 0 55
              53 1 55 112 0 53 51 1 53 112 0 51 49 1 51 112 0 49 47 1 49 112 0 47 45
              1 47 112 0 45 43 1 45 112 0 43 41 1 43 112 0 41 39 1 41 112 0 39 38 1
              39 112 0 38 40 1 38 40 126 0 40 42 1 40 42 126 0 42 44 1 42 44 126 0 44
              46 1 44 46 126 0 46 48 1 46 48 126 0 48 50 1 48 50 126 0 50 52 1 50 52
              126 0 52 54 1
              NPUSHW[ ]	/* 255 values pushed */
              52 54 126 0 54 56 1 54 56 126 0 56 2 1 56 2 126 0 2 77 1 2 77 126 0
              77 75 1 77 75 126 0 75 73 1 75 73 126 0 73 71 1 73 71 126 0 71 69 1 71
              69 126 0 69 67 1 69 67 126 0 67 65 1 67 65 126 0 65 63 1 65 63 126 0 63
              61 1 63 61 126 0 61 59 1 61 59 126 0 59 58 1 59 58 126 0 58 60 1 58 60
              126 0 60 62 1 60 62 126 0 62 64 1 62 64 126 0 64 66 1 64 66 126 0 66 68
              1 66 68 126 0 68 70 1 68 70 126 0 70 72 1 70 72 126 0 72 74 1 72 74 126
              0 74 76 1 74 76 126 0 76 3 1 76 3 126 0 3 97 1 3 97 126 0 97 95 1
              97 95 126 0 95 93 1 95 93 126 0 93 91 1 93 91 126 0 91 89 1 91 89 126 0
              89 87 1 89 87 126 0 87 85 1 87 85 126 0 85 83 1 85 83 126 0 83 81 1 83
              81 126 0 81 79 1 81 79 126 0 79 4 1 79 4 126 0 84 82 86 82 84 86 128 0
              86 88 82 86 88
              NPUSHW[ ]	/* 255 values pushed */
              126 0 90 88 92 88 90 92 128 0 92 94 88 92 94 126 0 105 96 103 96 105 103 128 0
              103 101 96 103 101 126 0 101 99 96 101 99 126 0 99 98 96 99 98 126 0 102 100 104 100
              102 104 128 0 115 117 113 117 115 113 128 0 114 112 116 112 114 116 128 0 6 118 133 118 6
              133 128 0 127 129 125 129 127 125 128 0 120 121 122 121 120 122 128 0 122 124 121 122 124 126
              0 124 126 121 124 126 126 0 126 128 121 126 128 126 0 128 130 121 128 130 126 0 132 130 7
              130 132 7 128 0 7 147 130 7 147 126 0 145 147 143 147 145 143 128 0 143 141 147 143 141
              126 0 141 139 147 141 139 126 0 139 137 147 139 137 126 0 137 135 147 137 135 126 0 135 134
              147 135 134 126 0 136 134 138 134 136 138 128 0 138 140 134 138 140 126 0 140 142 134 140 142
              126 0 142 144 134 142 144 126 0 144 146 134 144 146 126 0 8 146 161 146 8 161 128 0 161
              159 146 161 159 126 0 155 157 153 157 155 153 128 0 153 151 157 153 151 126 0 151 149 157 151
              149 126 0 149 148
              NPUSHW[ ]	/* 255 values pushed */
              157 149 148 126 0 148 150 157 148 150 126 0 150 152 157 150 152 126 0 152 154 157 152 154 126
              0 154 156 157 154 156 126 0 158 156 160 156 158 160 128 0 160 9 156 160 9 126 0 9 173
              156 9 173 126 0 173 171 156 173 171 126 0 171 169 156 171 169 126 0 169 167 156 169 167 126
              0 167 165 156 167 165 126 0 165 162 156 165 162 126 0 162 163 156 162 163 126 0 163 164 156
              163 164 126 0 164 166 156 164 166 126 0 166 168 156 166 168 126 0 168 170 156 168 170 126 0
              170 172 156 170 172 126 0 172 10 156 172 10 126 0 10 189 156 10 189 126 0 187 189 185 189
              187 185 128 0 185 183 189 185 183 126 0 183 181 189 183 181 126 0 181 179 189 181 179 126 0
              179 177 189 179 177 126 0 177 175 189 177 175 126 0 176 174 178 174 176 178 128 0 178 180 174
              178 180 126 0 180 182 174 180 182 126 0 182 184 174 182 184 126 0 186 184 188 184 186 188 128
              0 201 203 199 203 201 199 128 0 199 197 203 199 197 126 0 195 197 193 197 195 193 128 0 193
              191 197 193 191 126
              NPUSHW[ ]	/* 255 values pushed */
              0 191 190 197 191 190 126 0 192 190 194 190 192 194 128 0 196 194 198 194 196 198 128 0 198
              200 194 198 200 126 0 202 200 217 200 202 217 128 0 213 215 211 215 213 211 128 0 209 211 207
              211 209 207 128 0 207 205 211 207 205 126 0 205 12 211 205 12 126 0 204 12 206 12 204 206
              128 0 206 208 12 206 208 126 0 208 210 12 208 210 126 0 212 210 214 210 212 214 128 0 13
              216 237 216 13 237 128 0 231 233 229 233 231 229 128 0 229 227 233 229 227 126 0 227 225 233
              227 225 126 0 221 223 219 223 221 219 128 0 220 218 222 218 220 222 128 0 222 224 218 222 224
              126 0 226 224 228 224 226 228 128 0 228 230 224 228 230 126 0 230 232 224 230 232 126 0 232
              234 224 232 234 126 0 236 234 14 234 236 14 128 0 14 257 234 14 257 126 0 257 255 234 257
              255 126 0 255 253 234 255 253 126 0 253 251 234 253 251 126 0 251 249 234 251 249 126 0 245
              247 243 247 245 243 128 0 243 241 247 243 241 126 0 239 241 238 241 239 238 128 0 238 240 241
              238 240 126 0 240
              NPUSHW[ ]	/* 255 values pushed */
              242 241 240 242 126 0 242 244 241 242 244 126 0 244 246 241 244 246 126 0 246 248 241 246 248
              126 0 248 250 241 248 250 126 0 250 252 241 250 252 126 0 252 254 241 252 254 126 0 254 256
              241 254 256 126 0 256 15 241 256 15 126 0 15 277 241 15 277 126 0 277 275 241 277 275 126
              0 275 273 241 275 273 126 0 273 271 241 273 271 126 0 271 269 241 271 269 126 0 269 267 241
              269 267 126 0 267 265 241 267 265 126 0 265 263 241 265 263 126 0 263 261 241 263 261 126 0
              261 259 241 261 259 126 0 259 258 241 259 258 126 0 260 258 262 258 260 114 0 262 264 258 262
              112 0 264 266 258 264 112 0 266 268 258 266 112 0 268 270 258 268 112 0 270 272 258 270 112
              0 272 274 258 272 112 0 274 276 258 274 112 0 276 16 258 276 112 0 16 297 258 16 297 126
              0 297 295 258 297 295 126 0 295 293 258 295 293 126 0 293 291 258 293 291 126 0 291 289 258
              291 289 126 0 289 287 258 289 287 126 0 287 285 258 287 285 126 0 285 283 258 285 283 126 0
              283 281 258 283 281
              NPUSHW[ ]	/* 255 values pushed */
              126 0 281 279 258 281 279 126 0 279 278 258 279 278 126 0 278 280 258 278 280 126 0 280 282
              258 280 282 126 0 282 284 258 282 284 126 0 284 286 258 284 286 126 0 286 288 258 286 288 126
              0 288 290 258 288 290 126 0 290 292 258 290 292 126 0 292 294 258 292 294 126 0 294 296 258
              294 296 126 0 296 17 258 296 17 126 0 80 0 119 117 80 119 103 0 88 0 117 115 88 117
              103 0 82 0 113 111 82 113 103 0 78 0 111 109 78 111 103 0 94 0 109 107 94 109 103
              0 96 0 107 5 96 107 103 0 4 0 5 106 4 5 103 0 110 0 133 131 110 133 103 0
              106 0 131 129 106 131 103 0 112 0 129 127 112 129 103 0 116 0 125 123 116 125 103 0 118
              0 123 121 118 123 103 0 108 0 121 120 108 121 103 0 104 0 147 145 104 147 103 0 146 0
              159 157 146 159 103 0 130 0 157 155 130 157 103 0 156 0 189 187 156 189 103 0 134 0 175
              11 134 175 103 0 188 0 203 201 188 203 103 0 174 0 197 195 174 197 103 0 100 0 217 215
              100 217 103 0 98
              NPUSHW[ ]	/* 116 values pushed */
              0 215 213 98 215 103 0 184 0 211 209 184 211 103 0 11 0 12 204 11 12 103 0 214 0
              237 235 214 237 103 0 190 0 235 233 190 235 103 0 210 0 233 231 210 233 103 0 200 0 225
              223 200 225 103 0 216 0 223 221 216 223 103 0 194 0 219 218 194 219 103 0 224 0 249 247
              224 249 103 0 234 0 247 245 234 247 103 0 218 0 241 239 218 241 103 0 1 1 0 96 0
              0 0 17 77 0 258 258 17 95 298 1 17 17 18 17 78
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          NPUSHW[ ]	/* 255 values pushed */
          0 0 623 622 621 620 619 618 617 616 615 614 613 612 611 610 609 608 607 606 605 604 603 602 601
          600 599 598 597 596 595 594 593 592 591 590 589 588 587 586 585 584 583 582 581 580 579 578 577 576
          575 574 573 572 571 570 569 568 567 566 565 564 563 562 561 560 559 558 557 556 555 554 553 552 551
          550 549 548 547 546 545 544 543 542 541 540 539 538 537 536 535 534 533 532 531 530 529 528 527 526
          525 524 523 522 521 520 519 518 517 516 515 514 513 512 511 510 509 508 507 506 505 504 503 502 501
          500 499 498 497 496 495 494 493 492 491 490 489 488 487 486 485 484 483 482 481 480 479 478 477 476
          475 474 473 472 471 470 469 468 467 466 465 464 463 462 461 460 459 458 457 456 455 454 453 452 451
          450 449 448 447 446 445 444 443 442 441 440 439 438 437 436 435 434 433 432 431 430 429 428 427 426
          425 424 423 422 421 420 419 418 417 416 415 414 413 412 411 410 409 408 407 406 405 404 403 402 401
          400 399 398 397 396 395 394 393 392 391 390 389 388 387 386 385 384 383 382 381 380 379 378 377 376
          375 374 373 372 371
          NPUSHW[ ]	/* 255 values pushed */
          370 369 368 367 366 365 364 363 362 361 360 359 358 357 356 355 354 353 352 351 350 349 348 347 346
          345 344 343 342 341 340 339 338 337 336 335 334 333 332 331 330 329 328 327 326 325 324 323 322 321
          320 319 318 317 316 315 314 313 312 311 310 309 308 307 306 305 304 303 302 301 300 299 298 297 296
          295 294 293 292 291 290 289 288 287 286 285 284 283 282 281 280 279 278 277 276 275 274 273 272 271
          270 269 268 267 266 265 264 263 262 261 260 259 258 257 256 255 254 253 252 251 250 249 248 247 246
          245 244 243 242 241 240 239 238 237 236 235 234 233 232 231 230 229 228 227 226 225 224 223 222 221
          220 219 218 217 216 215 214 213 212 211 210 209 208 207 206 205 204 203 202 201 200 199 198 197 196
          195 194 193 192 191 190 189 188 187 186 185 184 183 182 181 180 179 178 177 176 175 174 173 172 171
          170 169 168 167 166 165 164 163 162 161 160 159 158 157 156 155 154 153 152 151 150 149 148 147 146
          145 144 143 142 141 140 139 138 137 136 135 134 133 132 131 130 129 128 127 126 125 124 123 122 121
          120 119 118 117 116
          NPUSHW[ ]	/* 84 values pushed */
          115 114 113 112 111 110 109 108 107 106 105 104 103 102 101 100 99 98 97 96 95 94 93 92 91
          90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66
          65 64 0 63 0 62 60 58 56 54 52 50 48 46 44 43 42 41 40 38 36 34 34 34 34
          17 17 34 34 34 49 299 7 31
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="Aacute" xMin="0" yMin="-320" xMax="880" yMax="1045">
      <contour>
        <pt x="0" y="-320" on="1"/>
        <pt x="0" y="1045" on="1"/>
        <pt x="880" y="1045" on="1"/>
        <pt x="880" y="1040" on="1"/>
        <pt x="805" y="1040" on="1"/>
        <pt x="805" y="965" on="1"/>
        <pt x="880" y="965" on="1"/>
        <pt x="880" y="960" on="1"/>
        <pt x="805" y="960" on="1"/>
        <pt x="805" y="885" on="1"/>
        <pt x="880" y="885" on="1"/>
        <pt x="880" y="880" on="1"/>
        <pt x="805" y="880" on="1"/>
        <pt x="805" y="805" on="1"/>
        <pt x="880" y="805" on="1"/>
        <pt x="880" y="800" on="1"/>
        <pt x="805" y="800" on="1"/>
        <pt x="805" y="725" on="1"/>
        <pt x="880" y="725" on="1"/>
        <pt x="880" y="640" on="1"/>
        <pt x="805" y="640" on="1"/>
        <pt x="805" y="565" on="1"/>
        <pt x="880" y="565" on="1"/>
        <pt x="880" y="560" on="1"/>
        <pt x="805" y="560" on="1"/>
        <pt x="805" y="485" on="1"/>
        <pt x="880" y="485" on="1"/>
        <pt x="880" y="480" on="1"/>
        <pt x="805" y="480" on="1"/>
        <pt x="805" y="405" on="1"/>
        <pt x="880" y="405" on="1"/>
        <pt x="880" y="400" on="1"/>
        <pt x="805" y="400" on="1"/>
        <pt x="805" y="325" on="1"/>
        <pt x="880" y="325" on="1"/>
        <pt x="880" y="320" on="1"/>
        <pt x="805" y="320" on="1"/>
        <pt x="805" y="245" on="1"/>
        <pt x="880" y="245" on="1"/>
        <pt x="880" y="240" on="1"/>
        <pt x="805" y="240" on="1"/>
        <pt x="805" y="165" on="1"/>
        <pt x="880" y="165" on="1"/>
        <pt x="880" y="80" on="1"/>
        <pt x="805" y="80" on="1"/>
        <pt x="805" y="5" on="1"/>
        <pt x="880" y="5" on="1"/>
        <pt x="880" y="0" on="1"/>
        <pt x="805" y="0" on="1"/>
        <pt x="805" y="-75" on="1"/>
        <pt x="880" y="-75" on="1"/>
        <pt x="880" y="-80" on="1"/>
        <pt x="805" y="-80" on="1"/>
        <pt x="805" y="-155" on="1"/>
        <pt x="880" y="-155" on="1"/>
        <pt x="880" y="-160" on="1"/>
        <pt x="805" y="-160" on="1"/>
        <pt x="805" y="-235" on="1"/>
        <pt x="880" y="-235" on="1"/>
        <pt x="880" y="-240" on="1"/>
        <pt x="805" y="-240" on="1"/>
        <pt x="805" y="-315" on="1"/>
        <pt x="880" y="-315" on="1"/>
        <pt x="880" y="-320" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="965" on="1"/>
        <pt x="800" y="965" on="1"/>
        <pt x="800" y="1040" on="1"/>
        <pt x="725" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="965" on="1"/>
        <pt x="400" y="965" on="1"/>
        <pt x="400" y="1040" on="1"/>
        <pt x="325" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="405" y="965" on="1"/>
        <pt x="480" y="965" on="1"/>
        <pt x="480" y="1040" on="1"/>
        <pt x="405" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="965" on="1"/>
        <pt x="160" y="965" on="1"/>
        <pt x="160" y="1040" on="1"/>
        <pt x="85" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="965" on="1"/>
        <pt x="560" y="965" on="1"/>
        <pt x="560" y="1040" on="1"/>
        <pt x="485" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="965" on="1"/>
        <pt x="240" y="965" on="1"/>
        <pt x="240" y="1040" on="1"/>
        <pt x="165" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="965" on="1"/>
        <pt x="720" y="965" on="1"/>
        <pt x="720" y="1040" on="1"/>
        <pt x="645" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="965" on="1"/>
        <pt x="640" y="965" on="1"/>
        <pt x="640" y="1040" on="1"/>
        <pt x="565" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="965" on="1"/>
        <pt x="80" y="965" on="1"/>
        <pt x="80" y="1040" on="1"/>
        <pt x="5" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="965" on="1"/>
        <pt x="320" y="965" on="1"/>
        <pt x="320" y="1040" on="1"/>
        <pt x="245" y="1040" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="885" on="1"/>
        <pt x="320" y="885" on="1"/>
        <pt x="320" y="960" on="1"/>
        <pt x="245" y="960" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="885" on="1"/>
        <pt x="80" y="885" on="1"/>
        <pt x="80" y="960" on="1"/>
        <pt x="5" y="960" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="885" on="1"/>
        <pt x="720" y="885" on="1"/>
        <pt x="720" y="960" on="1"/>
        <pt x="645" y="960" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="885" on="1"/>
        <pt x="800" y="885" on="1"/>
        <pt x="800" y="960" on="1"/>
        <pt x="725" y="960" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="885" on="1"/>
        <pt x="240" y="885" on="1"/>
        <pt x="240" y="960" on="1"/>
        <pt x="165" y="960" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="885" on="1"/>
        <pt x="160" y="885" on="1"/>
        <pt x="160" y="960" on="1"/>
        <pt x="85" y="960" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="885" on="1"/>
        <pt x="400" y="885" on="1"/>
        <pt x="400" y="960" on="1"/>
        <pt x="325" y="960" on="1"/>
      </contour>
      <contour>
        <pt x="405" y="885" on="1"/>
        <pt x="480" y="885" on="1"/>
        <pt x="480" y="960" on="1"/>
        <pt x="405" y="960" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="885" on="1"/>
        <pt x="640" y="885" on="1"/>
        <pt x="640" y="960" on="1"/>
        <pt x="565" y="960" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="805" on="1"/>
        <pt x="400" y="805" on="1"/>
        <pt x="400" y="880" on="1"/>
        <pt x="325" y="880" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="805" on="1"/>
        <pt x="80" y="805" on="1"/>
        <pt x="80" y="880" on="1"/>
        <pt x="5" y="880" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="805" on="1"/>
        <pt x="720" y="805" on="1"/>
        <pt x="720" y="880" on="1"/>
        <pt x="645" y="880" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="805" on="1"/>
        <pt x="640" y="805" on="1"/>
        <pt x="640" y="880" on="1"/>
        <pt x="565" y="880" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="805" on="1"/>
        <pt x="320" y="805" on="1"/>
        <pt x="320" y="880" on="1"/>
        <pt x="245" y="880" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="805" on="1"/>
        <pt x="560" y="805" on="1"/>
        <pt x="560" y="880" on="1"/>
        <pt x="485" y="880" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="805" on="1"/>
        <pt x="240" y="805" on="1"/>
        <pt x="240" y="880" on="1"/>
        <pt x="165" y="880" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="805" on="1"/>
        <pt x="160" y="805" on="1"/>
        <pt x="160" y="880" on="1"/>
        <pt x="85" y="880" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="805" on="1"/>
        <pt x="800" y="805" on="1"/>
        <pt x="800" y="880" on="1"/>
        <pt x="725" y="880" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="725" on="1"/>
        <pt x="720" y="725" on="1"/>
        <pt x="720" y="800" on="1"/>
        <pt x="645" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="725" on="1"/>
        <pt x="400" y="725" on="1"/>
        <pt x="400" y="800" on="1"/>
        <pt x="325" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="725" on="1"/>
        <pt x="80" y="725" on="1"/>
        <pt x="80" y="800" on="1"/>
        <pt x="5" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="725" on="1"/>
        <pt x="640" y="725" on="1"/>
        <pt x="640" y="800" on="1"/>
        <pt x="565" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="725" on="1"/>
        <pt x="320" y="725" on="1"/>
        <pt x="320" y="800" on="1"/>
        <pt x="245" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="725" on="1"/>
        <pt x="560" y="725" on="1"/>
        <pt x="560" y="800" on="1"/>
        <pt x="485" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="725" on="1"/>
        <pt x="160" y="725" on="1"/>
        <pt x="160" y="800" on="1"/>
        <pt x="85" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="725" on="1"/>
        <pt x="800" y="725" on="1"/>
        <pt x="800" y="800" on="1"/>
        <pt x="725" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="725" on="1"/>
        <pt x="240" y="725" on="1"/>
        <pt x="240" y="800" on="1"/>
        <pt x="165" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="405" y="725" on="1"/>
        <pt x="480" y="725" on="1"/>
        <pt x="480" y="800" on="1"/>
        <pt x="405" y="800" on="1"/>
      </contour>
      <contour>
        <pt x="405" y="645" on="1"/>
        <pt x="480" y="645" on="1"/>
        <pt x="480" y="720" on="1"/>
        <pt x="405" y="720" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="645" on="1"/>
        <pt x="160" y="645" on="1"/>
        <pt x="160" y="720" on="1"/>
        <pt x="85" y="720" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="645" on="1"/>
        <pt x="80" y="645" on="1"/>
        <pt x="80" y="720" on="1"/>
        <pt x="5" y="720" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="645" on="1"/>
        <pt x="720" y="645" on="1"/>
        <pt x="720" y="720" on="1"/>
        <pt x="645" y="720" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="565" on="1"/>
        <pt x="240" y="565" on="1"/>
        <pt x="240" y="640" on="1"/>
        <pt x="165" y="640" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="565" on="1"/>
        <pt x="560" y="565" on="1"/>
        <pt x="560" y="640" on="1"/>
        <pt x="485" y="640" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="565" on="1"/>
        <pt x="640" y="565" on="1"/>
        <pt x="640" y="640" on="1"/>
        <pt x="565" y="640" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="565" on="1"/>
        <pt x="80" y="565" on="1"/>
        <pt x="80" y="640" on="1"/>
        <pt x="5" y="640" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="565" on="1"/>
        <pt x="400" y="565" on="1"/>
        <pt x="400" y="640" on="1"/>
        <pt x="325" y="640" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="565" on="1"/>
        <pt x="800" y="565" on="1"/>
        <pt x="800" y="640" on="1"/>
        <pt x="725" y="640" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="565" on="1"/>
        <pt x="320" y="565" on="1"/>
        <pt x="320" y="640" on="1"/>
        <pt x="245" y="640" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="485" on="1"/>
        <pt x="560" y="485" on="1"/>
        <pt x="560" y="560" on="1"/>
        <pt x="485" y="560" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="485" on="1"/>
        <pt x="240" y="485" on="1"/>
        <pt x="240" y="560" on="1"/>
        <pt x="165" y="560" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="485" on="1"/>
        <pt x="640" y="485" on="1"/>
        <pt x="640" y="560" on="1"/>
        <pt x="565" y="560" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="485" on="1"/>
        <pt x="400" y="485" on="1"/>
        <pt x="400" y="560" on="1"/>
        <pt x="325" y="560" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="485" on="1"/>
        <pt x="80" y="485" on="1"/>
        <pt x="80" y="560" on="1"/>
        <pt x="5" y="560" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="485" on="1"/>
        <pt x="800" y="485" on="1"/>
        <pt x="800" y="560" on="1"/>
        <pt x="725" y="560" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="485" on="1"/>
        <pt x="320" y="485" on="1"/>
        <pt x="320" y="560" on="1"/>
        <pt x="245" y="560" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="405" on="1"/>
        <pt x="320" y="405" on="1"/>
        <pt x="320" y="480" on="1"/>
        <pt x="245" y="480" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="405" on="1"/>
        <pt x="800" y="405" on="1"/>
        <pt x="800" y="480" on="1"/>
        <pt x="725" y="480" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="405" on="1"/>
        <pt x="80" y="405" on="1"/>
        <pt x="80" y="480" on="1"/>
        <pt x="5" y="480" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="405" on="1"/>
        <pt x="640" y="405" on="1"/>
        <pt x="640" y="480" on="1"/>
        <pt x="565" y="480" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="405" on="1"/>
        <pt x="400" y="405" on="1"/>
        <pt x="400" y="480" on="1"/>
        <pt x="325" y="480" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="405" on="1"/>
        <pt x="160" y="405" on="1"/>
        <pt x="160" y="480" on="1"/>
        <pt x="85" y="480" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="405" on="1"/>
        <pt x="560" y="405" on="1"/>
        <pt x="560" y="480" on="1"/>
        <pt x="485" y="480" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="325" on="1"/>
        <pt x="800" y="325" on="1"/>
        <pt x="800" y="400" on="1"/>
        <pt x="725" y="400" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="325" on="1"/>
        <pt x="80" y="325" on="1"/>
        <pt x="80" y="400" on="1"/>
        <pt x="5" y="400" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="325" on="1"/>
        <pt x="640" y="325" on="1"/>
        <pt x="640" y="400" on="1"/>
        <pt x="565" y="400" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="325" on="1"/>
        <pt x="400" y="325" on="1"/>
        <pt x="400" y="400" on="1"/>
        <pt x="325" y="400" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="325" on="1"/>
        <pt x="160" y="325" on="1"/>
        <pt x="160" y="400" on="1"/>
        <pt x="85" y="400" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="325" on="1"/>
        <pt x="240" y="325" on="1"/>
        <pt x="240" y="400" on="1"/>
        <pt x="165" y="400" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="325" on="1"/>
        <pt x="560" y="325" on="1"/>
        <pt x="560" y="400" on="1"/>
        <pt x="485" y="400" on="1"/>
      </contour>
      <contour>
        <pt x="160" y="320" on="1"/>
        <pt x="85" y="320" on="1"/>
        <pt x="85" y="245" on="1"/>
        <pt x="160" y="245" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="245" on="1"/>
        <pt x="800" y="245" on="1"/>
        <pt x="800" y="320" on="1"/>
        <pt x="725" y="320" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="245" on="1"/>
        <pt x="80" y="245" on="1"/>
        <pt x="80" y="320" on="1"/>
        <pt x="5" y="320" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="245" on="1"/>
        <pt x="400" y="245" on="1"/>
        <pt x="400" y="320" on="1"/>
        <pt x="325" y="320" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="245" on="1"/>
        <pt x="640" y="245" on="1"/>
        <pt x="640" y="320" on="1"/>
        <pt x="565" y="320" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="245" on="1"/>
        <pt x="560" y="245" on="1"/>
        <pt x="560" y="320" on="1"/>
        <pt x="485" y="320" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="165" on="1"/>
        <pt x="320" y="165" on="1"/>
        <pt x="320" y="240" on="1"/>
        <pt x="245" y="240" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="165" on="1"/>
        <pt x="160" y="165" on="1"/>
        <pt x="160" y="240" on="1"/>
        <pt x="85" y="240" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="165" on="1"/>
        <pt x="800" y="165" on="1"/>
        <pt x="800" y="240" on="1"/>
        <pt x="725" y="240" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="165" on="1"/>
        <pt x="80" y="165" on="1"/>
        <pt x="80" y="240" on="1"/>
        <pt x="5" y="240" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="165" on="1"/>
        <pt x="400" y="165" on="1"/>
        <pt x="400" y="240" on="1"/>
        <pt x="325" y="240" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="165" on="1"/>
        <pt x="640" y="165" on="1"/>
        <pt x="640" y="240" on="1"/>
        <pt x="565" y="240" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="165" on="1"/>
        <pt x="240" y="165" on="1"/>
        <pt x="240" y="240" on="1"/>
        <pt x="165" y="240" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="165" on="1"/>
        <pt x="560" y="165" on="1"/>
        <pt x="560" y="240" on="1"/>
        <pt x="485" y="240" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="85" on="1"/>
        <pt x="160" y="85" on="1"/>
        <pt x="160" y="160" on="1"/>
        <pt x="85" y="160" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="85" on="1"/>
        <pt x="80" y="85" on="1"/>
        <pt x="80" y="160" on="1"/>
        <pt x="5" y="160" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="85" on="1"/>
        <pt x="560" y="85" on="1"/>
        <pt x="560" y="160" on="1"/>
        <pt x="485" y="160" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="85" on="1"/>
        <pt x="400" y="85" on="1"/>
        <pt x="400" y="160" on="1"/>
        <pt x="325" y="160" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="85" on="1"/>
        <pt x="240" y="85" on="1"/>
        <pt x="240" y="160" on="1"/>
        <pt x="165" y="160" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="85" on="1"/>
        <pt x="320" y="85" on="1"/>
        <pt x="320" y="160" on="1"/>
        <pt x="245" y="160" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="85" on="1"/>
        <pt x="800" y="85" on="1"/>
        <pt x="800" y="160" on="1"/>
        <pt x="725" y="160" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="5" on="1"/>
        <pt x="720" y="5" on="1"/>
        <pt x="720" y="80" on="1"/>
        <pt x="645" y="80" on="1"/>
      </contour>
      <contour>
        <pt x="405" y="5" on="1"/>
        <pt x="480" y="5" on="1"/>
        <pt x="480" y="80" on="1"/>
        <pt x="405" y="80" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="5" on="1"/>
        <pt x="160" y="5" on="1"/>
        <pt x="160" y="80" on="1"/>
        <pt x="85" y="80" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="5" on="1"/>
        <pt x="240" y="5" on="1"/>
        <pt x="240" y="80" on="1"/>
        <pt x="165" y="80" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="5" on="1"/>
        <pt x="80" y="5" on="1"/>
        <pt x="80" y="80" on="1"/>
        <pt x="5" y="80" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="5" on="1"/>
        <pt x="320" y="5" on="1"/>
        <pt x="320" y="80" on="1"/>
        <pt x="245" y="80" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="5" on="1"/>
        <pt x="640" y="5" on="1"/>
        <pt x="640" y="80" on="1"/>
        <pt x="565" y="80" on="1"/>
      </contour>
      <contour>
        <pt x="405" y="-75" on="1"/>
        <pt x="480" y="-75" on="1"/>
        <pt x="480" y="0" on="1"/>
        <pt x="405" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="-75" on="1"/>
        <pt x="800" y="-75" on="1"/>
        <pt x="800" y="0" on="1"/>
        <pt x="725" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="-75" on="1"/>
        <pt x="640" y="-75" on="1"/>
        <pt x="640" y="0" on="1"/>
        <pt x="565" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="-75" on="1"/>
        <pt x="80" y="-75" on="1"/>
        <pt x="80" y="0" on="1"/>
        <pt x="5" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="-75" on="1"/>
        <pt x="320" y="-75" on="1"/>
        <pt x="320" y="0" on="1"/>
        <pt x="245" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="-75" on="1"/>
        <pt x="240" y="-75" on="1"/>
        <pt x="240" y="0" on="1"/>
        <pt x="165" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="-75" on="1"/>
        <pt x="160" y="-75" on="1"/>
        <pt x="160" y="0" on="1"/>
        <pt x="85" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="-75" on="1"/>
        <pt x="560" y="-75" on="1"/>
        <pt x="560" y="0" on="1"/>
        <pt x="485" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="-75" on="1"/>
        <pt x="400" y="-75" on="1"/>
        <pt x="400" y="0" on="1"/>
        <pt x="325" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="-75" on="1"/>
        <pt x="720" y="-75" on="1"/>
        <pt x="720" y="0" on="1"/>
        <pt x="645" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="-155" on="1"/>
        <pt x="640" y="-155" on="1"/>
        <pt x="640" y="-80" on="1"/>
        <pt x="565" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="-155" on="1"/>
        <pt x="320" y="-155" on="1"/>
        <pt x="320" y="-80" on="1"/>
        <pt x="245" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="-155" on="1"/>
        <pt x="80" y="-155" on="1"/>
        <pt x="80" y="-80" on="1"/>
        <pt x="5" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="-155" on="1"/>
        <pt x="800" y="-155" on="1"/>
        <pt x="800" y="-80" on="1"/>
        <pt x="725" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="-155" on="1"/>
        <pt x="240" y="-155" on="1"/>
        <pt x="240" y="-80" on="1"/>
        <pt x="165" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="-155" on="1"/>
        <pt x="160" y="-155" on="1"/>
        <pt x="160" y="-80" on="1"/>
        <pt x="85" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="-155" on="1"/>
        <pt x="560" y="-155" on="1"/>
        <pt x="560" y="-80" on="1"/>
        <pt x="485" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="-155" on="1"/>
        <pt x="400" y="-155" on="1"/>
        <pt x="400" y="-80" on="1"/>
        <pt x="325" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="-155" on="1"/>
        <pt x="720" y="-155" on="1"/>
        <pt x="720" y="-80" on="1"/>
        <pt x="645" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="405" y="-155" on="1"/>
        <pt x="480" y="-155" on="1"/>
        <pt x="480" y="-80" on="1"/>
        <pt x="405" y="-80" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="-235" on="1"/>
        <pt x="720" y="-235" on="1"/>
        <pt x="720" y="-160" on="1"/>
        <pt x="645" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="-235" on="1"/>
        <pt x="400" y="-235" on="1"/>
        <pt x="400" y="-160" on="1"/>
        <pt x="325" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="-235" on="1"/>
        <pt x="560" y="-235" on="1"/>
        <pt x="560" y="-160" on="1"/>
        <pt x="485" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="-235" on="1"/>
        <pt x="800" y="-235" on="1"/>
        <pt x="800" y="-160" on="1"/>
        <pt x="725" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="-235" on="1"/>
        <pt x="640" y="-235" on="1"/>
        <pt x="640" y="-160" on="1"/>
        <pt x="565" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="405" y="-235" on="1"/>
        <pt x="480" y="-235" on="1"/>
        <pt x="480" y="-160" on="1"/>
        <pt x="405" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="-235" on="1"/>
        <pt x="320" y="-235" on="1"/>
        <pt x="320" y="-160" on="1"/>
        <pt x="245" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="-235" on="1"/>
        <pt x="240" y="-235" on="1"/>
        <pt x="240" y="-160" on="1"/>
        <pt x="165" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="-235" on="1"/>
        <pt x="80" y="-235" on="1"/>
        <pt x="80" y="-160" on="1"/>
        <pt x="5" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="-235" on="1"/>
        <pt x="160" y="-235" on="1"/>
        <pt x="160" y="-160" on="1"/>
        <pt x="85" y="-160" on="1"/>
      </contour>
      <contour>
        <pt x="645" y="-315" on="1"/>
        <pt x="720" y="-315" on="1"/>
        <pt x="720" y="-240" on="1"/>
        <pt x="645" y="-240" on="1"/>
      </contour>
      <contour>
        <pt x="85" y="-315" on="1"/>
        <pt x="160" y="-315" on="1"/>
        <pt x="160" y="-240" on="1"/>
        <pt x="85" y="-240" on="1"/>
      </contour>
      <contour>
        <pt x="725" y="-315" on="1"/>
        <pt x="800" y="-315" on="1"/>
        <pt x="800" y="-240" on="1"/>
        <pt x="725" y="-240" on="1"/>
      </contour>
      <contour>
        <pt x="485" y="-315" on="1"/>
        <pt x="560" y="-315" on="1"/>
        <pt x="560" y="-240" on="1"/>
        <pt x="485" y="-240" on="1"/>
      </contour>
      <contour>
        <pt x="565" y="-315" on="1"/>
        <pt x="640" y="-315" on="1"/>
        <pt x="640" y="-240" on="1"/>
        <pt x="565" y="-240" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="-315" on="1"/>
        <pt x="400" y="-315" on="1"/>
        <pt x="400" y="-240" on="1"/>
        <pt x="325" y="-240" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="-315" on="1"/>
        <pt x="240" y="-315" on="1"/>
        <pt x="240" y="-240" on="1"/>
        <pt x="165" y="-240" on="1"/>
      </contour>
      <contour>
        <pt x="245" y="-315" on="1"/>
        <pt x="320" y="-315" on="1"/>
        <pt x="320" y="-240" on="1"/>
        <pt x="245" y="-240" on="1"/>
      </contour>
      <contour>
        <pt x="405" y="-315" on="1"/>
        <pt x="480" y="-315" on="1"/>
        <pt x="480" y="-240" on="1"/>
        <pt x="405" y="-240" on="1"/>
      </contour>
      <contour>
        <pt x="5" y="-315" on="1"/>
        <pt x="80" y="-315" on="1"/>
        <pt x="80" y="-240" on="1"/>
        <pt x="5" y="-240" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHW[ ]	/* 41 values pushed */
          5 1 30 9 1 46 13 1 62 21 1 106 25 1 128 29 1 130 33 1 152 37 1 164 45
          1 206 49 1 214 53 1 246 57 1 262 61 1 276 13 75
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          9
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            NPUSHW[ ]	/* 255 values pushed */
            0 37 0 35 1 37 114 0 35 33 1 35 112 0 33 31 1 33 112 0 31 29 1 31 112
            0 29 27 1 29 112 0 27 25 1 27 112 0 25 23 1 25 112 0 23 21 1 23 112 0
            21 19 1 21 112 0 19 18 1 19 112 0 18 20 0 18 112 0 20 22 0 20 112 0 22
            24 0 22 112 0 24 26 0 24 112 0 28 26 30 0 28 114 0 30 32 0 30 112 0 32
            34 0 32 112 0 34 36 0 34 112 0 36 1 0 36 112 0 55 1 53 1 55 114 0 53
            51 1 53 112 0 51 49 1 51 112 0 49 47 1 49 112 0 47 45 1 47 112 0 45 43
            1 45 112 0 43 41 1 43 112 0 41 39 1 41 112 0 39 38 1 39 112 0 38 40 36
            38 112 0 40 42 34 40 112 0 42 44 30 42 112 0 44 46 18 44 112 0 46 48 28 46
            112 0 48 50 24 48 112 0 50 52 20 50 112 0 54 52 2 32 54 114 0 2 73 1 2
            112 0 73 71 52 73 71 126 0 71 69 52 71 69 126 0 69 67 52 69 67 126 0 65 67
            63 67 65 63 128
            NPUSHW[ ]	/* 255 values pushed */
            0 63 61 67 63 61 126 0 61 59 67 61 59 126 0 59 57 67 59 57 126 0 57 56 67
            57 56 126 0 56 58 50 56 112 0 58 60 40 58 112 0 60 62 42 60 112 0 62 64 54
            62 112 0 64 66 38 64 112 0 68 66 70 46 68 114 0 70 72 48 70 112 0 72 3 44
            72 112 0 3 93 1 3 112 0 91 93 89 93 91 89 128 0 89 87 93 89 87 126 0 87
            85 93 87 85 126 0 83 85 81 85 83 81 128 0 81 79 85 81 79 126 0 79 77 85 79
            77 126 0 77 75 85 77 75 126 0 75 4 85 75 4 126 0 74 4 76 60 74 114 0 78
            76 80 58 78 114 0 86 84 88 70 86 114 0 101 92 99 92 101 99 128 0 99 97 92 99
            97 126 0 97 95 92 97 95 126 0 98 96 100 78 98 114 0 109 111 107 111 109 107 128 0
            108 106 110 98 108 114 0 6 114 129 5 6 114 0 125 127 123 127 125 123 128 0 116 117 118
            104 116 114 0 120 118 122 106 120 114 0 122 124 110 122 112 0 124 126 108 124 112 0 126 128
            112 126 112 0 128
            NPUSHW[ ]	/* 255 values pushed */
            7 114 128 112 0 7 143 5 7 112 0 143 141 117 143 112 0 139 141 137 123 139 114 0 137
            135 121 137 112 0 135 133 141 135 133 126 0 133 131 127 133 112 0 131 130 129 131 112 0 132
            130 134 126 132 114 0 134 136 124 134 112 0 136 138 120 136 112 0 138 140 122 138 112 0 142
            140 8 116 142 114 0 8 157 140 8 157 126 0 157 155 140 157 155 126 0 151 153 149 153 151
            149 128 0 149 147 153 149 147 126 0 147 145 153 147 145 126 0 145 144 153 145 144 126 0 144
            146 132 144 112 0 146 148 134 146 112 0 148 150 136 148 112 0 150 152 138 150 112 0 152 154
            140 152 112 0 156 154 9 142 156 114 0 9 169 154 9 169 126 0 169 167 154 169 167 126 0
            167 165 154 167 165 126 0 165 163 154 165 163 126 0 163 161 154 163 161 126 0 161 158 154 161
            158 126 0 158 159 153 158 112 0 159 160 152 159 112 0 160 162 144 160 112 0 162 164 146 162
            112 0 164 166 150 164 112 0 166 168 148 166 112 0 168 10 156 168 112 0 10 185 154 10 185
            126 0 185 183 154
            NPUSHW[ ]	/* 255 values pushed */
            185 183 126 0 181 183 179 183 181 179 128 0 179 177 183 179 177 126 0 177 175 183 177 175 126
            0 175 173 183 175 173 126 0 173 171 183 173 171 126 0 172 170 174 159 172 114 0 174 176 160
            174 112 0 176 178 162 176 112 0 178 180 164 178 112 0 184 182 199 168 184 114 0 199 197 182
            199 197 126 0 193 195 191 195 193 191 128 0 191 189 195 191 189 126 0 189 187 195 189 187 126
            0 187 186 195 187 186 126 0 186 188 172 186 112 0 188 190 176 188 112 0 194 192 196 182 194
            114 0 196 198 170 196 112 0 211 213 209 197 211 114 0 209 207 213 209 207 126 0 207 205 195
            207 112 0 205 203 213 205 203 126 0 204 202 206 186 204 114 0 206 208 194 206 112 0 208 210
            188 208 112 0 210 212 196 210 112 0 13 212 233 12 13 114 0 227 229 225 229 227 225 128 0
            225 223 229 225 223 126 0 223 221 229 223 221 126 0 221 219 229 221 219 126 0 214 215 216 202
            214 114 0 218 216 220 212 218 114 0 220 222 208 220 112 0 222 224 210 222 112 0 224 226 206
            224 112 0 226 228
            NPUSHW[ ]	/* 255 values pushed */
            204 226 112 0 232 230 14 200 232 114 0 14 253 12 14 112 0 253 251 215 253 112 0 251 249
            233 251 112 0 245 247 243 247 245 243 128 0 243 241 247 243 241 126 0 239 241 237 241 239 237
            128 0 237 235 241 237 235 126 0 235 234 219 235 112 0 234 236 218 234 112 0 236 238 222 236
            112 0 238 240 220 238 112 0 240 242 216 240 112 0 242 244 224 242 112 0 244 246 226 244 112
            0 246 248 228 246 112 0 248 250 230 248 112 0 250 252 232 250 112 0 252 15 214 252 112 0
            15 273 241 15 273 126 0 273 271 241 273 271 126 0 271 269 241 271 269 126 0 269 267 241 269
            267 126 0 267 265 241 267 265 126 0 265 263 241 265 263 126 0 263 261 241 263 261 126 0 261
            259 241 261 112 0 259 257 247 259 112 0 257 255 249 257 112 0 255 254 241 255 254 126 0 256
            254 258 254 256 114 0 258 260 254 258 112 0 260 262 254 260 112 0 262 264 254 262 112 0 264
            266 254 264 112 0 266 268 254 266 112 0 268 270 254 268 112 0 270 272 254 270 112 0 272 16
            254 272 112 0 16
            NPUSHW[ ]	/* 255 values pushed */
            293 254 16 293 126 0 293 291 254 293 291 126 0 291 289 254 291 289 126 0 289 287 254 289 287
            126 0 287 285 254 287 285 126 0 285 283 254 285 283 126 0 283 281 254 283 281 126 0 281 279
            254 281 279 126 0 279 277 254 279 277 126 0 277 275 254 277 275 126 0 275 274 254 275 274 126
            0 274 276 254 274 112 0 276 278 254 276 112 0 278 280 254 278 112 0 280 282 254 280 112 0
            282 284 254 282 112 0 284 286 254 284 112 0 286 288 254 286 112 0 288 290 254 288 112 0 290
            292 254 290 112 0 292 17 254 292 112 0 26 0 67 65 26 67 103 0 52 0 93 91 52 93
            103 0 66 0 85 83 66 85 103 0 92 0 95 94 92 95 103 0 82 0 115 113 82 115 103
            0 88 0 113 111 88 113 103 0 76 0 111 109 76 111 103 0 80 0 107 105 80 107 103 0
            84 0 105 103 84 105 103 0 90 0 103 5 90 103 103 0 4 0 5 102 4 5 103 0 114
            0 129 127 114 129 103 0 112 0 127 125 112 127 103 0 110 0 123 121 110 123 103 0 106 0
            121 119 106 121 103
            NPUSHW[ ]	/* 198 values pushed */
            0 102 0 119 117 102 119 103 0 104 0 117 116 104 117 103 0 96 0 141 139 96 141 103 0
            118 0 155 153 118 155 103 0 140 0 153 151 140 153 103 0 154 0 183 181 154 183 103 0 130
            0 171 11 130 171 103 0 170 0 197 195 170 197 103 0 182 0 195 193 182 195 103 0 180 0
            213 211 180 213 103 0 94 0 203 201 94 203 103 0 100 0 201 12 100 201 103 0 11 0 12
            200 11 12 103 0 200 0 233 231 200 233 103 0 192 0 231 229 192 231 103 0 190 0 229 227
            190 229 103 0 212 0 219 217 212 219 103 0 198 0 217 215 198 217 103 0 202 0 215 214 202
            215 103 0 230 0 249 247 230 249 103 0 228 0 247 245 228 247 103 0 216 0 241 239 216 241
            103 0 1 1 0 96 0 0 0 17 77 0 254 254 17 95 294 1 17 17 18 17 78
          ELSE[ ]	/* Else */
            MPPEM[ ]	/* MeasurePixelPerEm */
            PUSHB[ ]	/* 1 value pushed */
            17
            LT[ ]	/* LessThan */
            IF[ ]	/* If */
              NPUSHW[ ]	/* 255 values pushed */
              0 37 0 35 1 37 114 0 35 33 1 35 112 0 33 31 1 33 112 0 31 29 1 31 112
              0 29 27 1 29 112 0 27 25 1 27 112 0 25 23 1 25 112 0 23 21 1 23 112 0
              21 19 1 21 112 0 19 18 1 19 112 0 18 20 0 18 112 0 20 22 0 20 112 0 22
              24 0 22 112 0 24 26 0 24 112 0 28 26 30 0 28 114 0 30 32 0 30 112 0 32
              34 0 32 112 0 34 36 0 34 112 0 36 1 0 36 112 0 55 1 53 1 55 114 0 53
              51 1 53 112 0 51 49 1 51 112 0 49 47 1 49 112 0 47 45 1 47 112 0 45 43
              1 45 112 0 43 41 1 43 112 0 41 39 1 41 112 0 39 38 1 39 112 0 38 40 36
              38 112 0 40 42 34 40 112 0 42 44 30 42 112 0 44 46 18 44 112 0 46 48 28 46
              112 0 48 50 24 48 112 0 50 52 20 50 112 0 54 52 2 32 54 114 0 2 73 1 2
              112 0 73 71 52 73 71 126 0 71 69 52 71 69 126 0 69 67 52 69 67 126 0 65 67
              63 67 65 63 128
              NPUSHW[ ]	/* 255 values pushed */
              0 63 61 67 63 61 126 0 61 59 67 61 59 126 0 59 57 67 59 57 126 0 57 56 67
              57 56 126 0 56 58 50 56 112 0 58 60 40 58 112 0 60 62 42 60 112 0 62 64 54
              62 112 0 64 66 38 64 112 0 68 66 70 46 68 114 0 70 72 48 70 112 0 72 3 44
              72 112 0 3 93 66 3 93 126 0 91 93 89 93 91 89 128 0 89 87 93 89 87 126 0
              87 85 93 87 85 126 0 83 85 81 85 83 81 128 0 81 79 85 81 79 126 0 79 77 85
              79 77 126 0 77 75 85 77 75 126 0 75 4 85 75 4 126 0 74 4 76 60 74 114 0
              78 76 80 58 78 114 0 86 84 88 70 86 114 0 101 92 99 92 101 99 128 0 99 97 92
              99 97 126 0 97 95 92 97 95 126 0 98 96 100 78 98 114 0 109 111 107 111 109 107 128
              0 108 106 110 98 108 114 0 6 114 129 5 6 114 0 125 127 123 127 125 123 128 0 116 117
              118 104 116 114 0 120 118 122 106 120 114 0 122 124 110 122 112 0 124 126 108 124 112 0 126
              128 112 126 112 0
              NPUSHW[ ]	/* 255 values pushed */
              128 7 114 128 112 0 7 143 118 7 143 126 0 143 141 117 143 112 0 139 141 137 123 139 114
              0 137 135 121 137 112 0 135 133 141 135 133 126 0 133 131 127 133 112 0 131 130 129 131 112
              0 132 130 134 126 132 114 0 134 136 124 134 112 0 136 138 120 136 112 0 138 140 122 138 112
              0 142 140 8 116 142 114 0 8 157 140 8 157 126 0 157 155 140 157 155 126 0 151 153 149
              153 151 149 128 0 149 147 153 149 147 126 0 147 145 153 147 145 126 0 145 144 153 145 144 126
              0 144 146 132 144 112 0 146 148 134 146 112 0 148 150 136 148 112 0 150 152 138 150 112 0
              152 154 140 152 112 0 156 154 9 142 156 114 0 9 169 154 9 169 126 0 169 167 154 169 167
              126 0 167 165 154 167 165 126 0 165 163 154 165 163 126 0 163 161 154 163 161 126 0 161 158
              154 161 158 126 0 158 159 153 158 112 0 159 160 152 159 112 0 160 162 144 160 112 0 162 164
              146 162 112 0 164 166 150 164 112 0 166 168 148 166 112 0 168 10 156 168 112 0 10 185 154
              10 185 126 0 185
              NPUSHW[ ]	/* 255 values pushed */
              183 154 185 183 126 0 181 183 179 183 181 179 128 0 179 177 183 179 177 126 0 177 175 183 177
              175 126 0 175 173 183 175 173 126 0 173 171 183 173 171 126 0 172 170 174 159 172 114 0 174
              176 160 174 112 0 176 178 162 176 112 0 178 180 164 178 112 0 184 182 199 168 184 114 0 199
              197 182 199 197 126 0 193 195 191 195 193 191 128 0 191 189 195 191 189 126 0 189 187 195 189
              187 126 0 187 186 195 187 186 126 0 186 188 172 186 112 0 188 190 176 188 112 0 194 192 196
              182 194 114 0 196 198 170 196 112 0 211 213 209 197 211 114 0 209 207 213 209 207 126 0 207
              205 195 207 112 0 205 203 213 205 203 126 0 204 202 206 186 204 114 0 206 208 194 206 112 0
              208 210 188 208 112 0 210 212 196 210 112 0 13 212 233 12 13 114 0 227 229 225 229 227 225
              128 0 225 223 229 225 223 126 0 223 221 229 223 221 126 0 221 219 229 221 219 126 0 214 215
              216 202 214 114 0 218 216 220 212 218 114 0 220 222 208 220 112 0 222 224 210 222 112 0 224
              226 206 224 112 0
              NPUSHW[ ]	/* 255 values pushed */
              226 228 204 226 112 0 232 230 14 200 232 114 0 14 253 230 14 253 126 0 253 251 215 253 112
              0 251 249 233 251 112 0 245 247 243 247 245 243 128 0 243 241 247 243 241 126 0 239 241 237
              241 239 237 128 0 237 235 241 237 235 126 0 235 234 219 235 112 0 234 236 218 234 112 0 236
              238 222 236 112 0 238 240 220 238 112 0 240 242 216 240 112 0 242 244 224 242 112 0 244 246
              226 244 112 0 246 248 228 246 112 0 248 250 230 248 112 0 250 252 232 250 112 0 252 15 214
              252 112 0 15 273 241 15 273 126 0 273 271 241 273 271 126 0 271 269 241 271 269 126 0 269
              267 241 269 267 126 0 267 265 241 267 265 126 0 265 263 241 265 263 126 0 263 261 241 263 261
              126 0 261 259 241 261 112 0 259 257 247 259 112 0 257 255 249 257 112 0 255 254 241 255 254
              126 0 256 254 258 254 256 114 0 258 260 254 258 112 0 260 262 254 260 112 0 262 264 254 262
              112 0 264 266 254 264 112 0 266 268 254 266 112 0 268 270 254 268 112 0 270 272 254 270 112
              0 272 16 254 272
              NPUSHW[ ]	/* 255 values pushed */
              112 0 16 293 254 16 293 126 0 293 291 254 293 291 126 0 291 289 254 291 289 126 0 289 287
              254 289 287 126 0 287 285 254 287 285 126 0 285 283 254 285 283 126 0 283 281 254 283 281 126
              0 281 279 254 281 279 126 0 279 277 254 279 277 126 0 277 275 254 277 275 126 0 275 274 254
              275 274 126 0 274 276 254 274 112 0 276 278 254 276 112 0 278 280 254 278 112 0 280 282 254
              280 112 0 282 284 254 282 112 0 284 286 254 284 112 0 286 288 254 286 112 0 288 290 254 288
              112 0 290 292 254 290 112 0 292 17 254 292 112 0 26 0 67 65 26 67 103 0 52 0 93
              91 52 93 103 0 66 0 85 83 66 85 103 0 92 0 95 94 92 95 103 0 82 0 115 113
              82 115 103 0 88 0 113 111 88 113 103 0 76 0 111 109 76 111 103 0 80 0 107 105 80
              107 103 0 84 0 105 103 84 105 103 0 90 0 103 5 90 103 103 0 4 0 5 102 4 5
              103 0 114 0 129 127 114 129 103 0 112 0 127 125 112 127 103 0 110 0 123 121 110 123 103
              0 106 0 121 119
              NPUSHW[ ]	/* 201 values pushed */
              106 121 103 0 102 0 119 117 102 119 103 0 104 0 117 116 104 117 103 0 96 0 141 139 96
              141 103 0 118 0 155 153 118 155 103 0 140 0 153 151 140 153 103 0 154 0 183 181 154 183
              103 0 130 0 171 11 130 171 103 0 170 0 197 195 170 197 103 0 182 0 195 193 182 195 103
              0 180 0 213 211 180 213 103 0 94 0 203 201 94 203 103 0 100 0 201 12 100 201 103 0
              11 0 12 200 11 12 103 0 200 0 233 231 200 233 103 0 192 0 231 229 192 231 103 0 190
              0 229 227 190 229 103 0 212 0 219 217 212 219 103 0 198 0 217 215 198 217 103 0 202 0
              215 214 202 215 103 0 230 0 249 247 230 249 103 0 228 0 247 245 228 247 103 0 216 0 241
              239 216 241 103 0 1 1 0 96 0 0 0 17 77 0 254 254 17 95 294 1 17 17 18 17
              78
            ELSE[ ]	/* Else */
              NPUSHW[ ]	/* 255 values pushed */
              0 37 0 35 0 37 35 128 0 35 33 0 35 33 126 0 33 31 0 33 31 126 0 31 29
              0 31 29 126 0 29 27 0 29 27 126 0 27 25 0 27 25 126 0 25 23 0 25 23 126
              0 23 21 0 23 21 126 0 21 19 0 21 19 126 0 19 18 0 19 18 126 0 18 20 0
              18 20 126 0 20 22 0 20 22 126 0 22 24 0 22 24 126 0 24 26 0 24 26 126 0
              28 26 30 26 28 30 128 0 30 32 26 30 32 126 0 32 34 26 32 34 126 0 34 36 26
              34 36 126 0 36 1 26 36 1 126 0 55 1 53 1 55 114 0 53 51 1 53 112 0 51
              49 1 51 112 0 49 47 1 49 112 0 47 45 1 47 112 0 45 43 1 45 112 0 43 41
              1 43 112 0 41 39 1 41 112 0 39 38 1 39 112 0 38 40 1 38 40 126 0 40 42
              1 40 42 126 0 42 44 1 42 44 126 0 44 46 1 44 46 126 0 46 48 1 46 48 126
              0 48 50 1 48 50 126 0 50 52 1 50 52 126 0 54 52 2 52 54 2 128 0 2 73
              52 2 73 126 0
              NPUSHW[ ]	/* 255 values pushed */
              73 71 52 73 71 126 0 71 69 52 71 69 126 0 69 67 52 69 67 126 0 65 67 63 67
              65 63 128 0 63 61 67 63 61 126 0 61 59 67 61 59 126 0 59 57 67 59 57 126 0
              57 56 67 57 56 126 0 56 58 67 56 58 126 0 58 60 67 58 60 126 0 60 62 67 60
              62 126 0 62 64 67 62 64 126 0 64 66 67 64 66 126 0 68 66 70 66 68 70 128 0
              70 72 66 70 72 126 0 72 3 66 72 3 126 0 3 93 66 3 93 126 0 91 93 89 93
              91 89 128 0 89 87 93 89 87 126 0 87 85 93 87 85 126 0 83 85 81 85 83 81 128
              0 81 79 85 81 79 126 0 79 77 85 79 77 126 0 77 75 85 77 75 126 0 75 4 85
              75 4 126 0 74 4 76 4 74 76 128 0 78 76 80 76 78 80 128 0 86 84 88 84 86
              88 128 0 101 92 99 92 101 99 128 0 99 97 92 99 97 126 0 97 95 92 97 95 126 0
              98 96 100 96 98 100 128 0 109 111 107 111 109 107 128 0 108 106 110 106 108 110 128 0 6
              114 129 114 6 129
              NPUSHW[ ]	/* 255 values pushed */
              128 0 125 127 123 127 125 123 128 0 116 117 118 117 116 118 128 0 120 118 122 118 120 122 128
              0 122 124 118 122 124 126 0 124 126 118 124 126 126 0 126 128 118 126 128 126 0 128 7 118
              128 7 126 0 7 143 118 7 143 126 0 143 141 118 143 141 126 0 139 141 137 141 139 137 128
              0 137 135 141 137 135 126 0 135 133 141 135 133 126 0 133 131 141 133 131 126 0 131 130 141
              131 130 126 0 132 130 134 130 132 134 128 0 134 136 130 134 136 126 0 136 138 130 136 138 126
              0 138 140 130 138 140 126 0 142 140 8 140 142 8 128 0 8 157 140 8 157 126 0 157 155
              140 157 155 126 0 151 153 149 153 151 149 128 0 149 147 153 149 147 126 0 147 145 153 147 145
              126 0 145 144 153 145 144 126 0 144 146 153 144 146 126 0 146 148 153 146 148 126 0 148 150
              153 148 150 126 0 150 152 153 150 152 126 0 152 154 153 152 154 126 0 156 154 9 154 156 9
              128 0 9 169 154 9 169 126 0 169 167 154 169 167 126 0 167 165 154 167 165 126 0 165 163
              154 165 163 126 0
              NPUSHW[ ]	/* 255 values pushed */
              163 161 154 163 161 126 0 161 158 154 161 158 126 0 158 159 154 158 159 126 0 159 160 154 159
              160 126 0 160 162 154 160 162 126 0 162 164 154 162 164 126 0 164 166 154 164 166 126 0 166
              168 154 166 168 126 0 168 10 154 168 10 126 0 10 185 154 10 185 126 0 185 183 154 185 183
              126 0 181 183 179 183 181 179 128 0 179 177 183 179 177 126 0 177 175 183 177 175 126 0 175
              173 183 175 173 126 0 173 171 183 173 171 126 0 172 170 174 170 172 174 128 0 174 176 170 174
              176 126 0 176 178 170 176 178 126 0 178 180 170 178 180 126 0 184 182 199 182 184 199 128 0
              199 197 182 199 197 126 0 193 195 191 195 193 191 128 0 191 189 195 191 189 126 0 189 187 195
              189 187 126 0 187 186 195 187 186 126 0 186 188 195 186 188 126 0 188 190 195 188 190 126 0
              194 192 196 192 194 196 128 0 196 198 192 196 198 126 0 211 213 209 213 211 209 128 0 209 207
              213 209 207 126 0 207 205 213 207 205 126 0 205 203 213 205 203 126 0 204 202 206 202 204 206
              128 0 206 208 202
              NPUSHW[ ]	/* 255 values pushed */
              206 208 126 0 208 210 202 208 210 126 0 210 212 202 210 212 126 0 13 212 233 212 13 233 128
              0 227 229 225 229 227 225 128 0 225 223 229 225 223 126 0 223 221 229 223 221 126 0 221 219
              229 221 219 126 0 214 215 216 215 214 216 128 0 218 216 220 216 218 220 128 0 220 222 216 220
              222 126 0 222 224 216 222 224 126 0 224 226 216 224 226 126 0 226 228 216 226 228 126 0 232
              230 14 230 232 14 128 0 14 253 230 14 253 126 0 253 251 230 253 251 126 0 251 249 230 251
              249 126 0 245 247 243 247 245 243 128 0 243 241 247 243 241 126 0 239 241 237 241 239 237 128
              0 237 235 241 237 235 126 0 235 234 241 235 234 126 0 234 236 241 234 236 126 0 236 238 241
              236 238 126 0 238 240 241 238 240 126 0 240 242 241 240 242 126 0 242 244 241 242 244 126 0
              244 246 241 244 246 126 0 246 248 241 246 248 126 0 248 250 241 248 250 126 0 250 252 241 250
              252 126 0 252 15 241 252 15 126 0 15 273 241 15 273 126 0 273 271 241 273 271 126 0 271
              269 241 271 269 126
              NPUSHW[ ]	/* 255 values pushed */
              0 269 267 241 269 267 126 0 267 265 241 267 265 126 0 265 263 241 265 263 126 0 263 261 241
              263 261 126 0 261 259 241 261 259 126 0 259 257 241 259 257 126 0 257 255 241 257 255 126 0
              255 254 241 255 254 126 0 256 254 258 254 256 114 0 258 260 254 258 112 0 260 262 254 260 112
              0 262 264 254 262 112 0 264 266 254 264 112 0 266 268 254 266 112 0 268 270 254 268 112 0
              270 272 254 270 112 0 272 16 254 272 112 0 16 293 254 16 293 126 0 293 291 254 293 291 126
              0 291 289 254 291 289 126 0 289 287 254 289 287 126 0 287 285 254 287 285 126 0 285 283 254
              285 283 126 0 283 281 254 283 281 126 0 281 279 254 281 279 126 0 279 277 254 279 277 126 0
              277 275 254 277 275 126 0 275 274 254 275 274 126 0 274 276 254 274 276 126 0 276 278 254 276
              278 126 0 278 280 254 278 280 126 0 280 282 254 280 282 126 0 282 284 254 282 284 126 0 284
              286 254 284 286 126 0 286 288 254 286 288 126 0 288 290 254 288 290 126 0 290 292 254 290 292
              126 0 292 17 254
              NPUSHW[ ]	/* 255 values pushed */
              292 17 126 0 26 0 67 65 26 67 103 0 52 0 93 91 52 93 103 0 66 0 85 83 66
              85 103 0 92 0 95 94 92 95 103 0 82 0 115 113 82 115 103 0 88 0 113 111 88 113
              103 0 76 0 111 109 76 111 103 0 80 0 107 105 80 107 103 0 84 0 105 103 84 105 103
              0 90 0 103 5 90 103 103 0 4 0 5 102 4 5 103 0 114 0 129 127 114 129 103 0
              112 0 127 125 112 127 103 0 110 0 123 121 110 123 103 0 106 0 121 119 106 121 103 0 102
              0 119 117 102 119 103 0 104 0 117 116 104 117 103 0 96 0 141 139 96 141 103 0 118 0
              155 153 118 155 103 0 140 0 153 151 140 153 103 0 154 0 183 181 154 183 103 0 130 0 171
              11 130 171 103 0 170 0 197 195 170 197 103 0 182 0 195 193 182 195 103 0 180 0 213 211
              180 213 103 0 94 0 203 201 94 203 103 0 100 0 201 12 100 201 103 0 11 0 12 200 11
              12 103 0 200 0 233 231 200 233 103 0 192 0 231 229 192 231 103 0 190 0 229 227 190 229
              103 0 212 0 219
              NPUSHW[ ]	/* 66 values pushed */
              217 212 219 103 0 198 0 217 215 198 217 103 0 202 0 215 214 202 215 103 0 230 0 249 247
              230 249 103 0 228 0 247 245 228 247 103 0 216 0 241 239 216 241 103 0 1 1 0 96 0
              0 0 17 77 0 254 254 17 95 294 1 17 17 18 17 78
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          NPUSHW[ ]	/* 255 values pushed */
          0 0 615 614 613 612 611 610 609 608 607 606 605 604 603 602 601 600 599 598 597 596 595 594 593
          592 591 590 589 588 587 586 585 584 583 582 581 580 579 578 577 576 575 574 573 572 571 570 569 568
          567 566 565 564 563 562 561 560 559 558 557 556 555 554 553 552 551 550 549 548 547 546 545 544 543
          542 541 540 539 538 537 536 535 534 533 532 531 530 529 528 527 526 525 524 523 522 521 520 519 518
          517 516 515 514 513 512 511 510 509 508 507 506 505 504 503 502 501 500 499 498 497 496 495 494 493
          492 491 490 489 488 487 486 485 484 483 482 481 480 479 478 477 476 475 474 473 472 471 470 469 468
          467 466 465 464 463 462 461 460 459 458 457 456 455 454 453 452 451 450 449 448 447 446 445 444 443
          442 441 440 439 438 437 436 435 434 433 432 431 430 429 428 427 426 425 424 423 422 421 420 419 418
          417 416 415 414 413 412 411 410 409 408 407 406 405 404 403 402 401 400 399 398 397 396 395 394 393
          392 391 390 389 388 387 386 385 384 383 382 381 380 379 378 377 376 375 374 373 372 371 370 369 368
          367 366 365 364 363
          NPUSHW[ ]	/* 255 values pushed */
          362 361 360 359 358 357 356 355 354 353 352 351 350 349 348 347 346 345 344 343 342 341 340 339 338
          337 336 335 334 333 332 331 330 329 328 327 326 325 324 323 322 321 320 319 318 317 316 315 314 313
          312 311 310 309 308 307 306 305 304 303 302 301 300 299 298 297 296 295 294 293 292 291 290 289 288
          287 286 285 284 283 282 281 280 279 278 277 276 275 274 273 272 271 270 269 268 267 266 265 264 263
          262 261 260 259 258 257 256 255 254 253 252 251 250 249 248 247 246 245 244 243 242 241 240 239 238
          237 236 235 234 233 232 231 230 229 228 227 226 225 224 223 222 221 220 219 218 217 216 215 214 213
          212 211 210 209 208 207 206 205 204 203 202 201 200 199 198 197 196 195 194 193 192 191 190 189 188
          187 186 185 184 183 182 181 180 179 178 177 176 175 174 173 172 171 170 169 168 167 166 165 164 163
          162 161 160 159 158 157 156 155 154 153 152 151 150 149 148 147 146 145 144 143 142 141 140 139 138
          137 136 135 134 133 132 131 130 129 128 127 126 125 124 123 122 121 120 119 118 117 116 115 114 113
          112 111 110 109 108
          NPUSHW[ ]	/* 76 values pushed */
          107 106 105 104 103 102 101 100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83
          82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 0 63 0 62 60 58
          56 54 52 50 48 46 44 43 42 41 40 38 36 34 34 34 34 17 17 34 34 34 49 295 7
          31
          CALL[ ]	/* CallFunction */
        </assembly>
      </instructions>
    </TTGlyph>

  </glyf>

  <name>
    <namerecord nameID="0" platformID="3" platEncID="1" langID="0x409">
      Copyright 2023 The Soft Type Project Authors (https://github.com/scfried/soft-type-jacquarda-bastarda)
    </namerecord>
    <namerecord nameID="1" platformID="3" platEncID="1" langID="0x409">
      Jacquarda Bastarda 9 Charted
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x409">
      Regular
    </namerecord>
    <namerecord nameID="3" platformID="3" platEncID="1" langID="0x409">
      1.000;NONE;JacquardaBastarda9Charted-Regular
    </namerecord>
    <namerecord nameID="4" platformID="3" platEncID="1" langID="0x409">
      Jacquarda Bastarda 9 Charted Regular
    </namerecord>
    <namerecord nameID="5" platformID="3" platEncID="1" langID="0x409">
      Version 1.000; ttfautohint (v1.8.4.7-5d5b)
    </namerecord>
    <namerecord nameID="6" platformID="3" platEncID="1" langID="0x409">
      JacquardaBastarda9Charted-Regular
    </namerecord>
  </name>

  <post>
    <formatType value="3.0"/>
    <italicAngle value="0.0"/>
    <underlinePosition value="-100"/>
    <underlineThickness value="50"/>
    <isFixedPitch value="0"/>
    <minMemType42 value="0"/>
    <maxMemType42 value="0"/>
    <minMemType1 value="0"/>
    <maxMemType1 value="0"/>
  </post>

  <gasp>
    <gaspRange rangeMaxPPEM="65535" rangeGaspBehavior="15"/>
  </gasp>

  <GDEF>
    <Version value="0x00010000"/>
    <GlyphClassDef>
      <ClassDef glyph="A" class="1"/>
      <ClassDef glyph="Aacute" class="1"/>
    </GlyphClassDef>
  </GDEF>

  <GPOS>
    <Version value="0x00010000"/>
    <ScriptList>
      <!-- ScriptCount=1 -->
      <ScriptRecord index="0">
        <ScriptTag value="DFLT"/>
        <Script>
          <DefaultLangSys>
            <ReqFeatureIndex value="65535"/>
            <!-- FeatureCount=0 -->
          </DefaultLangSys>
          <!-- LangSysCount=0 -->
        </Script>
      </ScriptRecord>
    </ScriptList>
    <FeatureList>
      <!-- FeatureCount=0 -->
    </FeatureList>
    <LookupList>
      <!-- LookupCount=0 -->
    </LookupList>
  </GPOS>

</ttFont>
