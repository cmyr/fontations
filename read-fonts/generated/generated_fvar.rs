// THIS FILE IS AUTOGENERATED.
// Any changes to this file will be overwritten.
// For more information about how codegen works, see font-codegen/README.md

#[allow(unused_imports)]
use crate::codegen_prelude::*;

/// [fvar (Font Variations Table)](https://learn.microsoft.com/en-us/typography/opentype/spec/fvar) table
#[derive(Debug, Clone, Copy)]
#[doc(hidden)]
pub struct FvarMarker {}

impl FvarMarker {
    fn major_version_byte_range(&self) -> Range<usize> {
        let start = 0;
        start..start + u16::RAW_BYTE_LEN
    }
    fn minor_version_byte_range(&self) -> Range<usize> {
        let start = self.major_version_byte_range().end;
        start..start + u16::RAW_BYTE_LEN
    }
    fn axes_array_offset_byte_range(&self) -> Range<usize> {
        let start = self.minor_version_byte_range().end;
        start..start + Offset16::RAW_BYTE_LEN
    }
    fn reserved_byte_range(&self) -> Range<usize> {
        let start = self.axes_array_offset_byte_range().end;
        start..start + u16::RAW_BYTE_LEN
    }
    fn axis_count_byte_range(&self) -> Range<usize> {
        let start = self.reserved_byte_range().end;
        start..start + u16::RAW_BYTE_LEN
    }
    fn axis_size_byte_range(&self) -> Range<usize> {
        let start = self.axis_count_byte_range().end;
        start..start + u16::RAW_BYTE_LEN
    }
    fn instance_count_byte_range(&self) -> Range<usize> {
        let start = self.axis_size_byte_range().end;
        start..start + u16::RAW_BYTE_LEN
    }
    fn instance_size_byte_range(&self) -> Range<usize> {
        let start = self.instance_count_byte_range().end;
        start..start + u16::RAW_BYTE_LEN
    }
}

impl<'a> FontRead<'a> for Fvar<'a> {
    fn read(data: FontData<'a>) -> Result<Self, ReadError> {
        let mut cursor = data.cursor();
        cursor.advance::<u16>();
        cursor.advance::<u16>();
        cursor.advance::<Offset16>();
        cursor.advance::<u16>();
        cursor.advance::<u16>();
        cursor.advance::<u16>();
        cursor.advance::<u16>();
        cursor.advance::<u16>();
        cursor.finish(FvarMarker {})
    }
}

/// [fvar (Font Variations Table)](https://learn.microsoft.com/en-us/typography/opentype/spec/fvar) table
pub type Fvar<'a> = TableRef<'a, FvarMarker>;

impl<'a> Fvar<'a> {
    /// Major version number of the font variations table — set to 1.
    pub fn major_version(&self) -> u16 {
        let range = self.shape.major_version_byte_range();
        self.data.read_at(range.start).unwrap()
    }

    /// Minor version number of the font variations table — set to 0.
    pub fn minor_version(&self) -> u16 {
        let range = self.shape.minor_version_byte_range();
        self.data.read_at(range.start).unwrap()
    }

    /// Offset in bytes from the beginning of the table to the start of
    /// the VariationAxisRecord array.
    /// The header is followed by axes and instances arrays.
    /// The location of the axes array is specified in the axesArrayOffset field;

    /// the instances array directly follows the axes array.
    pub fn axes_array_offset(&self) -> Offset16 {
        let range = self.shape.axes_array_offset_byte_range();
        self.data.read_at(range.start).unwrap()
    }

    /// Attempt to resolve [`axes_array_offset`][Self::axes_array_offset].
    pub fn axes_array(&self) -> Result<FvarData<'a>, ReadError> {
        let data = self.data;
        let args = (self.axis_count(), self.instance_count());
        self.axes_array_offset().resolve_with_args(data, &args)
    }

    /// The number of variation axes in the font (the number of records
    /// in the axes array).
    pub fn axis_count(&self) -> u16 {
        let range = self.shape.axis_count_byte_range();
        self.data.read_at(range.start).unwrap()
    }

    /// The size in bytes of each VariationAxisRecord — set to 20
    /// (0x0014) for this version.
    pub fn axis_size(&self) -> u16 {
        let range = self.shape.axis_size_byte_range();
        self.data.read_at(range.start).unwrap()
    }

    /// The number of named instances defined in the font (the number
    /// of records in the instances array).
    pub fn instance_count(&self) -> u16 {
        let range = self.shape.instance_count_byte_range();
        self.data.read_at(range.start).unwrap()
    }

    /// The size in bytes of each InstanceRecord — set to either
    /// axisCount * sizeof(Fixed) + 4, or to axisCount * sizeof(Fixed)
    /// + 6.
    pub fn instance_size(&self) -> u16 {
        let range = self.shape.instance_size_byte_range();
        self.data.read_at(range.start).unwrap()
    }
}

#[cfg(feature = "traversal")]
impl<'a> SomeTable<'a> for Fvar<'a> {
    fn type_name(&self) -> &str {
        "Fvar"
    }
    fn get_field(&self, idx: usize) -> Option<Field<'a>> {
        match idx {
            0usize => Some(Field::new("major_version", self.major_version())),
            1usize => Some(Field::new("minor_version", self.minor_version())),
            2usize => Some(Field::new(
                "axes_array_offset",
                FieldType::offset(self.axes_array_offset(), self.axes_array()),
            )),
            3usize => Some(Field::new("axis_count", self.axis_count())),
            4usize => Some(Field::new("axis_size", self.axis_size())),
            5usize => Some(Field::new("instance_count", self.instance_count())),
            6usize => Some(Field::new("instance_size", self.instance_size())),
            _ => None,
        }
    }
}

#[cfg(feature = "traversal")]
impl<'a> std::fmt::Debug for Fvar<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        (self as &dyn SomeTable<'a>).fmt(f)
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
#[repr(packed)]
pub struct VariationAxisRecord {
    ///         Tag identifying the design variation for the axis.
    pub axis_tag: BigEndian<Tag>,
    ///     The minimum coordinate value for the axis.
    pub min_value: BigEndian<Fixed>,
    /// The default coordinate value for the axis.
    pub default_value: BigEndian<Fixed>,
    ///     The maximum coordinate value for the axis.
    pub max_value: BigEndian<Fixed>,
    ///         Axis qualifiers — see details below.
    pub flags: BigEndian<u16>,
    ///     The name ID for entries in the 'name' table that provide a
    /// display name for this axis.
    pub axis_name_id: BigEndian<u16>,
}

impl VariationAxisRecord {
    ///         Tag identifying the design variation for the axis.
    pub fn axis_tag(&self) -> Tag {
        self.axis_tag.get()
    }

    ///     The minimum coordinate value for the axis.
    pub fn min_value(&self) -> Fixed {
        self.min_value.get()
    }

    /// The default coordinate value for the axis.
    pub fn default_value(&self) -> Fixed {
        self.default_value.get()
    }

    ///     The maximum coordinate value for the axis.
    pub fn max_value(&self) -> Fixed {
        self.max_value.get()
    }

    ///         Axis qualifiers — see details below.
    pub fn flags(&self) -> u16 {
        self.flags.get()
    }

    ///     The name ID for entries in the 'name' table that provide a
    /// display name for this axis.
    pub fn axis_name_id(&self) -> u16 {
        self.axis_name_id.get()
    }
}

impl FixedSize for VariationAxisRecord {
    const RAW_BYTE_LEN: usize = Tag::RAW_BYTE_LEN
        + Fixed::RAW_BYTE_LEN
        + Fixed::RAW_BYTE_LEN
        + Fixed::RAW_BYTE_LEN
        + u16::RAW_BYTE_LEN
        + u16::RAW_BYTE_LEN;
}

#[cfg(feature = "traversal")]
impl<'a> SomeRecord<'a> for VariationAxisRecord {
    fn traverse(self, data: FontData<'a>) -> RecordResolver<'a> {
        RecordResolver {
            name: "VariationAxisRecord",
            get_field: Box::new(move |idx, _data| match idx {
                0usize => Some(Field::new("axis_tag", self.axis_tag())),
                1usize => Some(Field::new("min_value", self.min_value())),
                2usize => Some(Field::new("default_value", self.default_value())),
                3usize => Some(Field::new("max_value", self.max_value())),
                4usize => Some(Field::new("flags", self.flags())),
                5usize => Some(Field::new("axis_name_id", self.axis_name_id())),
                _ => None,
            }),
            data,
        }
    }
}

#[derive(Clone, Debug)]
pub struct InstanceRecord {
    /// The name ID for entries in the 'name' table that provide
    /// subfamily names for this instance.
    pub subfamily_name_i_d: BigEndian<u16>,
    /// Reserved for future use — set to 0.
    pub flags: BigEndian<u16>,
    /// The coordinates array for this instance.
    pub coordinates: UserTuple,
    /// Optional. The name ID for entries in the 'name' table that
    /// provide PostScript names for this instance.
    pub post_script_name_i_d: BigEndian<u16>,
}

impl InstanceRecord {
    /// The name ID for entries in the 'name' table that provide
    /// subfamily names for this instance.
    pub fn subfamily_name_i_d(&self) -> u16 {
        self.subfamily_name_i_d.get()
    }

    /// Reserved for future use — set to 0.
    pub fn flags(&self) -> u16 {
        self.flags.get()
    }

    /// The coordinates array for this instance.
    pub fn coordinates(&self) -> &UserTuple {
        &self.coordinates
    }

    /// Optional. The name ID for entries in the 'name' table that
    /// provide PostScript names for this instance.
    pub fn post_script_name_i_d(&self) -> u16 {
        self.post_script_name_i_d.get()
    }
}

impl ReadArgs for InstanceRecord {
    type Args = u16;
}

impl ComputeSize for InstanceRecord {
    fn compute_size(args: &u16) -> usize {
        let axis_count = *args;
        u16::RAW_BYTE_LEN
            + u16::RAW_BYTE_LEN
            + <UserTuple as ComputeSize>::compute_size(&axis_count)
            + u16::RAW_BYTE_LEN
    }
}

impl<'a> FontReadWithArgs<'a> for InstanceRecord {
    fn read_with_args(data: FontData<'a>, args: &u16) -> Result<Self, ReadError> {
        let mut cursor = data.cursor();
        let axis_count = *args;
        Ok(Self {
            subfamily_name_i_d: cursor.read()?,
            flags: cursor.read()?,
            coordinates: cursor.read_with_args(&axis_count)?,
            post_script_name_i_d: cursor.read()?,
        })
    }
}

#[cfg(feature = "traversal")]
impl<'a> SomeRecord<'a> for InstanceRecord {
    fn traverse(self, data: FontData<'a>) -> RecordResolver<'a> {
        RecordResolver {
            name: "InstanceRecord",
            get_field: Box::new(move |idx, _data| match idx {
                0usize => Some(Field::new("subfamily_name_i_d", self.subfamily_name_i_d())),
                1usize => Some(Field::new("flags", self.flags())),
                2usize => Some(compile_error!(concat!(
                    "another weird type: ",
                    "coordinates"
                ))),
                3usize => Some(Field::new(
                    "post_script_name_i_d",
                    self.post_script_name_i_d(),
                )),
                _ => None,
            }),
            data,
        }
    }
}

#[derive(Clone, Debug)]
pub struct UserTuple<'a> {
    /// Coordinate array specifying a position within the font’s
    /// variation space.
    pub coordinates: &'a [BigEndian<Fixed>],
}

impl<'a> UserTuple<'a> {
    /// Coordinate array specifying a position within the font’s
    /// variation space.
    pub fn coordinates(&self) -> &'a [BigEndian<Fixed>] {
        self.coordinates
    }
}

impl ReadArgs for UserTuple<'_> {
    type Args = u16;
}

impl ComputeSize for UserTuple<'_> {
    fn compute_size(args: &u16) -> usize {
        let axis_count = *args;
        axis_count as usize * Fixed::RAW_BYTE_LEN
    }
}

impl<'a> FontReadWithArgs<'a> for UserTuple<'a> {
    fn read_with_args(data: FontData<'a>, args: &u16) -> Result<Self, ReadError> {
        let mut cursor = data.cursor();
        let axis_count = *args;
        Ok(Self {
            coordinates: cursor.read_array(axis_count as usize)?,
        })
    }
}

#[cfg(feature = "traversal")]
impl<'a> SomeRecord<'a> for UserTuple<'a> {
    fn traverse(self, data: FontData<'a>) -> RecordResolver<'a> {
        RecordResolver {
            name: "UserTuple",
            get_field: Box::new(move |idx, _data| match idx {
                0usize => Some(Field::new("coordinates", self.coordinates())),
                _ => None,
            }),
            data,
        }
    }
}
