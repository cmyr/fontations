//! Scaler instance state.

use super::{
    cff, Hinting, LocationRef, NormalizedCoord, Outline, OutlineCollection, OutlineCollectionKind,
    OutlineKind, Pen, ScalerError, Size,
};

/// Information and adjusted metrics generated while scaling a glyph.
#[derive(Copy, Clone, Default, Debug)]
pub struct ScalerMetrics {
    /// True if the underlying glyph contains flags indicating the
    /// presence of overlapping contours or components.
    pub has_overlaps: bool,
    /// If present, an adjusted left side bearing value generated by the
    /// scaler.
    pub adjusted_lsb: Option<f32>,
    /// If present, an adjusted advance width value generated by the
    /// scaler.
    pub adjusted_advance_width: Option<f32>,
}

#[derive(Clone)]
pub struct Scaler {
    size: Size,
    coords: Vec<NormalizedCoord>,
    hinting: Hinting,
    kind: ScalerKind,
}

impl Default for Scaler {
    fn default() -> Self {
        Self {
            size: Size::unscaled(),
            coords: vec![],
            hinting: Hinting::None,
            kind: ScalerKind::None,
        }
    }
}

impl Scaler {
    pub fn size(&self) -> Size {
        self.size
    }

    pub fn location(&self) -> LocationRef {
        LocationRef::new(&self.coords)
    }

    pub fn hinting(&self) -> Hinting {
        self.hinting
    }

    pub fn reconfigure(
        &mut self,
        outlines: &OutlineCollection,
        size: Size,
        location: LocationRef,
        hinting: Hinting,
    ) {
        self.size = size;
        self.coords.clear();
        self.coords.extend_from_slice(location.coords());
        self.hinting = hinting;
        // Reuse instance kind memory if the font contains the same outline format
        let current_kind = core::mem::replace(&mut self.kind, ScalerKind::None);
        match &outlines.kind {
            OutlineCollectionKind::Glyf(_) => {
                self.kind = ScalerKind::Glyf();
            }
            OutlineCollectionKind::Cff(cff) => {
                let mut subfonts = match current_kind {
                    ScalerKind::Cff(subfonts) => subfonts,
                    _ => vec![],
                };
                subfonts.clear();
                let size = size.ppem().unwrap_or_default();
                for i in 0..cff.subfont_count() {
                    subfonts.push(cff.subfont(i, size, &self.coords).ok());
                }
                self.kind = ScalerKind::Cff(subfonts);
            }
            OutlineCollectionKind::None => {}
        }
    }

    pub(super) fn scale(
        &self,
        outline: &Outline,
        memory: Option<&mut [u8]>,
        pen: &mut impl Pen,
    ) -> Result<ScalerMetrics, ScalerError> {
        match (&self.kind, &outline.kind) {
            (ScalerKind::Glyf(..), OutlineKind::Glyf(glyf, outline)) => {
                let mut scratch = vec![];
                let tmp_buf = memory.unwrap_or_else(|| {
                    scratch.resize(outline.required_buffer_size(self.hinting), 0);
                    &mut scratch[..]
                });
                let mem = outline
                    .memory_from_buffer(tmp_buf, self.hinting)
                    .ok_or(ScalerError::InsufficientMemory)?;
                let scaled_outline = glyf.scale(
                    mem,
                    outline,
                    self.size.ppem().unwrap_or_default(),
                    &self.coords,
                )?;
                scaled_outline.to_path(pen)?;
                Ok(ScalerMetrics {
                    has_overlaps: outline.has_overlaps,
                    ..Default::default()
                })
            }
            (ScalerKind::Cff(subfonts), OutlineKind::Cff(cff, glyph_id, subfont_ix)) => {
                let Some(Some(subfont)) = subfonts.get(*subfont_ix as usize) else {
                    return Err(ScalerError::NoSources);
                };
                cff.outline(
                    subfont,
                    *glyph_id,
                    &self.coords,
                    self.hinting != Hinting::None,
                    pen,
                )?;
                Ok(ScalerMetrics::default())
            }
            _ => Err(ScalerError::NoSources),
        }
    }
}

#[derive(Clone)]
enum ScalerKind {
    None,
    Glyf(),
    Cff(Vec<Option<cff::Subfont>>),
}
